<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.2" viewBox="0 0 28000 15750" preserveAspectRatio="xMidYMid" fill-rule="evenodd" stroke-width="28.222" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" xmlns:ooo="http://xml.openoffice.org/svg/export" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:presentation="http://sun.com/xmlns/staroffice/presentation" xmlns:smil="http://www.w3.org/2001/SMIL20/" xmlns:anim="urn:oasis:names:tc:opendocument:xmlns:animation:1.0" xml:space="preserve">
 <defs class="ClipPathGroup">
  <clipPath id="presentation_clip_path" clipPathUnits="userSpaceOnUse">
   <rect x="0" y="0" width="28000" height="15750"/>
  </clipPath>
  <clipPath id="presentation_clip_path_shrink" clipPathUnits="userSpaceOnUse">
   <rect x="28" y="15" width="27944" height="15719"/>
  </clipPath>
 </defs>
 <defs>
  <g id="ooo:meta_slides" ooo:number-of-slides="1" ooo:start-slide-number="0">
   <g id="ooo:meta_dummy_slide" ooo:slide="dummy-slide" ooo:master="dummy-master-page" ooo:background-visibility="hidden" ooo:master-objects-visibility="hidden" ooo:has-transition="false"/>
   <g id="ooo:meta_slide_0" ooo:slide="id1" ooo:master="id2" ooo:has-transition="true"/>
  </g>
 </defs>
 <defs id="presentation-animations"/>
 <defs>
  <font id="EmbeddedFont_1" horiz-adv-x="2048">
   <font-face font-family="Liberation Sans embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="1852" descent="423"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="’" horiz-adv-x="239" d="M 328,1264 C 328,1194 322,1135 309,1088 296,1040 277,995 250,952 L 127,952 C 190,1043 221,1129 221,1212 L 133,1212 133,1409 328,1409 328,1264 Z"/>
   <glyph unicode="‘" horiz-adv-x="239" d="M 127,952 L 127,1098 C 127,1163 133,1220 146,1269 158,1318 178,1364 207,1409 L 328,1409 C 265,1318 233,1230 233,1147 L 322,1147 322,952 127,952 Z"/>
   <glyph unicode="–" horiz-adv-x="1139" d="M 0,451 L 0,588 1138,588 1138,451 0,451 Z"/>
   <glyph unicode="z" horiz-adv-x="848" d="M 83,0 L 83,137 688,943 117,943 117,1082 901,1082 901,945 295,139 922,139 922,0 83,0 Z"/>
   <glyph unicode="x" horiz-adv-x="1006" d="M 801,0 L 510,444 217,0 23,0 408,556 41,1082 240,1082 510,661 778,1082 979,1082 612,558 1002,0 801,0 Z"/>
   <glyph unicode="v" horiz-adv-x="1033" d="M 613,0 L 400,0 7,1082 199,1082 437,378 C 446,351 469,272 506,141 L 541,258 580,376 826,1082 1017,1082 613,0 Z"/>
   <glyph unicode="u" horiz-adv-x="874" d="M 314,1082 L 314,396 C 314,325 321,269 335,230 349,191 371,162 402,145 433,128 478,119 537,119 624,119 692,149 742,208 792,267 817,350 817,455 L 817,1082 997,1082 997,231 C 997,105 999,28 1003,0 L 833,0 C 832,3 832,12 831,27 830,42 830,59 829,78 828,97 826,132 825,185 L 822,185 C 781,110 733,58 679,27 624,-4 557,-20 476,-20 357,-20 271,10 216,69 161,128 133,225 133,361 L 133,1082 314,1082 Z"/>
   <glyph unicode="t" horiz-adv-x="531" d="M 554,8 C 495,-8 434,-16 372,-16 228,-16 156,66 156,229 L 156,951 31,951 31,1082 163,1082 216,1324 336,1324 336,1082 536,1082 536,951 336,951 336,268 C 336,216 345,180 362,159 379,138 408,127 450,127 474,127 509,132 554,141 L 554,8 Z"/>
   <glyph unicode="s" horiz-adv-x="901" d="M 950,299 C 950,197 912,118 835,63 758,8 650,-20 511,-20 376,-20 273,2 200,47 127,91 79,160 57,254 L 216,285 C 231,227 263,185 311,158 359,131 426,117 511,117 602,117 669,131 712,159 754,187 775,229 775,285 775,328 760,362 731,389 702,416 654,438 589,455 L 460,489 C 357,516 283,542 240,568 196,593 162,624 137,661 112,698 100,743 100,796 100,895 135,970 206,1022 276,1073 378,1099 513,1099 632,1099 727,1078 798,1036 868,994 912,927 931,834 L 769,814 C 759,862 732,899 689,925 645,950 586,963 513,963 432,963 372,951 333,926 294,901 275,864 275,814 275,783 283,758 299,738 315,718 339,701 370,687 401,673 467,654 568,629 663,605 732,583 774,563 816,542 849,520 874,495 898,470 917,442 930,410 943,377 950,340 950,299 Z"/>
   <glyph unicode="r" horiz-adv-x="530" d="M 142,0 L 142,830 C 142,906 140,990 136,1082 L 306,1082 C 311,959 314,886 314,861 L 318,861 C 347,954 380,1017 417,1051 454,1085 507,1102 575,1102 599,1102 623,1099 648,1092 L 648,927 C 624,934 592,937 552,937 477,937 420,905 381,841 342,776 322,684 322,564 L 322,0 142,0 Z"/>
   <glyph unicode="p" horiz-adv-x="953" d="M 1053,546 C 1053,169 920,-20 655,-20 488,-20 376,43 319,168 L 314,168 C 317,163 318,106 318,-2 L 318,-425 138,-425 138,861 C 138,972 136,1046 132,1082 L 306,1082 C 307,1079 308,1070 309,1054 310,1037 312,1012 314,978 315,944 316,921 316,908 L 320,908 C 352,975 394,1024 447,1055 500,1086 569,1101 655,1101 788,1101 888,1056 954,967 1020,878 1053,737 1053,546 Z M 864,542 C 864,693 844,800 803,865 762,930 698,962 609,962 538,962 482,947 442,917 401,887 371,840 350,777 329,713 318,630 318,528 318,386 341,281 386,214 431,147 505,113 607,113 696,113 762,146 803,212 844,277 864,387 864,542 Z"/>
   <glyph unicode="o" horiz-adv-x="980" d="M 1053,542 C 1053,353 1011,212 928,119 845,26 724,-20 565,-20 407,-20 288,28 207,125 126,221 86,360 86,542 86,915 248,1102 571,1102 736,1102 858,1057 936,966 1014,875 1053,733 1053,542 Z M 864,542 C 864,691 842,800 798,868 753,935 679,969 574,969 469,969 393,935 346,866 299,797 275,689 275,542 275,399 298,292 345,221 391,149 464,113 563,113 671,113 748,148 795,217 841,286 864,395 864,542 Z"/>
   <glyph unicode="n" horiz-adv-x="874" d="M 825,0 L 825,686 C 825,757 818,813 804,852 790,891 768,920 737,937 706,954 661,963 602,963 515,963 447,933 397,874 347,815 322,732 322,627 L 322,0 142,0 142,851 C 142,977 140,1054 136,1082 L 306,1082 C 307,1079 307,1070 308,1055 309,1040 310,1024 311,1005 312,986 313,950 314,897 L 317,897 C 358,972 406,1025 461,1056 515,1087 582,1102 663,1102 782,1102 869,1073 924,1014 979,955 1006,857 1006,721 L 1006,0 825,0 Z"/>
   <glyph unicode="m" horiz-adv-x="1457" d="M 768,0 L 768,686 C 768,791 754,863 725,903 696,943 645,963 570,963 493,963 433,934 388,875 343,816 321,734 321,627 L 321,0 142,0 142,851 C 142,977 140,1054 136,1082 L 306,1082 C 307,1079 307,1070 308,1055 309,1040 310,1024 311,1005 312,986 313,950 314,897 L 317,897 C 356,974 400,1027 450,1057 500,1087 561,1102 633,1102 715,1102 780,1086 828,1053 875,1020 908,968 927,897 L 930,897 C 967,970 1013,1022 1066,1054 1119,1086 1183,1102 1258,1102 1367,1102 1447,1072 1497,1013 1546,954 1571,856 1571,721 L 1571,0 1393,0 1393,686 C 1393,791 1379,863 1350,903 1321,943 1270,963 1195,963 1116,963 1055,934 1012,876 968,817 946,734 946,627 L 946,0 768,0 Z"/>
   <glyph unicode="l" horiz-adv-x="187" d="M 138,0 L 138,1484 318,1484 318,0 138,0 Z"/>
   <glyph unicode="k" horiz-adv-x="901" d="M 816,0 L 450,494 318,385 318,0 138,0 138,1484 318,1484 318,557 793,1082 1004,1082 565,617 1027,0 816,0 Z"/>
   <glyph unicode="i" horiz-adv-x="187" d="M 137,1312 L 137,1484 317,1484 317,1312 137,1312 Z M 137,0 L 137,1082 317,1082 317,0 137,0 Z"/>
   <glyph unicode="h" horiz-adv-x="874" d="M 317,897 C 356,968 402,1020 457,1053 511,1086 580,1102 663,1102 780,1102 867,1073 923,1015 978,956 1006,858 1006,721 L 1006,0 825,0 825,686 C 825,762 818,819 804,856 790,893 767,920 735,937 703,954 659,963 602,963 517,963 450,934 399,875 348,816 322,737 322,638 L 322,0 142,0 142,1484 322,1484 322,1098 C 322,1057 321,1015 319,972 316,929 315,904 314,897 L 317,897 Z"/>
   <glyph unicode="g" horiz-adv-x="927" d="M 548,-425 C 430,-425 336,-402 266,-356 196,-309 151,-243 131,-158 L 312,-132 C 324,-182 351,-220 392,-248 433,-274 486,-288 553,-288 732,-288 822,-183 822,27 L 822,201 820,201 C 786,132 739,80 680,45 621,10 551,-8 472,-8 339,-8 242,36 180,124 117,212 86,350 86,539 86,730 120,872 187,963 254,1054 355,1099 492,1099 569,1099 635,1082 692,1047 748,1012 791,962 822,897 L 824,897 C 824,917 825,952 828,1001 831,1050 833,1077 836,1082 L 1007,1082 C 1003,1046 1001,971 1001,858 L 1001,31 C 1001,-273 850,-425 548,-425 Z M 822,541 C 822,629 810,705 786,769 762,832 728,881 685,915 641,948 591,965 536,965 444,965 377,932 335,865 293,798 272,690 272,541 272,393 292,287 331,222 370,157 438,125 533,125 590,125 640,142 684,175 728,208 762,256 786,319 810,381 822,455 822,541 Z"/>
   <glyph unicode="f" horiz-adv-x="557" d="M 361,951 L 361,0 181,0 181,951 29,951 29,1082 181,1082 181,1204 C 181,1303 203,1374 246,1417 289,1460 356,1482 445,1482 495,1482 537,1478 572,1470 L 572,1333 C 542,1338 515,1341 492,1341 446,1341 413,1329 392,1306 371,1283 361,1240 361,1179 L 361,1082 572,1082 572,951 361,951 Z"/>
   <glyph unicode="e" horiz-adv-x="980" d="M 276,503 C 276,379 302,283 353,216 404,149 479,115 578,115 656,115 719,131 766,162 813,193 844,233 861,281 L 1019,236 C 954,65 807,-20 578,-20 418,-20 296,28 213,123 129,218 87,360 87,548 87,727 129,864 213,959 296,1054 416,1102 571,1102 889,1102 1048,910 1048,527 L 1048,503 276,503 Z M 862,641 C 852,755 823,838 775,891 727,943 658,969 568,969 481,969 412,940 361,882 310,823 282,743 278,641 L 862,641 Z"/>
   <glyph unicode="d" horiz-adv-x="927" d="M 821,174 C 788,105 744,55 689,25 634,-5 565,-20 484,-20 347,-20 247,26 183,118 118,210 86,349 86,536 86,913 219,1102 484,1102 566,1102 634,1087 689,1057 744,1027 788,979 821,914 L 823,914 821,1035 821,1484 1001,1484 1001,223 C 1001,110 1003,36 1007,0 L 835,0 C 833,11 831,35 829,74 826,113 825,146 825,174 L 821,174 Z M 275,542 C 275,391 295,282 335,217 375,152 440,119 530,119 632,119 706,154 752,225 798,296 821,405 821,554 821,697 798,802 752,869 706,936 633,969 532,969 441,969 376,936 336,869 295,802 275,693 275,542 Z"/>
   <glyph unicode="c" horiz-adv-x="901" d="M 275,546 C 275,402 298,295 343,226 388,157 457,122 548,122 612,122 666,139 709,174 752,209 778,262 788,334 L 970,322 C 956,218 912,135 837,73 762,11 668,-20 553,-20 402,-20 286,28 207,124 127,219 87,359 87,542 87,724 127,863 207,959 287,1054 402,1102 551,1102 662,1102 754,1073 827,1016 900,959 945,880 964,779 L 779,765 C 770,825 746,873 708,908 670,943 616,961 546,961 451,961 382,929 339,866 296,803 275,696 275,546 Z"/>
   <glyph unicode="b" horiz-adv-x="953" d="M 1053,546 C 1053,169 920,-20 655,-20 573,-20 505,-5 451,25 396,54 352,102 318,168 L 316,168 C 316,147 315,116 312,74 309,31 307,7 306,0 L 132,0 C 136,36 138,110 138,223 L 138,1484 318,1484 318,1061 C 318,1018 317,967 314,908 L 318,908 C 351,977 396,1027 451,1057 506,1087 574,1102 655,1102 792,1102 892,1056 957,964 1021,872 1053,733 1053,546 Z M 864,540 C 864,691 844,800 804,865 764,930 699,963 609,963 508,963 434,928 388,859 341,790 318,680 318,529 318,387 341,282 386,215 431,147 505,113 607,113 698,113 763,147 804,214 844,281 864,389 864,540 Z"/>
   <glyph unicode="a" horiz-adv-x="1060" d="M 414,-20 C 305,-20 224,9 169,66 114,123 87,202 87,302 87,414 124,500 198,560 271,620 390,652 554,656 L 797,660 797,719 C 797,807 778,870 741,908 704,946 645,965 565,965 484,965 426,951 389,924 352,897 330,853 323,793 L 135,810 C 166,1005 310,1102 569,1102 705,1102 807,1071 876,1009 945,946 979,856 979,738 L 979,272 C 979,219 986,179 1000,152 1014,125 1041,111 1080,111 1097,111 1117,113 1139,118 L 1139,6 C 1094,-5 1047,-10 1000,-10 933,-10 885,8 855,43 824,78 807,132 803,207 L 797,207 C 751,124 698,66 637,32 576,-3 501,-20 414,-20 Z M 455,115 C 521,115 580,130 631,160 682,190 723,231 753,284 782,336 797,390 797,445 L 797,534 600,530 C 515,529 451,520 408,504 364,488 330,463 307,430 284,397 272,353 272,299 272,240 288,195 320,163 351,131 396,115 455,115 Z"/>
   <glyph unicode="Y" horiz-adv-x="1298" d="M 777,584 L 777,0 587,0 587,584 45,1409 255,1409 684,738 1111,1409 1321,1409 777,584 Z"/>
   <glyph unicode="X" horiz-adv-x="1298" d="M 1112,0 L 689,616 257,0 46,0 582,732 87,1409 298,1409 690,856 1071,1409 1282,1409 800,739 1323,0 1112,0 Z"/>
   <glyph unicode="W" horiz-adv-x="1932" d="M 1511,0 L 1283,0 1039,895 C 1023,951 1000,1051 969,1196 952,1119 937,1054 925,1002 913,950 822,616 652,0 L 424,0 9,1409 208,1409 461,514 C 491,402 519,287 544,168 560,241 579,321 600,408 621,495 713,828 877,1409 L 1060,1409 1305,532 C 1342,389 1372,267 1393,168 L 1402,203 C 1420,280 1435,342 1446,391 1457,439 1551,778 1727,1409 L 1926,1409 1511,0 Z"/>
   <glyph unicode="V" horiz-adv-x="1377" d="M 782,0 L 584,0 9,1409 210,1409 600,417 684,168 768,417 1156,1409 1357,1409 782,0 Z"/>
   <glyph unicode="U" horiz-adv-x="1192" d="M 731,-20 C 616,-20 515,1 429,43 343,85 276,146 229,226 182,306 158,401 158,512 L 158,1409 349,1409 349,528 C 349,399 382,302 447,235 512,168 607,135 730,135 857,135 955,170 1026,239 1096,308 1131,408 1131,541 L 1131,1409 1321,1409 1321,530 C 1321,416 1297,318 1249,235 1200,152 1132,89 1044,46 955,2 851,-20 731,-20 Z"/>
   <glyph unicode="T" horiz-adv-x="1192" d="M 720,1253 L 720,0 530,0 530,1253 46,1253 46,1409 1204,1409 1204,1253 720,1253 Z"/>
   <glyph unicode="S" horiz-adv-x="1192" d="M 1272,389 C 1272,259 1221,158 1120,87 1018,16 875,-20 690,-20 347,-20 148,99 93,338 L 278,375 C 299,290 345,228 414,189 483,149 578,129 697,129 820,129 916,150 983,193 1050,235 1083,297 1083,379 1083,425 1073,462 1052,491 1031,520 1001,543 963,562 925,581 880,596 827,609 774,622 716,635 652,650 541,675 456,699 399,724 341,749 295,776 262,807 229,837 203,872 186,913 168,954 159,1000 159,1053 159,1174 205,1267 298,1332 390,1397 522,1430 694,1430 854,1430 976,1406 1061,1357 1146,1308 1205,1224 1239,1106 L 1051,1073 C 1030,1148 991,1202 933,1236 875,1269 795,1286 692,1286 579,1286 493,1267 434,1230 375,1193 345,1137 345,1063 345,1020 357,984 380,956 403,927 436,903 479,884 522,864 609,840 738,811 781,801 825,791 868,781 911,770 952,758 991,744 1030,729 1067,712 1102,693 1136,674 1166,650 1191,622 1216,594 1236,561 1251,523 1265,485 1272,440 1272,389 Z"/>
   <glyph unicode="R" horiz-adv-x="1244" d="M 1164,0 L 798,585 359,585 359,0 168,0 168,1409 831,1409 C 990,1409 1112,1374 1199,1303 1285,1232 1328,1133 1328,1006 1328,901 1298,813 1237,742 1176,671 1091,626 984,607 L 1384,0 1164,0 Z M 1136,1004 C 1136,1086 1108,1149 1053,1192 997,1235 917,1256 812,1256 L 359,1256 359,736 820,736 C 921,736 999,760 1054,807 1109,854 1136,919 1136,1004 Z"/>
   <glyph unicode="Q" horiz-adv-x="1430" d="M 1495,711 C 1495,512 1445,349 1345,221 1245,93 1106,17 928,-6 955,-90 991,-151 1036,-188 1080,-225 1136,-244 1204,-244 1241,-244 1279,-240 1319,-231 L 1319,-365 C 1257,-380 1198,-387 1141,-387 1040,-387 958,-358 893,-302 828,-244 774,-149 733,-16 601,-9 487,24 392,85 296,145 223,229 173,337 122,444 97,569 97,711 97,936 159,1113 282,1240 405,1367 577,1430 797,1430 940,1430 1065,1402 1170,1345 1275,1288 1356,1205 1412,1096 1467,987 1495,859 1495,711 Z M 1300,711 C 1300,886 1256,1024 1169,1124 1081,1224 957,1274 797,1274 636,1274 511,1225 423,1126 335,1027 291,889 291,711 291,534 336,394 425,291 514,187 637,135 795,135 958,135 1083,185 1170,286 1257,386 1300,528 1300,711 Z"/>
   <glyph unicode="P" horiz-adv-x="1112" d="M 1258,985 C 1258,852 1215,746 1128,667 1041,588 922,549 773,549 L 359,549 359,0 168,0 168,1409 761,1409 C 919,1409 1041,1372 1128,1298 1215,1224 1258,1120 1258,985 Z M 1066,983 C 1066,1165 957,1256 738,1256 L 359,1256 359,700 746,700 C 959,700 1066,794 1066,983 Z"/>
   <glyph unicode="O" horiz-adv-x="1430" d="M 1495,711 C 1495,564 1467,435 1411,324 1354,213 1273,128 1168,69 1063,10 938,-20 795,-20 650,-20 526,9 421,68 316,127 235,212 180,323 125,434 97,563 97,711 97,936 159,1113 282,1240 405,1367 577,1430 797,1430 940,1430 1065,1402 1170,1345 1275,1288 1356,1205 1412,1096 1467,987 1495,859 1495,711 Z M 1300,711 C 1300,886 1256,1024 1169,1124 1081,1224 957,1274 797,1274 636,1274 511,1225 423,1126 335,1027 291,889 291,711 291,534 336,394 425,291 514,187 637,135 795,135 958,135 1083,185 1170,286 1257,386 1300,528 1300,711 Z"/>
   <glyph unicode="N" horiz-adv-x="1165" d="M 1082,0 L 328,1200 333,1103 338,936 338,0 168,0 168,1409 390,1409 1152,201 C 1144,332 1140,426 1140,485 L 1140,1409 1312,1409 1312,0 1082,0 Z"/>
   <glyph unicode="M" horiz-adv-x="1377" d="M 1366,0 L 1366,940 C 1366,1044 1369,1144 1375,1240 1342,1121 1313,1027 1287,960 L 923,0 789,0 420,960 364,1130 331,1240 334,1129 338,940 338,0 168,0 168,1409 419,1409 794,432 C 807,393 820,351 833,306 845,261 853,228 857,208 862,235 874,275 891,330 908,384 919,418 925,432 L 1293,1409 1538,1409 1538,0 1366,0 Z"/>
   <glyph unicode="L" horiz-adv-x="927" d="M 168,0 L 168,1409 359,1409 359,156 1071,156 1071,0 168,0 Z"/>
   <glyph unicode="K" horiz-adv-x="1191" d="M 1106,0 L 543,680 359,540 359,0 168,0 168,1409 359,1409 359,703 1038,1409 1263,1409 663,797 1343,0 1106,0 Z"/>
   <glyph unicode="J" horiz-adv-x="848" d="M 457,-20 C 218,-20 77,103 32,350 L 219,381 C 231,304 258,243 300,200 342,157 395,135 458,135 527,135 582,159 622,207 662,254 682,324 682,416 L 682,1253 411,1253 411,1409 872,1409 872,420 C 872,283 835,176 761,98 687,19 586,-20 457,-20 Z"/>
   <glyph unicode="I" horiz-adv-x="213" d="M 189,0 L 189,1409 380,1409 380,0 189,0 Z"/>
   <glyph unicode="H" horiz-adv-x="1165" d="M 1121,0 L 1121,653 359,653 359,0 168,0 168,1409 359,1409 359,813 1121,813 1121,1409 1312,1409 1312,0 1121,0 Z"/>
   <glyph unicode="G" horiz-adv-x="1377" d="M 103,711 C 103,940 164,1117 287,1242 410,1367 582,1430 804,1430 960,1430 1087,1404 1184,1351 1281,1298 1356,1214 1409,1098 L 1227,1044 C 1187,1124 1132,1182 1062,1219 991,1256 904,1274 799,1274 636,1274 512,1225 426,1127 340,1028 297,890 297,711 297,533 343,393 434,290 525,187 652,135 813,135 905,135 991,149 1071,177 1150,205 1215,243 1264,291 L 1264,545 843,545 843,705 1440,705 1440,219 C 1365,143 1274,84 1166,43 1057,1 940,-20 813,-20 666,-20 539,9 432,68 325,127 244,211 188,322 131,432 103,562 103,711 Z"/>
   <glyph unicode="F" horiz-adv-x="1006" d="M 359,1253 L 359,729 1145,729 1145,571 359,571 359,0 168,0 168,1409 1169,1409 1169,1253 359,1253 Z"/>
   <glyph unicode="E" horiz-adv-x="1138" d="M 168,0 L 168,1409 1237,1409 1237,1253 359,1253 359,801 1177,801 1177,647 359,647 359,156 1278,156 1278,0 168,0 Z"/>
   <glyph unicode="D" horiz-adv-x="1218" d="M 1381,719 C 1381,574 1353,447 1296,338 1239,229 1159,145 1055,87 951,29 831,0 695,0 L 168,0 168,1409 634,1409 C 873,1409 1057,1349 1187,1230 1316,1110 1381,940 1381,719 Z M 1189,719 C 1189,894 1141,1027 1046,1119 950,1210 811,1256 630,1256 L 359,1256 359,153 673,153 C 776,153 867,176 946,221 1024,266 1084,332 1126,417 1168,502 1189,603 1189,719 Z"/>
   <glyph unicode="C" horiz-adv-x="1324" d="M 792,1274 C 636,1274 515,1224 428,1124 341,1023 298,886 298,711 298,538 343,400 434,295 524,190 646,137 800,137 997,137 1146,235 1245,430 L 1401,352 C 1343,231 1262,138 1157,75 1052,12 930,-20 791,-20 649,-20 526,10 423,69 319,128 240,212 186,322 131,431 104,561 104,711 104,936 165,1112 286,1239 407,1366 575,1430 790,1430 940,1430 1065,1401 1166,1342 1267,1283 1341,1196 1388,1081 L 1207,1021 C 1174,1103 1122,1166 1050,1209 977,1252 891,1274 792,1274 Z"/>
   <glyph unicode="B" horiz-adv-x="1112" d="M 1258,397 C 1258,272 1212,174 1121,105 1030,35 903,0 740,0 L 168,0 168,1409 680,1409 C 1011,1409 1176,1295 1176,1067 1176,984 1153,914 1106,857 1059,800 993,762 908,743 1020,730 1106,692 1167,631 1228,569 1258,491 1258,397 Z M 984,1044 C 984,1120 958,1174 906,1207 854,1240 779,1256 680,1256 L 359,1256 359,810 680,810 C 782,810 858,829 909,868 959,906 984,965 984,1044 Z M 1065,412 C 1065,578 948,661 715,661 L 359,661 359,153 730,153 C 847,153 932,175 985,218 1038,261 1065,326 1065,412 Z"/>
   <glyph unicode="A" horiz-adv-x="1377" d="M 1167,0 L 1006,412 364,412 202,0 4,0 579,1409 796,1409 1362,0 1167,0 Z M 685,1265 L 676,1237 C 659,1182 635,1111 602,1024 L 422,561 949,561 768,1026 C 749,1072 731,1124 712,1182 L 685,1265 Z"/>
   <glyph unicode="/" horiz-adv-x="583" d="M 0,-20 L 411,1484 569,1484 162,-20 0,-20 Z"/>
   <glyph unicode="." horiz-adv-x="213" d="M 187,0 L 187,219 382,219 382,0 187,0 Z"/>
   <glyph unicode="-" horiz-adv-x="531" d="M 91,464 L 91,624 591,624 591,464 91,464 Z"/>
   <glyph unicode=")" horiz-adv-x="557" d="M 555,528 C 555,335 525,162 465,9 404,-144 311,-289 186,-424 L 12,-424 C 137,-284 229,-136 287,19 345,174 374,344 374,530 374,716 345,887 287,1042 228,1197 137,1345 12,1484 L 186,1484 C 312,1348 405,1203 465,1050 525,896 555,723 555,532 L 555,528 Z"/>
   <glyph unicode="(" horiz-adv-x="583" d="M 127,532 C 127,725 157,898 218,1051 278,1204 371,1349 496,1484 L 670,1484 C 545,1345 454,1198 396,1042 337,886 308,715 308,530 308,345 337,175 395,20 452,-135 544,-283 670,-424 L 496,-424 C 370,-288 277,-143 217,11 157,164 127,337 127,528 L 127,532 Z"/>
   <glyph unicode=" " horiz-adv-x="556"/>
  </font>
 </defs>
 <defs>
  <font id="EmbeddedFont_2" horiz-adv-x="2048">
   <font-face font-family="Liberation Sans embedded" units-per-em="2048" font-weight="bold" font-style="normal" ascent="1852" descent="423"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="6" horiz-adv-x="1033" d="M 1065,461 C 1065,311 1023,193 939,108 855,23 739,-20 591,-20 425,-20 298,38 209,155 120,271 75,443 75,672 75,923 120,1113 211,1240 301,1367 430,1430 598,1430 717,1430 812,1404 881,1351 950,1298 998,1217 1027,1106 L 762,1069 C 737,1162 680,1208 592,1208 517,1208 458,1170 415,1095 372,1020 350,905 350,752 380,802 422,840 475,867 528,894 589,907 656,907 782,907 882,867 955,787 1028,707 1065,598 1065,461 Z M 783,453 C 783,533 765,594 728,637 691,679 640,700 575,700 513,700 463,680 426,641 389,601 370,548 370,483 370,401 390,333 429,280 468,226 519,199 582,199 645,199 695,222 730,267 765,312 783,374 783,453 Z"/>
   <glyph unicode="5" horiz-adv-x="1033" d="M 1082,469 C 1082,320 1036,201 943,113 850,24 722,-20 560,-20 419,-20 306,12 221,76 136,139 83,231 63,352 L 344,375 C 359,315 385,271 422,244 459,217 506,203 563,203 633,203 689,225 731,270 772,315 793,379 793,463 793,537 773,596 734,641 695,685 640,707 569,707 491,707 427,677 378,616 L 104,616 153,1409 1000,1409 1000,1200 408,1200 385,844 C 453,904 538,934 640,934 774,934 881,892 962,809 1042,726 1082,612 1082,469 Z"/>
   <glyph unicode="4" horiz-adv-x="1113" d="M 940,287 L 940,0 672,0 672,287 31,287 31,498 626,1409 940,1409 940,496 1128,496 1128,287 940,287 Z M 672,957 C 672,993 673,1032 676,1074 678,1116 680,1143 681,1155 664,1118 632,1064 587,993 L 260,496 672,496 672,957 Z"/>
   <glyph unicode="3" horiz-adv-x="1060" d="M 1065,391 C 1065,259 1022,157 935,85 848,13 725,-23 565,-23 414,-23 293,12 204,82 115,151 62,252 47,383 L 333,408 C 351,273 428,205 564,205 631,205 684,222 721,255 758,288 777,339 777,408 777,471 754,519 709,552 664,585 596,602 507,602 L 409,602 409,829 501,829 C 582,829 642,846 683,879 724,912 744,959 744,1020 744,1078 728,1124 696,1157 663,1190 616,1206 554,1206 496,1206 449,1190 414,1158 378,1126 357,1081 352,1022 L 71,1042 C 86,1163 136,1258 222,1327 308,1396 420,1430 559,1430 706,1430 822,1397 905,1331 988,1264 1029,1172 1029,1055 1029,967 1003,895 952,838 900,781 825,744 728,725 L 728,721 C 836,708 919,673 978,615 1036,556 1065,482 1065,391 Z"/>
   <glyph unicode="2" horiz-adv-x="1006" d="M 71,0 L 71,195 C 108,276 160,354 228,431 295,508 380,588 483,671 582,751 651,817 691,869 730,921 750,972 750,1022 750,1145 688,1206 565,1206 505,1206 459,1190 428,1158 396,1125 375,1077 366,1012 L 83,1028 C 99,1159 148,1258 230,1327 311,1396 422,1430 563,1430 715,1430 832,1395 913,1326 994,1257 1035,1159 1035,1034 1035,968 1022,908 996,855 970,802 937,753 896,708 855,663 810,620 761,581 711,542 663,503 616,466 569,429 527,391 489,353 450,315 422,274 403,231 L 1057,231 1057,0 71,0 Z"/>
   <glyph unicode="1" horiz-adv-x="980" d="M 129,0 L 129,209 478,209 478,1170 140,959 140,1180 493,1409 759,1409 759,209 1082,209 1082,0 129,0 Z"/>
  </font>
 </defs>
 <defs>
  <font id="EmbeddedFont_3" horiz-adv-x="2048">
   <font-face font-family="Liberation Serif embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="1826" descent="450"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="u" horiz-adv-x="980" d="M 313,268 C 313,153 366,96 473,96 556,96 633,106 705,127 L 705,870 563,895 563,940 870,940 870,70 989,45 989,0 715,0 707,76 C 660,50 605,28 543,9 481,-10 429,-20 387,-20 227,-20 147,72 147,256 L 147,870 27,895 27,940 313,940 313,268 Z"/>
   <glyph unicode="t" horiz-adv-x="557" d="M 334,-20 C 270,-20 222,-1 191,37 159,75 143,128 143,197 L 143,856 20,856 20,901 145,940 246,1153 309,1153 309,940 524,940 524,856 309,856 309,215 C 309,172 319,139 339,117 358,95 384,84 416,84 455,84 502,89 557,100 L 557,35 C 534,19 500,6 456,-5 412,-15 371,-20 334,-20 Z"/>
   <glyph unicode="r" horiz-adv-x="636" d="M 664,965 L 664,711 621,711 563,821 C 530,821 490,817 445,808 399,799 359,787 326,772 L 326,70 487,45 487,0 41,0 41,45 160,70 160,870 41,895 41,940 315,940 324,823 C 364,856 418,888 487,919 555,950 609,965 649,965 L 664,965 Z"/>
   <glyph unicode="o" horiz-adv-x="901" d="M 946,475 C 946,145 799,-20 506,-20 365,-20 258,22 186,107 114,192 78,314 78,475 78,634 114,755 186,839 258,923 367,965 514,965 657,965 764,924 837,842 910,759 946,637 946,475 Z M 766,475 C 766,619 745,723 703,788 661,853 595,885 506,885 419,885 356,854 317,792 278,730 258,624 258,475 258,324 278,217 318,154 357,91 420,59 506,59 594,59 659,92 702,157 745,222 766,328 766,475 Z"/>
   <glyph unicode="n" horiz-adv-x="980" d="M 324,864 C 375,893 430,918 488,937 546,956 594,965 633,965 714,965 776,941 817,894 858,847 879,778 879,688 L 879,70 993,45 993,0 588,0 588,45 713,70 713,670 C 713,725 700,769 673,801 646,832 604,848 547,848 487,848 413,838 326,819 L 326,70 453,45 453,0 47,0 47,45 160,70 160,870 47,895 47,940 315,940 324,864 Z"/>
   <glyph unicode="m" horiz-adv-x="1536" d="M 326,864 C 376,893 429,917 485,936 541,955 590,965 633,965 679,965 722,956 761,939 800,922 829,894 848,856 899,885 960,910 1029,932 1098,954 1155,965 1200,965 1360,965 1440,873 1440,688 L 1440,70 1561,45 1561,0 1134,0 1134,45 1274,70 1274,670 C 1274,785 1221,842 1114,842 1097,842 1077,841 1054,838 1031,835 1008,832 985,829 962,826 940,822 919,818 898,813 880,810 866,807 877,771 883,731 883,688 L 883,70 1024,45 1024,0 578,0 578,45 717,70 717,670 C 717,725 703,768 675,798 646,827 604,842 547,842 488,842 415,832 328,813 L 328,70 469,45 469,0 43,0 43,45 162,70 162,870 43,895 43,940 318,940 326,864 Z"/>
   <glyph unicode="i" horiz-adv-x="504" d="M 379,1247 C 379,1218 368,1192 347,1171 326,1150 300,1139 270,1139 241,1139 215,1150 194,1171 173,1192 162,1218 162,1247 162,1277 173,1303 194,1324 215,1345 241,1356 270,1356 300,1356 326,1345 347,1324 368,1303 379,1277 379,1247 Z M 369,70 L 530,45 530,0 43,0 43,45 203,70 203,870 70,895 70,940 369,940 369,70 Z"/>
   <glyph unicode="f" horiz-adv-x="636" d="M 225,856 L 63,856 63,905 225,944 225,1010 C 225,1149 253,1255 308,1330 363,1405 440,1442 539,1442 590,1442 638,1436 682,1423 L 682,1218 633,1218 588,1341 C 565,1355 538,1362 506,1362 464,1362 434,1343 417,1306 400,1269 391,1199 391,1096 L 391,940 641,940 641,856 391,856 391,78 594,45 594,0 86,0 86,45 225,78 225,856 Z"/>
   <glyph unicode="e" horiz-adv-x="769" d="M 260,473 L 260,455 C 260,363 270,292 291,241 311,190 342,151 385,124 427,97 482,84 551,84 587,84 630,87 679,93 728,99 769,106 801,113 L 801,57 C 769,36 726,18 671,3 616,-12 559,-20 502,-20 356,-20 249,19 182,98 114,177 80,303 80,477 80,641 114,763 183,844 252,925 350,965 477,965 718,965 838,828 838,555 L 838,473 260,473 Z M 477,885 C 408,885 355,857 318,801 281,745 262,662 262,553 L 664,553 C 664,672 649,758 618,809 587,860 540,885 477,885 Z"/>
   <glyph unicode="d" horiz-adv-x="953" d="M 723,70 C 648,10 560,-20 459,-20 202,-20 74,140 74,461 74,626 110,751 183,837 256,922 363,965 504,965 576,965 649,957 723,942 719,964 717,1019 717,1108 L 717,1352 559,1376 559,1421 883,1421 883,70 999,45 999,0 735,0 723,70 Z M 254,461 C 254,334 275,240 318,178 361,115 426,84 514,84 589,84 657,97 717,123 L 717,866 C 658,877 590,883 514,883 341,883 254,742 254,461 Z"/>
   <glyph unicode="b" horiz-adv-x="954" d="M 766,496 C 766,619 745,710 702,770 659,830 593,860 504,860 465,860 426,857 387,850 348,843 320,835 303,827 L 303,82 C 359,71 426,66 504,66 596,66 663,102 704,174 745,246 766,353 766,496 Z M 137,1352 L 0,1376 0,1421 303,1421 303,1085 C 303,1049 301,983 297,887 364,939 448,965 549,965 677,965 775,926 844,849 912,771 946,653 946,496 946,327 909,199 834,112 759,24 650,-20 508,-20 451,-20 388,-14 319,-1 250,12 189,28 137,49 L 137,1352 Z"/>
   <glyph unicode="a" horiz-adv-x="848" d="M 465,961 C 568,961 643,940 692,898 740,856 764,792 764,705 L 764,70 881,45 881,0 623,0 604,94 C 528,18 431,-20 313,-20 152,-20 72,73 72,260 72,323 84,375 109,416 133,457 172,488 225,510 278,531 356,543 457,545 L 598,549 598,696 C 598,761 586,808 563,839 539,870 502,885 453,885 386,885 325,869 270,838 L 236,721 180,721 180,926 C 288,949 383,961 465,961 Z M 598,479 L 467,475 C 378,472 317,454 286,423 254,392 238,339 238,266 238,149 286,90 381,90 426,90 466,95 499,106 532,116 565,129 598,145 L 598,479 Z"/>
   <glyph unicode="&gt;" horiz-adv-x="980" d="M 104,186 L 104,289 913,680 104,1071 104,1174 1057,705 1057,655 104,186 Z"/>
   <glyph unicode="&lt;" horiz-adv-x="980" d="M 102,655 L 102,705 1055,1174 1055,1071 246,680 1055,289 1055,186 102,655 Z"/>
   <glyph unicode="/" horiz-adv-x="583" d="M 100,-20 L 0,-20 471,1350 569,1350 100,-20 Z"/>
  </font>
 </defs>
 <defs>
  <font id="EmbeddedFont_4" horiz-adv-x="2048">
   <font-face font-family="Noto Sans CJK JP embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="2355" descent="582"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="–" horiz-adv-x="927" d="M 94,510 L 1004,510 1004,641 94,641 94,510 Z"/>
   <glyph unicode=" " horiz-adv-x="450"/>
  </font>
 </defs>
 <defs>
  <font id="EmbeddedFont_5" horiz-adv-x="2048">
   <font-face font-family="StarSymbol embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="1402" descent="450"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="●" horiz-adv-x="1191" d="M 813,0 C 632,0 489,54 383,161 276,268 223,411 223,592 223,773 276,916 383,1023 489,1130 632,1184 813,1184 992,1184 1136,1130 1245,1023 1353,916 1407,772 1407,592 1407,412 1353,268 1245,161 1136,54 992,0 813,0 Z"/>
   <glyph unicode="–" horiz-adv-x="1165" d="M -4,459 L 1135,459 1135,606 -4,606 -4,459 Z"/>
  </font>
 </defs>
 <defs class="TextShapeIndex">
  <g ooo:slide="id1" ooo:id-list="id6 id7 id8 id9 id10 id11 id12 id13 id14 id15 id16 id17 id18 id19 id20 id21 id22 id23 id24 id25 id26 id27 id28 id29 id30 id31 id32 id33 id34 id35 id36 id37 id38 id39 id40 id41 id42 id43 id44 id45 id46 id47 id48 id49 id50 id51 id52 id53 id54 id55 id56 id57 id58 id59 id60 id61 id62 id63 id64 id65 id66 id67 id68 id69 id70 id71 id72 id73 id74 id75 id76 id77 id78 id79 id80"/>
 </defs>
 <defs class="EmbeddedBulletChars">
  <g id="bullet-char-template-57356" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 580,1141 L 1163,571 580,0 -4,571 580,1141 Z"/>
  </g>
  <g id="bullet-char-template-57354" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 8,1128 L 1137,1128 1137,0 8,0 8,1128 Z"/>
  </g>
  <g id="bullet-char-template-10146" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 174,0 L 602,739 174,1481 1456,739 174,0 Z M 1358,739 L 309,1346 659,739 1358,739 Z"/>
  </g>
  <g id="bullet-char-template-10132" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 2015,739 L 1276,0 717,0 1260,543 174,543 174,936 1260,936 717,1481 1274,1481 2015,739 Z"/>
  </g>
  <g id="bullet-char-template-10007" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 0,-2 C -7,14 -16,27 -25,37 L 356,567 C 262,823 215,952 215,954 215,979 228,992 255,992 264,992 276,990 289,987 310,991 331,999 354,1012 L 381,999 492,748 772,1049 836,1024 860,1049 C 881,1039 901,1025 922,1006 886,937 835,863 770,784 769,783 710,716 594,584 L 774,223 C 774,196 753,168 711,139 L 727,119 C 717,90 699,76 672,76 641,76 570,178 457,381 L 164,-76 C 142,-110 111,-127 72,-127 30,-127 9,-110 8,-76 1,-67 -2,-52 -2,-32 -2,-23 -1,-13 0,-2 Z"/>
  </g>
  <g id="bullet-char-template-10004" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 285,-33 C 182,-33 111,30 74,156 52,228 41,333 41,471 41,549 55,616 82,672 116,743 169,778 240,778 293,778 328,747 346,684 L 369,508 C 377,444 397,411 428,410 L 1163,1116 C 1174,1127 1196,1133 1229,1133 1271,1133 1292,1118 1292,1087 L 1292,965 C 1292,929 1282,901 1262,881 L 442,47 C 390,-6 338,-33 285,-33 Z"/>
  </g>
  <g id="bullet-char-template-9679" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 813,0 C 632,0 489,54 383,161 276,268 223,411 223,592 223,773 276,916 383,1023 489,1130 632,1184 813,1184 992,1184 1136,1130 1245,1023 1353,916 1407,772 1407,592 1407,412 1353,268 1245,161 1136,54 992,0 813,0 Z"/>
  </g>
  <g id="bullet-char-template-8226" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 346,457 C 273,457 209,483 155,535 101,586 74,649 74,723 74,796 101,859 155,911 209,963 273,989 346,989 419,989 480,963 531,910 582,859 608,796 608,723 608,648 583,586 532,535 482,483 420,457 346,457 Z"/>
  </g>
  <g id="bullet-char-template-8211" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M -4,459 L 1135,459 1135,606 -4,606 -4,459 Z"/>
  </g>
  <g id="bullet-char-template-61548" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 173,740 C 173,903 231,1043 346,1159 462,1274 601,1332 765,1332 928,1332 1067,1274 1183,1159 1299,1043 1357,903 1357,740 1357,577 1299,437 1183,322 1067,206 928,148 765,148 601,148 462,206 346,322 231,437 173,577 173,740 Z"/>
  </g>
 </defs>
 <defs>
  <g id="dummy-master-page" ooo:name="dummy-master-page" class="Master_Slide">
   <g id="bg-dummy-master-page" class="Background" visibility="hidden"/>
   <g id="bo-dummy-master-page" class="BackgroundObjects" visibility="hidden"/>
  </g>
  <g id="id2" ooo:name="Default" class="Master_Slide">
   <g id="bg-id2" class="Background"/>
   <g id="bo-id2" class="BackgroundObjects">
    <g visibility="hidden" ooo:text-adjust="left" class="Date/Time">
     <g id="id3">
      <rect class="BoundingBox" stroke="none" fill="none" x="1400" y="14348" width="6524" height="1086"/>
      <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Serif, serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="1400" y="14788"><tspan class="PlaceholderText" fill="rgb(0,0,0)" stroke="none">&lt;date/time&gt;</tspan></tspan></tspan></text>
     </g>
    </g>
    <g visibility="hidden" ooo:text-adjust="center" class="Footer">
     <g id="id4">
      <rect class="BoundingBox" stroke="none" fill="none" x="9576" y="14348" width="8876" height="1086"/>
      <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Serif, serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="13140" y="14788"><tspan class="PlaceholderText" fill="rgb(0,0,0)" stroke="none">&lt;footer&gt;</tspan></tspan></tspan></text>
     </g>
    </g>
    <g visibility="hidden" ooo:text-adjust="right" class="Slide_Number">
     <g id="id5">
      <rect class="BoundingBox" stroke="none" fill="none" x="20076" y="14348" width="6524" height="1086"/>
      <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Serif, serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="24521" y="14788"><tspan class="PlaceholderText" fill="rgb(0,0,0)" stroke="none">&lt;number&gt;</tspan></tspan></tspan></text>
     </g>
    </g>
   </g>
  </g>
 </defs>
 <g class="DummySlide">
  <g>
   <g id="dummy-slide" class="Slide" clip-path="url(#presentation_clip_path)">
    <g ooo:name="dummy-page" class="Page"/>
   </g>
  </g>
 </g>
 <g class="SlideGroup">
  <g visibility="hidden">
   <g id="container-id1">
    <g id="id1" class="Slide" clip-path="url(#presentation_clip_path)">
     <g ooo:name="page1" class="Page">
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id6">
        <rect class="BoundingBox" stroke="none" fill="none" x="19899" y="11799" width="4004" height="3804"/>
        <defs>
         <clipPath id="clip_path_1" clipPathUnits="userSpaceOnUse">
          <path d="M 21900,11800 C 20809,11800 19900,12015 19900,12275 L 19900,15125 C 19900,15385 20809,15601 21900,15601 22991,15601 23901,15385 23901,15125 L 23901,12275 C 23901,12015 22991,11800 21900,11800 L 21900,11800 Z"/>
         </clipPath>
        </defs>
        <g clip-path="url(#clip_path_1)">
         <path fill="rgb(0,0,0)" stroke="none" d="M 19900,11800 L 23901,11800 23901,15601 19900,15601 19900,11800 Z"/>
         <path fill="rgb(1,2,2)" stroke="none" d="M 24632,13700 C 24632,14180 24506,14651 24266,15066 24026,15481 23681,15826 23266,16066 22851,16306 22380,16432 21900,16432 21420,16432 20949,16306 20534,16066 20119,15826 19774,15481 19534,15066 19294,14651 19168,14180 19168,13700 19168,13220 19294,12749 19534,12334 19774,11919 20119,11574 20534,11334 20949,11094 21420,10968 21900,10968 22380,10968 22851,11094 23266,11334 23681,11574 24026,11919 24266,12334 24506,12749 24632,13220 24632,13700 L 24632,13700 Z"/>
         <path fill="rgb(2,3,4)" stroke="none" d="M 24606,13700 C 24606,14175 24481,14641 24243,15053 24006,15464 23664,15806 23253,16043 22841,16281 22375,16406 21900,16406 21425,16406 20959,16281 20547,16043 20136,15806 19794,15464 19557,15053 19319,14641 19194,14175 19194,13700 19194,13225 19319,12759 19557,12347 19794,11936 20136,11594 20547,11357 20959,11119 21425,10994 21900,10994 22375,10994 22841,11119 23253,11357 23664,11594 24006,11936 24243,12347 24481,12759 24606,13225 24606,13700 L 24606,13700 Z"/>
         <path fill="rgb(3,5,6)" stroke="none" d="M 24579,13700 C 24579,14170 24455,14632 24220,15040 23985,15447 23647,15785 23240,16020 22832,16255 22370,16379 21900,16379 21430,16379 20968,16255 20560,16020 20153,15785 19815,15447 19580,15040 19345,14632 19221,14170 19221,13700 19221,13230 19345,12768 19580,12360 19815,11953 20153,11615 20560,11380 20968,11145 21430,11021 21900,11021 22370,11021 22832,11145 23240,11380 23647,11615 23985,11953 24220,12360 24455,12768 24579,13230 24579,13700 L 24579,13700 Z"/>
         <path fill="rgb(4,6,8)" stroke="none" d="M 24553,13700 C 24553,14166 24430,14623 24197,15026 23964,15429 23629,15764 23226,15997 22823,16230 22366,16353 21900,16353 21434,16353 20977,16230 20574,15997 20171,15764 19836,15429 19603,15026 19370,14623 19247,14166 19247,13700 19247,13234 19370,12777 19603,12374 19836,11971 20171,11636 20574,11403 20977,11170 21434,11047 21900,11047 22366,11047 22823,11170 23226,11403 23629,11636 23964,11971 24197,12374 24430,12777 24553,13234 24553,13700 L 24553,13700 Z"/>
         <path fill="rgb(6,8,10)" stroke="none" d="M 24526,13700 C 24526,14161 24405,14614 24174,15013 23944,15412 23612,15744 23213,15974 22814,16205 22361,16326 21900,16326 21439,16326 20986,16205 20587,15974 20188,15744 19856,15412 19626,15013 19395,14614 19274,14161 19274,13700 19274,13239 19395,12786 19626,12387 19856,11988 20188,11656 20587,11426 20986,11195 21439,11074 21900,11074 22361,11074 22814,11195 23213,11426 23612,11656 23944,11988 24174,12387 24405,12786 24526,13239 24526,13700 L 24526,13700 Z"/>
         <path fill="rgb(7,9,12)" stroke="none" d="M 24499,13700 C 24499,14156 24379,14605 24151,15000 23923,15395 23595,15723 23200,15951 22805,16179 22356,16299 21900,16299 21444,16299 20995,16179 20600,15951 20205,15723 19877,15395 19649,15000 19421,14605 19301,14156 19301,13700 19301,13244 19421,12795 19649,12400 19877,12005 20205,11677 20600,11449 20995,11221 21444,11101 21900,11101 22356,11101 22805,11221 23200,11449 23595,11677 23923,12005 24151,12400 24379,12795 24499,13244 24499,13700 L 24499,13700 Z"/>
         <path fill="rgb(8,11,14)" stroke="none" d="M 24473,13700 C 24473,14152 24354,14595 24128,14986 23902,15378 23578,15702 23186,15928 22795,16154 22352,16273 21900,16273 21448,16273 21005,16154 20614,15928 20222,15702 19898,15378 19672,14986 19446,14595 19327,14152 19327,13700 19327,13248 19446,12805 19672,12414 19898,12022 20222,11698 20614,11472 21005,11246 21448,11127 21900,11127 22352,11127 22795,11246 23186,11472 23578,11698 23902,12022 24128,12414 24354,12805 24473,13248 24473,13700 L 24473,13700 Z"/>
         <path fill="rgb(9,12,16)" stroke="none" d="M 24446,13700 C 24446,14147 24329,14586 24105,14973 23882,15360 23560,15682 23173,15905 22786,16129 22347,16246 21900,16246 21453,16246 21014,16129 20627,15905 20240,15682 19918,15360 19695,14973 19471,14586 19354,14147 19354,13700 19354,13253 19471,12814 19695,12427 19918,12040 20240,11718 20627,11495 21014,11271 21453,11154 21900,11154 22347,11154 22786,11271 23173,11495 23560,11718 23882,12040 24105,12427 24329,12814 24446,13253 24446,13700 L 24446,13700 Z"/>
         <path fill="rgb(10,14,18)" stroke="none" d="M 24420,13700 C 24420,14142 24303,14577 24082,14960 23861,15343 23543,15661 23160,15882 22777,16103 22342,16220 21900,16220 21458,16220 21023,16103 20640,15882 20257,15661 19939,15343 19718,14960 19497,14577 19380,14142 19380,13700 19380,13258 19497,12823 19718,12440 19939,12057 20257,11739 20640,11518 21023,11297 21458,11180 21900,11180 22342,11180 22777,11297 23160,11518 23543,11739 23861,12057 24082,12440 24303,12823 24420,13258 24420,13700 L 24420,13700 Z"/>
         <path fill="rgb(11,15,20)" stroke="none" d="M 24393,13700 C 24393,14138 24278,14568 24059,14947 23840,15326 23526,15640 23147,15859 22768,16078 22338,16193 21900,16193 21462,16193 21032,16078 20653,15859 20274,15640 19960,15326 19741,14947 19522,14568 19407,14138 19407,13700 19407,13262 19522,12832 19741,12453 19960,12074 20274,11760 20653,11541 21032,11322 21462,11207 21900,11207 22338,11207 22768,11322 23147,11541 23526,11760 23840,12074 24059,12453 24278,12832 24393,13262 24393,13700 L 24393,13700 Z"/>
         <path fill="rgb(12,17,22)" stroke="none" d="M 24367,13700 C 24367,14133 24253,14558 24036,14933 23820,15308 23508,15620 23133,15836 22758,16053 22333,16167 21900,16167 21467,16167 21042,16053 20667,15836 20292,15620 19980,15308 19764,14933 19547,14558 19433,14133 19433,13700 19433,13267 19547,12842 19764,12467 19980,12092 20292,11780 20667,11564 21042,11347 21467,11233 21900,11233 22333,11233 22758,11347 23133,11564 23508,11780 23820,12092 24036,12467 24253,12842 24367,13267 24367,13700 L 24367,13700 Z"/>
         <path fill="rgb(13,19,24)" stroke="none" d="M 24340,13700 C 24340,14128 24228,14549 24013,14920 23799,15291 23491,15599 23120,15813 22749,16028 22328,16140 21900,16140 21472,16140 21051,16028 20680,15813 20309,15599 20001,15291 19787,14920 19572,14549 19460,14128 19460,13700 19460,13272 19572,12851 19787,12480 20001,12109 20309,11801 20680,11587 21051,11372 21472,11260 21900,11260 22328,11260 22749,11372 23120,11587 23491,11801 23799,12109 24013,12480 24228,12851 24340,13272 24340,13700 L 24340,13700 Z"/>
         <path fill="rgb(14,20,26)" stroke="none" d="M 24314,13700 C 24314,14124 24202,14540 23990,14907 23779,15274 23474,15579 23107,15790 22740,16002 22324,16114 21900,16114 21476,16114 21060,16002 20693,15790 20326,15579 20021,15274 19810,14907 19598,14540 19486,14124 19486,13700 19486,13276 19598,12860 19810,12493 20021,12126 20326,11821 20693,11610 21060,11398 21476,11286 21900,11286 22324,11286 22740,11398 23107,11610 23474,11821 23779,12126 23990,12493 24202,12860 24314,13276 24314,13700 L 24314,13700 Z"/>
         <path fill="rgb(15,22,28)" stroke="none" d="M 24287,13700 C 24287,14119 24177,14531 23967,14894 23758,15257 23457,15558 23094,15767 22731,15977 22319,16087 21900,16087 21481,16087 21069,15977 20706,15767 20343,15558 20042,15257 19833,14894 19623,14531 19513,14119 19513,13700 19513,13281 19623,12869 19833,12506 20042,12143 20343,11842 20706,11633 21069,11423 21481,11313 21900,11313 22319,11313 22731,11423 23094,11633 23457,11842 23758,12143 23967,12506 24177,12869 24287,13281 24287,13700 L 24287,13700 Z"/>
         <path fill="rgb(17,23,30)" stroke="none" d="M 24261,13700 C 24261,14114 24152,14521 23944,14880 23737,15239 23439,15537 23080,15744 22721,15952 22314,16061 21900,16061 21486,16061 21079,15952 20720,15744 20361,15537 20063,15239 19856,14880 19648,14521 19539,14114 19539,13700 19539,13286 19648,12879 19856,12520 20063,12161 20361,11863 20720,11656 21079,11448 21486,11339 21900,11339 22314,11339 22721,11448 23080,11656 23439,11863 23737,12161 23944,12520 24152,12879 24261,13286 24261,13700 L 24261,13700 Z"/>
         <path fill="rgb(18,25,32)" stroke="none" d="M 24234,13700 C 24234,14110 24126,14512 23921,14867 23717,15222 23422,15517 23067,15721 22712,15926 22310,16034 21900,16034 21490,16034 21088,15926 20733,15721 20378,15517 20083,15222 19879,14867 19674,14512 19566,14110 19566,13700 19566,13290 19674,12888 19879,12533 20083,12178 20378,11883 20733,11679 21088,11474 21490,11366 21900,11366 22310,11366 22712,11474 23067,11679 23422,11883 23717,12178 23921,12533 24126,12888 24234,13290 24234,13700 L 24234,13700 Z"/>
         <path fill="rgb(19,26,34)" stroke="none" d="M 24208,13700 C 24208,14105 24101,14503 23899,14854 23696,15205 23405,15496 23054,15699 22703,15901 22305,16008 21900,16008 21495,16008 21097,15901 20746,15699 20395,15496 20104,15205 19901,14854 19699,14503 19592,14105 19592,13700 19592,13295 19699,12897 19901,12546 20104,12195 20395,11904 20746,11701 21097,11499 21495,11392 21900,11392 22305,11392 22703,11499 23054,11701 23405,11904 23696,12195 23899,12546 24101,12897 24208,13295 24208,13700 L 24208,13700 Z"/>
         <path fill="rgb(20,28,36)" stroke="none" d="M 24181,13700 C 24181,14100 24076,14494 23876,14841 23675,15187 23387,15475 23041,15676 22694,15876 22300,15981 21900,15981 21500,15981 21106,15876 20759,15676 20413,15475 20125,15187 19924,14841 19724,14494 19619,14100 19619,13700 19619,13300 19724,12906 19924,12559 20125,12213 20413,11925 20759,11724 21106,11524 21500,11419 21900,11419 22300,11419 22694,11524 23041,11724 23387,11925 23675,12213 23876,12559 24076,12906 24181,13300 24181,13700 L 24181,13700 Z"/>
         <path fill="rgb(21,29,38)" stroke="none" d="M 24155,13700 C 24155,14096 24050,14485 23853,14827 23655,15170 23370,15455 23027,15653 22685,15850 22296,15955 21900,15955 21504,15955 21115,15850 20773,15653 20430,15455 20145,15170 19947,14827 19750,14485 19645,14096 19645,13700 19645,13304 19750,12915 19947,12573 20145,12230 20430,11945 20773,11747 21115,11550 21504,11445 21900,11445 22296,11445 22685,11550 23027,11747 23370,11945 23655,12230 23853,12573 24050,12915 24155,13304 24155,13700 L 24155,13700 Z"/>
         <path fill="rgb(22,31,40)" stroke="none" d="M 24128,13700 C 24128,14091 24025,14475 23830,14814 23634,15153 23353,15434 23014,15630 22675,15825 22291,15928 21900,15928 21509,15928 21125,15825 20786,15630 20447,15434 20166,15153 19970,14814 19775,14475 19672,14091 19672,13700 19672,13309 19775,12925 19970,12586 20166,12247 20447,11966 20786,11770 21125,11575 21509,11472 21900,11472 22291,11472 22675,11575 23014,11770 23353,11966 23634,12247 23830,12586 24025,12925 24128,13309 24128,13700 L 24128,13700 Z"/>
         <path fill="rgb(23,32,42)" stroke="none" d="M 24102,13700 C 24102,14086 24000,14466 23807,14801 23613,15135 23335,15413 23001,15607 22666,15800 22286,15902 21900,15902 21514,15902 21134,15800 20799,15607 20465,15413 20187,15135 19993,14801 19800,14466 19698,14086 19698,13700 19698,13314 19800,12934 19993,12599 20187,12265 20465,11987 20799,11793 21134,11600 21514,11498 21900,11498 22286,11498 22666,11600 23001,11793 23335,11987 23613,12265 23807,12599 24000,12934 24102,13314 24102,13700 L 24102,13700 Z"/>
         <path fill="rgb(24,34,44)" stroke="none" d="M 24075,13700 C 24075,14082 23975,14457 23784,14788 23593,15118 23318,15393 22988,15584 22657,15775 22282,15875 21900,15875 21518,15875 21143,15775 20812,15584 20482,15393 20207,15118 20016,14788 19825,14457 19725,14082 19725,13700 19725,13318 19825,12943 20016,12612 20207,12282 20482,12007 20812,11816 21143,11625 21518,11525 21900,11525 22282,11525 22657,11625 22988,11816 23318,12007 23593,12282 23784,12612 23975,12943 24075,13318 24075,13700 L 24075,13700 Z"/>
         <path fill="rgb(25,36,46)" stroke="none" d="M 24049,13700 C 24049,14077 23949,14448 23761,14774 23572,15101 23301,15372 22974,15561 22648,15749 22277,15849 21900,15849 21523,15849 21152,15749 20826,15561 20499,15372 20228,15101 20039,14774 19851,14448 19751,14077 19751,13700 19751,13323 19851,12952 20039,12626 20228,12299 20499,12028 20826,11839 21152,11651 21523,11551 21900,11551 22277,11551 22648,11651 22974,11839 23301,12028 23572,12299 23761,12626 23949,12952 24049,13323 24049,13700 L 24049,13700 Z"/>
         <path fill="rgb(27,37,48)" stroke="none" d="M 24022,13700 C 24022,14072 23924,14438 23738,14761 23551,15084 23284,15351 22961,15538 22638,15724 22272,15822 21900,15822 21528,15822 21162,15724 20839,15538 20516,15351 20249,15084 20062,14761 19876,14438 19778,14072 19778,13700 19778,13328 19876,12962 20062,12639 20249,12316 20516,12049 20839,11862 21162,11676 21528,11578 21900,11578 22272,11578 22638,11676 22961,11862 23284,12049 23551,12316 23738,12639 23924,12962 24022,13328 24022,13700 L 24022,13700 Z"/>
         <path fill="rgb(28,39,50)" stroke="none" d="M 23995,13700 C 23995,14068 23899,14429 23715,14748 23531,15066 23266,15331 22948,15515 22629,15699 22268,15795 21900,15795 21532,15795 21171,15699 20852,15515 20534,15331 20269,15066 20085,14748 19901,14429 19805,14068 19805,13700 19805,13332 19901,12971 20085,12652 20269,12334 20534,12069 20852,11885 21171,11701 21532,11605 21900,11605 22268,11605 22629,11701 22948,11885 23266,12069 23531,12334 23715,12652 23899,12971 23995,13332 23995,13700 L 23995,13700 Z"/>
         <path fill="rgb(29,40,52)" stroke="none" d="M 23969,13700 C 23969,14063 23873,14420 23692,14734 23510,15049 23249,15310 22934,15492 22620,15673 22263,15769 21900,15769 21537,15769 21180,15673 20866,15492 20551,15310 20290,15049 20108,14734 19927,14420 19831,14063 19831,13700 19831,13337 19927,12980 20108,12666 20290,12351 20551,12090 20866,11908 21180,11727 21537,11631 21900,11631 22263,11631 22620,11727 22934,11908 23249,12090 23510,12351 23692,12666 23873,12980 23969,13337 23969,13700 L 23969,13700 Z"/>
         <path fill="rgb(30,42,54)" stroke="none" d="M 23942,13700 C 23942,14059 23848,14411 23669,14721 23490,15032 23232,15290 22921,15469 22611,15648 22259,15742 21900,15742 21541,15742 21189,15648 20879,15469 20568,15290 20310,15032 20131,14721 19952,14411 19858,14059 19858,13700 19858,13341 19952,12989 20131,12679 20310,12368 20568,12110 20879,11931 21189,11752 21541,11658 21900,11658 22259,11658 22611,11752 22921,11931 23232,12110 23490,12368 23669,12679 23848,12989 23942,13341 23942,13700 L 23942,13700 Z"/>
         <path fill="rgb(31,43,56)" stroke="none" d="M 23916,13700 C 23916,14054 23823,14402 23646,14708 23469,15014 23214,15269 22908,15446 22602,15623 22254,15716 21900,15716 21546,15716 21198,15623 20892,15446 20586,15269 20331,15014 20154,14708 19977,14402 19884,14054 19884,13700 19884,13346 19977,12998 20154,12692 20331,12386 20586,12131 20892,11954 21198,11777 21546,11684 21900,11684 22254,11684 22602,11777 22908,11954 23214,12131 23469,12386 23646,12692 23823,12998 23916,13346 23916,13700 L 23916,13700 Z"/>
         <path fill="rgb(32,45,58)" stroke="none" d="M 23889,13700 C 23889,14049 23797,14392 23623,14695 23448,14997 23197,15248 22895,15423 22592,15597 22249,15689 21900,15689 21551,15689 21208,15597 20905,15423 20603,15248 20352,14997 20177,14695 20003,14392 19911,14049 19911,13700 19911,13351 20003,13008 20177,12705 20352,12403 20603,12152 20905,11977 21208,11803 21551,11711 21900,11711 22249,11711 22592,11803 22895,11977 23197,12152 23448,12403 23623,12705 23797,13008 23889,13351 23889,13700 L 23889,13700 Z"/>
         <path fill="rgb(33,46,60)" stroke="none" d="M 23863,13700 C 23863,14045 23772,14383 23600,14681 23428,14980 23180,15228 22881,15400 22583,15572 22245,15663 21900,15663 21555,15663 21217,15572 20919,15400 20620,15228 20372,14980 20200,14681 20028,14383 19937,14045 19937,13700 19937,13355 20028,13017 20200,12719 20372,12420 20620,12172 20919,12000 21217,11828 21555,11737 21900,11737 22245,11737 22583,11828 22881,12000 23180,12172 23428,12420 23600,12719 23772,13017 23863,13355 23863,13700 L 23863,13700 Z"/>
         <path fill="rgb(34,48,62)" stroke="none" d="M 23836,13700 C 23836,14040 23747,14374 23577,14668 23407,14963 23163,15207 22868,15377 22574,15547 22240,15636 21900,15636 21560,15636 21226,15547 20932,15377 20637,15207 20393,14963 20223,14668 20053,14374 19964,14040 19964,13700 19964,13360 20053,13026 20223,12732 20393,12437 20637,12193 20932,12023 21226,11853 21560,11764 21900,11764 22240,11764 22574,11853 22868,12023 23163,12193 23407,12437 23577,12732 23747,13026 23836,13360 23836,13700 L 23836,13700 Z"/>
         <path fill="rgb(35,49,64)" stroke="none" d="M 23810,13700 C 23810,14035 23722,14365 23554,14655 23386,14945 23145,15186 22855,15354 22565,15522 22235,15610 21900,15610 21565,15610 21235,15522 20945,15354 20655,15186 20414,14945 20246,14655 20078,14365 19990,14035 19990,13700 19990,13365 20078,13035 20246,12745 20414,12455 20655,12214 20945,12046 21235,11878 21565,11790 21900,11790 22235,11790 22565,11878 22855,12046 23145,12214 23386,12455 23554,12745 23722,13035 23810,13365 23810,13700 L 23810,13700 Z"/>
         <path fill="rgb(37,51,66)" stroke="none" d="M 23783,13700 C 23783,14031 23696,14355 23531,14642 23366,14928 23128,15166 22842,15331 22555,15496 22231,15583 21900,15583 21569,15583 21245,15496 20958,15331 20672,15166 20434,14928 20269,14642 20104,14355 20017,14031 20017,13700 20017,13369 20104,13045 20269,12758 20434,12472 20672,12234 20958,12069 21245,11904 21569,11817 21900,11817 22231,11817 22555,11904 22842,12069 23128,12234 23366,12472 23531,12758 23696,13045 23783,13369 23783,13700 L 23783,13700 Z"/>
         <path fill="rgb(38,52,68)" stroke="none" d="M 23757,13700 C 23757,14026 23671,14346 23508,14628 23345,14911 23111,15145 22828,15308 22546,15471 22226,15557 21900,15557 21574,15557 21254,15471 20972,15308 20689,15145 20455,14911 20292,14628 20129,14346 20043,14026 20043,13700 20043,13374 20129,13054 20292,12772 20455,12489 20689,12255 20972,12092 21254,11929 21574,11843 21900,11843 22226,11843 22546,11929 22828,12092 23111,12255 23345,12489 23508,12772 23671,13054 23757,13374 23757,13700 L 23757,13700 Z"/>
         <path fill="rgb(39,54,70)" stroke="none" d="M 23730,13700 C 23730,14021 23646,14337 23485,14615 23324,14893 23093,15124 22815,15285 22537,15446 22221,15530 21900,15530 21579,15530 21263,15446 20985,15285 20707,15124 20476,14893 20315,14615 20154,14337 20070,14021 20070,13700 20070,13379 20154,13063 20315,12785 20476,12507 20707,12276 20985,12115 21263,11954 21579,11870 21900,11870 22221,11870 22537,11954 22815,12115 23093,12276 23324,12507 23485,12785 23646,13063 23730,13379 23730,13700 L 23730,13700 Z"/>
         <path fill="rgb(40,56,72)" stroke="none" d="M 23704,13700 C 23704,14017 23620,14328 23462,14602 23304,14876 23076,15104 22802,15262 22528,15420 22217,15504 21900,15504 21583,15504 21272,15420 20998,15262 20724,15104 20496,14876 20338,14602 20180,14328 20096,14017 20096,13700 20096,13383 20180,13072 20338,12798 20496,12524 20724,12296 20998,12138 21272,11980 21583,11896 21900,11896 22217,11896 22528,11980 22802,12138 23076,12296 23304,12524 23462,12798 23620,13072 23704,13383 23704,13700 L 23704,13700 Z"/>
         <path fill="rgb(41,57,74)" stroke="none" d="M 23677,13700 C 23677,14012 23595,14318 23439,14589 23283,14859 23059,15083 22789,15239 22518,15395 22212,15477 21900,15477 21588,15477 21282,15395 21011,15239 20741,15083 20517,14859 20361,14589 20205,14318 20123,14012 20123,13700 20123,13388 20205,13082 20361,12811 20517,12541 20741,12317 21011,12161 21282,12005 21588,11923 21900,11923 22212,11923 22518,12005 22789,12161 23059,12317 23283,12541 23439,12811 23595,13082 23677,13388 23677,13700 L 23677,13700 Z"/>
         <path fill="rgb(42,59,76)" stroke="none" d="M 23651,13700 C 23651,14007 23570,14309 23416,14575 23262,14841 23041,15062 22775,15216 22509,15370 22207,15451 21900,15451 21593,15451 21291,15370 21025,15216 20759,15062 20538,14841 20384,14575 20230,14309 20149,14007 20149,13700 20149,13393 20230,13091 20384,12825 20538,12559 20759,12338 21025,12184 21291,12030 21593,11949 21900,11949 22207,11949 22509,12030 22775,12184 23041,12338 23262,12559 23416,12825 23570,13091 23651,13393 23651,13700 L 23651,13700 Z"/>
         <path fill="rgb(43,60,78)" stroke="none" d="M 23624,13700 C 23624,14003 23544,14300 23393,14562 23242,14824 23024,15042 22762,15193 22500,15344 22203,15424 21900,15424 21597,15424 21300,15344 21038,15193 20776,15042 20558,14824 20407,14562 20256,14300 20176,14003 20176,13700 20176,13397 20256,13100 20407,12838 20558,12576 20776,12358 21038,12207 21300,12056 21597,11976 21900,11976 22203,11976 22500,12056 22762,12207 23024,12358 23242,12576 23393,12838 23544,13100 23624,13397 23624,13700 L 23624,13700 Z"/>
         <path fill="rgb(44,62,80)" stroke="none" d="M 23598,13700 C 23598,13998 23519,14291 23370,14549 23221,14807 23007,15021 22749,15170 22491,15319 22198,15398 21900,15398 21602,15398 21309,15319 21051,15170 20793,15021 20579,14807 20430,14549 20281,14291 20202,13998 20202,13700 20202,13402 20281,13109 20430,12851 20579,12593 20793,12379 21051,12230 21309,12081 21602,12002 21900,12002 22198,12002 22491,12081 22749,12230 23007,12379 23221,12593 23370,12851 23519,13109 23598,13402 23598,13700 L 23598,13700 Z"/>
         <path fill="rgb(45,63,82)" stroke="none" d="M 23571,13700 C 23571,13993 23494,14282 23347,14536 23201,14790 22990,15001 22736,15147 22482,15294 22193,15371 21900,15371 21607,15371 21318,15294 21064,15147 20810,15001 20599,14790 20453,14536 20306,14282 20229,13993 20229,13700 20229,13407 20306,13118 20453,12864 20599,12610 20810,12399 21064,12253 21318,12106 21607,12029 21900,12029 22193,12029 22482,12106 22736,12253 22990,12399 23201,12610 23347,12864 23494,13118 23571,13407 23571,13700 L 23571,13700 Z"/>
         <path fill="rgb(46,65,84)" stroke="none" d="M 23545,13700 C 23545,13989 23469,14272 23324,14522 23180,14772 22972,14980 22722,15124 22472,15269 22189,15345 21900,15345 21611,15345 21328,15269 21078,15124 20828,14980 20620,14772 20476,14522 20331,14272 20255,13989 20255,13700 20255,13411 20331,13128 20476,12878 20620,12628 20828,12420 21078,12276 21328,12131 21611,12055 21900,12055 22189,12055 22472,12131 22722,12276 22972,12420 23180,12628 23324,12878 23469,13128 23545,13411 23545,13700 L 23545,13700 Z"/>
         <path fill="rgb(48,66,86)" stroke="none" d="M 23518,13700 C 23518,13984 23443,14263 23301,14509 23159,14755 22955,14959 22709,15101 22463,15243 22184,15318 21900,15318 21616,15318 21337,15243 21091,15101 20845,14959 20641,14755 20499,14509 20357,14263 20282,13984 20282,13700 20282,13416 20357,13137 20499,12891 20641,12645 20845,12441 21091,12299 21337,12157 21616,12082 21900,12082 22184,12082 22463,12157 22709,12299 22955,12441 23159,12645 23301,12891 23443,13137 23518,13416 23518,13700 L 23518,13700 Z"/>
         <path fill="rgb(49,68,88)" stroke="none" d="M 23492,13700 C 23492,13979 23418,14254 23278,14496 23139,14738 22938,14939 22696,15078 22454,15218 22179,15292 21900,15292 21621,15292 21346,15218 21104,15078 20862,14939 20661,14738 20522,14496 20382,14254 20308,13979 20308,13700 20308,13421 20382,13146 20522,12904 20661,12662 20862,12461 21104,12322 21346,12182 21621,12108 21900,12108 22179,12108 22454,12182 22696,12322 22938,12461 23139,12662 23278,12904 23418,13146 23492,13421 23492,13700 L 23492,13700 Z"/>
         <path fill="rgb(50,69,90)" stroke="none" d="M 23465,13700 C 23465,13975 23393,14245 23255,14482 23118,14720 22920,14918 22682,15055 22445,15193 22175,15265 21900,15265 21625,15265 21355,15193 21118,15055 20880,14918 20682,14720 20545,14482 20407,14245 20335,13975 20335,13700 20335,13425 20407,13155 20545,12918 20682,12680 20880,12482 21118,12345 21355,12207 21625,12135 21900,12135 22175,12135 22445,12207 22682,12345 22920,12482 23118,12680 23255,12918 23393,13155 23465,13425 23465,13700 L 23465,13700 Z"/>
         <path fill="rgb(51,71,92)" stroke="none" d="M 23438,13700 C 23438,13970 23367,14235 23232,14469 23097,14703 22903,14897 22669,15032 22435,15167 22170,15238 21900,15238 21630,15238 21365,15167 21131,15032 20897,14897 20703,14703 20568,14469 20433,14235 20362,13970 20362,13700 20362,13430 20433,13165 20568,12931 20703,12697 20897,12503 21131,12368 21365,12233 21630,12162 21900,12162 22170,12162 22435,12233 22669,12368 22903,12503 23097,12697 23232,12931 23367,13165 23438,13430 23438,13700 L 23438,13700 Z"/>
         <path fill="rgb(52,73,94)" stroke="none" d="M 23412,13700 C 23412,13965 23342,14226 23209,14456 23077,14686 22886,14877 22656,15009 22426,15142 22165,15212 21900,15212 21635,15212 21374,15142 21144,15009 20914,14877 20723,14686 20591,14456 20458,14226 20388,13965 20388,13700 20388,13435 20458,13174 20591,12944 20723,12714 20914,12523 21144,12391 21374,12258 21635,12188 21900,12188 22165,12188 22426,12258 22656,12391 22886,12523 23077,12714 23209,12944 23342,13174 23412,13435 23412,13700 L 23412,13700 Z"/>
         <path fill="rgb(53,74,96)" stroke="none" d="M 23385,13700 C 23385,13961 23317,14217 23186,14443 23056,14669 22869,14856 22643,14986 22417,15117 22161,15185 21900,15185 21639,15185 21383,15117 21157,14986 20931,14856 20744,14669 20614,14443 20483,14217 20415,13961 20415,13700 20415,13439 20483,13183 20614,12957 20744,12731 20931,12544 21157,12414 21383,12283 21639,12215 21900,12215 22161,12215 22417,12283 22643,12414 22869,12544 23056,12731 23186,12957 23317,13183 23385,13439 23385,13700 L 23385,13700 Z"/>
         <path fill="rgb(54,76,98)" stroke="none" d="M 23359,13700 C 23359,13956 23291,14208 23163,14429 23035,14651 22851,14835 22629,14963 22408,15091 22156,15159 21900,15159 21644,15159 21392,15091 21171,14963 20949,14835 20765,14651 20637,14429 20509,14208 20441,13956 20441,13700 20441,13444 20509,13192 20637,12971 20765,12749 20949,12565 21171,12437 21392,12309 21644,12241 21900,12241 22156,12241 22408,12309 22629,12437 22851,12565 23035,12749 23163,12971 23291,13192 23359,13444 23359,13700 L 23359,13700 Z"/>
         <path fill="rgb(55,77,100)" stroke="none" d="M 23332,13700 C 23332,13951 23266,14198 23140,14416 23015,14634 22834,14815 22616,14940 22398,15066 22151,15132 21900,15132 21649,15132 21402,15066 21184,14940 20966,14815 20785,14634 20660,14416 20534,14198 20468,13951 20468,13700 20468,13449 20534,13202 20660,12984 20785,12766 20966,12585 21184,12460 21402,12334 21649,12268 21900,12268 22151,12268 22398,12334 22616,12460 22834,12585 23015,12766 23140,12984 23266,13202 23332,13449 23332,13700 L 23332,13700 Z"/>
         <path fill="rgb(56,79,102)" stroke="none" d="M 23306,13700 C 23306,13947 23241,14189 23117,14403 22994,14617 22817,14794 22603,14917 22389,15041 22147,15106 21900,15106 21653,15106 21411,15041 21197,14917 20983,14794 20806,14617 20683,14403 20559,14189 20494,13947 20494,13700 20494,13453 20559,13211 20683,12997 20806,12783 20983,12606 21197,12483 21411,12359 21653,12294 21900,12294 22147,12294 22389,12359 22603,12483 22817,12606 22994,12783 23117,12997 23241,13211 23306,13453 23306,13700 L 23306,13700 Z"/>
         <path fill="rgb(58,80,105)" stroke="none" d="M 23279,13700 C 23279,13942 23216,14180 23095,14390 22973,14599 22799,14773 22590,14895 22380,15016 22142,15079 21900,15079 21658,15079 21420,15016 21210,14895 21001,14773 20827,14599 20705,14390 20584,14180 20521,13942 20521,13700 20521,13458 20584,13220 20705,13010 20827,12801 21001,12627 21210,12505 21420,12384 21658,12321 21900,12321 22142,12321 22380,12384 22590,12505 22799,12627 22973,12801 23095,13010 23216,13220 23279,13458 23279,13700 L 23279,13700 Z"/>
         <path fill="rgb(59,82,107)" stroke="none" d="M 23253,13700 C 23253,13937 23190,14171 23072,14376 22953,14582 22782,14753 22576,14872 22371,14990 22137,15053 21900,15053 21663,15053 21429,14990 21224,14872 21018,14753 20847,14582 20728,14376 20610,14171 20547,13937 20547,13700 20547,13463 20610,13229 20728,13024 20847,12818 21018,12647 21224,12528 21429,12410 21663,12347 21900,12347 22137,12347 22371,12410 22576,12528 22782,12647 22953,12818 23072,13024 23190,13229 23253,13463 23253,13700 L 23253,13700 Z"/>
         <path fill="rgb(60,83,109)" stroke="none" d="M 23226,13700 C 23226,13933 23165,14162 23049,14363 22932,14565 22765,14732 22563,14849 22362,14965 22133,15026 21900,15026 21667,15026 21438,14965 21237,14849 21035,14732 20868,14565 20751,14363 20635,14162 20574,13933 20574,13700 20574,13467 20635,13238 20751,13037 20868,12835 21035,12668 21237,12551 21438,12435 21667,12374 21900,12374 22133,12374 22362,12435 22563,12551 22765,12668 22932,12835 23049,13037 23165,13238 23226,13467 23226,13700 L 23226,13700 Z"/>
         <path fill="rgb(61,85,111)" stroke="none" d="M 23200,13700 C 23200,13928 23140,14152 23026,14350 22912,14547 22747,14712 22550,14826 22352,14940 22128,15000 21900,15000 21672,15000 21448,14940 21250,14826 21053,14712 20888,14547 20774,14350 20660,14152 20600,13928 20600,13700 20600,13472 20660,13248 20774,13050 20888,12853 21053,12688 21250,12574 21448,12460 21672,12400 21900,12400 22128,12400 22352,12460 22550,12574 22747,12688 22912,12853 23026,13050 23140,13248 23200,13472 23200,13700 L 23200,13700 Z"/>
         <path fill="rgb(62,86,113)" stroke="none" d="M 23173,13700 C 23173,13923 23114,14143 23003,14337 22891,14530 22730,14691 22537,14803 22343,14914 22123,14973 21900,14973 21677,14973 21457,14914 21263,14803 21070,14691 20909,14530 20797,14337 20686,14143 20627,13923 20627,13700 20627,13477 20686,13257 20797,13063 20909,12870 21070,12709 21263,12597 21457,12486 21677,12427 21900,12427 22123,12427 22343,12486 22537,12597 22730,12709 22891,12870 23003,13063 23114,13257 23173,13477 23173,13700 L 23173,13700 Z"/>
         <path fill="rgb(63,88,115)" stroke="none" d="M 23147,13700 C 23147,13919 23089,14134 22980,14323 22870,14513 22713,14670 22523,14780 22334,14889 22119,14947 21900,14947 21681,14947 21466,14889 21277,14780 21087,14670 20930,14513 20820,14323 20711,14134 20653,13919 20653,13700 20653,13481 20711,13266 20820,13077 20930,12887 21087,12730 21277,12620 21466,12511 21681,12453 21900,12453 22119,12453 22334,12511 22523,12620 22713,12730 22870,12887 22980,13077 23089,13266 23147,13481 23147,13700 L 23147,13700 Z"/>
         <path fill="rgb(64,90,117)" stroke="none" d="M 23120,13700 C 23120,13914 23064,14125 22957,14310 22850,14496 22696,14650 22510,14757 22325,14864 22114,14920 21900,14920 21686,14920 21475,14864 21290,14757 21104,14650 20950,14496 20843,14310 20736,14125 20680,13914 20680,13700 20680,13486 20736,13275 20843,13090 20950,12904 21104,12750 21290,12643 21475,12536 21686,12480 21900,12480 22114,12480 22325,12536 22510,12643 22696,12750 22850,12904 22957,13090 23064,13275 23120,13486 23120,13700 L 23120,13700 Z"/>
         <path fill="rgb(65,91,119)" stroke="none" d="M 23094,13700 C 23094,13910 23038,14115 22934,14297 22829,14478 22678,14629 22497,14734 22315,14838 22110,14894 21900,14894 21690,14894 21485,14838 21303,14734 21122,14629 20971,14478 20866,14297 20762,14115 20706,13910 20706,13700 20706,13490 20762,13285 20866,13103 20971,12922 21122,12771 21303,12666 21485,12562 21690,12506 21900,12506 22110,12506 22315,12562 22497,12666 22678,12771 22829,12922 22934,13103 23038,13285 23094,13490 23094,13700 L 23094,13700 Z"/>
         <path fill="rgb(66,93,121)" stroke="none" d="M 23067,13700 C 23067,13905 23013,14106 22911,14284 22808,14461 22661,14608 22484,14711 22306,14813 22105,14867 21900,14867 21695,14867 21494,14813 21316,14711 21139,14608 20992,14461 20889,14284 20787,14106 20733,13905 20733,13700 20733,13495 20787,13294 20889,13116 20992,12939 21139,12792 21316,12689 21494,12587 21695,12533 21900,12533 22105,12533 22306,12587 22484,12689 22661,12792 22808,12939 22911,13116 23013,13294 23067,13495 23067,13700 L 23067,13700 Z"/>
         <path fill="rgb(68,94,123)" stroke="none" d="M 23041,13700 C 23041,13900 22988,14097 22888,14270 22788,14444 22644,14588 22470,14688 22297,14788 22100,14841 21900,14841 21700,14841 21503,14788 21330,14688 21156,14588 21012,14444 20912,14270 20812,14097 20759,13900 20759,13700 20759,13500 20812,13303 20912,13130 21012,12956 21156,12812 21330,12712 21503,12612 21700,12559 21900,12559 22100,12559 22297,12612 22470,12712 22644,12812 22788,12956 22888,13130 22988,13303 23041,13500 23041,13700 L 23041,13700 Z"/>
         <path fill="rgb(69,96,125)" stroke="none" d="M 23014,13700 C 23014,13896 22963,14088 22865,14257 22767,14426 22626,14567 22457,14665 22288,14763 22096,14814 21900,14814 21704,14814 21512,14763 21343,14665 21174,14567 21033,14426 20935,14257 20837,14088 20786,13896 20786,13700 20786,13504 20837,13312 20935,13143 21033,12974 21174,12833 21343,12735 21512,12637 21704,12586 21900,12586 22096,12586 22288,12637 22457,12735 22626,12833 22767,12974 22865,13143 22963,13312 23014,13504 23014,13700 L 23014,13700 Z"/>
         <path fill="rgb(70,97,127)" stroke="none" d="M 22988,13700 C 22988,13891 22937,14078 22842,14244 22746,14409 22609,14546 22444,14642 22278,14737 22091,14788 21900,14788 21709,14788 21522,14737 21356,14642 21191,14546 21054,14409 20958,14244 20863,14078 20812,13891 20812,13700 20812,13509 20863,13322 20958,13156 21054,12991 21191,12854 21356,12758 21522,12663 21709,12612 21900,12612 22091,12612 22278,12663 22444,12758 22609,12854 22746,12991 22842,13156 22937,13322 22988,13509 22988,13700 L 22988,13700 Z"/>
         <path fill="rgb(71,99,129)" stroke="none" d="M 22961,13700 C 22961,13886 22912,14069 22819,14231 22726,14392 22592,14526 22431,14619 22269,14712 22086,14761 21900,14761 21714,14761 21531,14712 21369,14619 21208,14526 21074,14392 20981,14231 20888,14069 20839,13886 20839,13700 20839,13514 20888,13331 20981,13169 21074,13008 21208,12874 21369,12781 21531,12688 21714,12639 21900,12639 22086,12639 22269,12688 22431,12781 22592,12874 22726,13008 22819,13169 22912,13331 22961,13514 22961,13700 L 22961,13700 Z"/>
         <path fill="rgb(72,100,131)" stroke="none" d="M 22934,13700 C 22934,13882 22887,14060 22796,14217 22705,14375 22575,14505 22417,14596 22260,14687 22082,14734 21900,14734 21718,14734 21540,14687 21383,14596 21225,14505 21095,14375 21004,14217 20913,14060 20866,13882 20866,13700 20866,13518 20913,13340 21004,13183 21095,13025 21225,12895 21383,12804 21540,12713 21718,12666 21900,12666 22082,12666 22260,12713 22417,12804 22575,12895 22705,13025 22796,13183 22887,13340 22934,13518 22934,13700 L 22934,13700 Z"/>
         <path fill="rgb(73,102,133)" stroke="none" d="M 22908,13700 C 22908,13877 22861,14051 22773,14204 22684,14357 22557,14484 22404,14573 22251,14661 22077,14708 21900,14708 21723,14708 21549,14661 21396,14573 21243,14484 21116,14357 21027,14204 20939,14051 20892,13877 20892,13700 20892,13523 20939,13349 21027,13196 21116,13043 21243,12916 21396,12827 21549,12739 21723,12692 21900,12692 22077,12692 22251,12739 22404,12827 22557,12916 22684,13043 22773,13196 22861,13349 22908,13523 22908,13700 L 22908,13700 Z"/>
         <path fill="rgb(74,103,135)" stroke="none" d="M 22881,13700 C 22881,13872 22836,14042 22750,14191 22664,14340 22540,14464 22391,14550 22242,14636 22072,14681 21900,14681 21728,14681 21558,14636 21409,14550 21260,14464 21136,14340 21050,14191 20964,14042 20919,13872 20919,13700 20919,13528 20964,13358 21050,13209 21136,13060 21260,12936 21409,12850 21558,12764 21728,12719 21900,12719 22072,12719 22242,12764 22391,12850 22540,12936 22664,13060 22750,13209 22836,13358 22881,13528 22881,13700 L 22881,13700 Z"/>
         <path fill="rgb(75,105,137)" stroke="none" d="M 22855,13700 C 22855,13868 22811,14032 22727,14177 22643,14323 22523,14443 22377,14527 22232,14611 22068,14655 21900,14655 21732,14655 21568,14611 21423,14527 21277,14443 21157,14323 21073,14177 20989,14032 20945,13868 20945,13700 20945,13532 20989,13368 21073,13223 21157,13077 21277,12957 21423,12873 21568,12789 21732,12745 21900,12745 22068,12745 22232,12789 22377,12873 22523,12957 22643,13077 22727,13223 22811,13368 22855,13532 22855,13700 L 22855,13700 Z"/>
         <path fill="rgb(76,107,139)" stroke="none" d="M 22828,13700 C 22828,13863 22785,14023 22704,14164 22623,14305 22505,14423 22364,14504 22223,14585 22063,14628 21900,14628 21737,14628 21577,14585 21436,14504 21295,14423 21177,14305 21096,14164 21015,14023 20972,13863 20972,13700 20972,13537 21015,13377 21096,13236 21177,13095 21295,12977 21436,12896 21577,12815 21737,12772 21900,12772 22063,12772 22223,12815 22364,12896 22505,12977 22623,13095 22704,13236 22785,13377 22828,13537 22828,13700 L 22828,13700 Z"/>
         <path fill="rgb(77,108,141)" stroke="none" d="M 22802,13700 C 22802,13858 22760,14014 22681,14151 22602,14288 22488,14402 22351,14481 22214,14560 22058,14602 21900,14602 21742,14602 21586,14560 21449,14481 21312,14402 21198,14288 21119,14151 21040,14014 20998,13858 20998,13700 20998,13542 21040,13386 21119,13249 21198,13112 21312,12998 21449,12919 21586,12840 21742,12798 21900,12798 22058,12798 22214,12840 22351,12919 22488,12998 22602,13112 22681,13249 22760,13386 22802,13542 22802,13700 L 22802,13700 Z"/>
         <path fill="rgb(79,110,143)" stroke="none" d="M 22775,13700 C 22775,13854 22735,14005 22658,14138 22581,14271 22471,14381 22338,14458 22205,14535 22054,14575 21900,14575 21746,14575 21595,14535 21462,14458 21329,14381 21219,14271 21142,14138 21065,14005 21025,13854 21025,13700 21025,13546 21065,13395 21142,13262 21219,13129 21329,13019 21462,12942 21595,12865 21746,12825 21900,12825 22054,12825 22205,12865 22338,12942 22471,13019 22581,13129 22658,13262 22735,13395 22775,13546 22775,13700 L 22775,13700 Z"/>
         <path fill="rgb(80,111,145)" stroke="none" d="M 22749,13700 C 22749,13849 22710,13995 22635,14124 22561,14253 22453,14361 22324,14435 22195,14510 22049,14549 21900,14549 21751,14549 21605,14510 21476,14435 21347,14361 21239,14253 21165,14124 21090,13995 21051,13849 21051,13700 21051,13551 21090,13405 21165,13276 21239,13147 21347,13039 21476,12965 21605,12890 21751,12851 21900,12851 22049,12851 22195,12890 22324,12965 22453,13039 22561,13147 22635,13276 22710,13405 22749,13551 22749,13700 L 22749,13700 Z"/>
         <path fill="rgb(81,113,147)" stroke="none" d="M 22722,13700 C 22722,13844 22684,13986 22612,14111 22540,14236 22436,14340 22311,14412 22186,14484 22044,14522 21900,14522 21756,14522 21614,14484 21489,14412 21364,14340 21260,14236 21188,14111 21116,13986 21078,13844 21078,13700 21078,13556 21116,13414 21188,13289 21260,13164 21364,13060 21489,12988 21614,12916 21756,12878 21900,12878 22044,12878 22186,12916 22311,12988 22436,13060 22540,13164 22612,13289 22684,13414 22722,13556 22722,13700 L 22722,13700 Z"/>
         <path fill="rgb(82,114,149)" stroke="none" d="M 22696,13700 C 22696,13840 22659,13977 22589,14098 22519,14219 22419,14319 22298,14389 22177,14459 22040,14496 21900,14496 21760,14496 21623,14459 21502,14389 21381,14319 21281,14219 21211,14098 21141,13977 21104,13840 21104,13700 21104,13560 21141,13423 21211,13302 21281,13181 21381,13081 21502,13011 21623,12941 21760,12904 21900,12904 22040,12904 22177,12941 22298,13011 22419,13081 22519,13181 22589,13302 22659,13423 22696,13560 22696,13700 L 22696,13700 Z"/>
         <path fill="rgb(83,116,151)" stroke="none" d="M 22669,13700 C 22669,13835 22634,13968 22566,14085 22499,14202 22402,14299 22285,14366 22168,14434 22035,14469 21900,14469 21765,14469 21632,14434 21515,14366 21398,14299 21301,14202 21234,14085 21166,13968 21131,13835 21131,13700 21131,13565 21166,13432 21234,13315 21301,13198 21398,13101 21515,13034 21632,12966 21765,12931 21900,12931 22035,12931 22168,12966 22285,13034 22402,13101 22499,13198 22566,13315 22634,13432 22669,13565 22669,13700 L 22669,13700 Z"/>
         <path fill="rgb(84,117,153)" stroke="none" d="M 22643,13700 C 22643,13830 22608,13958 22543,14071 22478,14184 22384,14278 22271,14343 22158,14408 22030,14443 21900,14443 21770,14443 21642,14408 21529,14343 21416,14278 21322,14184 21257,14071 21192,13958 21157,13830 21157,13700 21157,13570 21192,13442 21257,13329 21322,13216 21416,13122 21529,13057 21642,12992 21770,12957 21900,12957 22030,12957 22158,12992 22271,13057 22384,13122 22478,13216 22543,13329 22608,13442 22643,13570 22643,13700 L 22643,13700 Z"/>
         <path fill="rgb(85,119,155)" stroke="none" d="M 22616,13700 C 22616,13826 22583,13949 22520,14058 22457,14167 22367,14257 22258,14320 22149,14383 22026,14416 21900,14416 21774,14416 21651,14383 21542,14320 21433,14257 21343,14167 21280,14058 21217,13949 21184,13826 21184,13700 21184,13574 21217,13451 21280,13342 21343,13233 21433,13143 21542,13080 21651,13017 21774,12984 21900,12984 22026,12984 22149,13017 22258,13080 22367,13143 22457,13233 22520,13342 22583,13451 22616,13574 22616,13700 L 22616,13700 Z"/>
         <path fill="rgb(86,120,157)" stroke="none" d="M 22590,13700 C 22590,13821 22558,13940 22497,14045 22437,14150 22350,14237 22245,14297 22140,14358 22021,14390 21900,14390 21779,14390 21660,14358 21555,14297 21450,14237 21363,14150 21303,14045 21242,13940 21210,13821 21210,13700 21210,13579 21242,13460 21303,13355 21363,13250 21450,13163 21555,13103 21660,13042 21779,13010 21900,13010 22021,13010 22140,13042 22245,13103 22350,13163 22437,13250 22497,13355 22558,13460 22590,13579 22590,13700 L 22590,13700 Z"/>
         <path fill="rgb(87,122,159)" stroke="none" d="M 22563,13700 C 22563,13816 22532,13931 22474,14032 22416,14132 22332,14216 22232,14274 22131,14332 22016,14363 21900,14363 21784,14363 21669,14332 21568,14274 21468,14216 21384,14132 21326,14032 21268,13931 21237,13816 21237,13700 21237,13584 21268,13469 21326,13368 21384,13268 21468,13184 21568,13126 21669,13068 21784,13037 21900,13037 22016,13037 22131,13068 22232,13126 22332,13184 22416,13268 22474,13368 22532,13469 22563,13584 22563,13700 L 22563,13700 Z"/>
         <path fill="rgb(89,123,161)" stroke="none" d="M 22537,13700 C 22537,13812 22507,13922 22451,14018 22395,14115 22315,14195 22218,14251 22122,14307 22012,14337 21900,14337 21788,14337 21678,14307 21582,14251 21485,14195 21405,14115 21349,14018 21293,13922 21263,13812 21263,13700 21263,13588 21293,13478 21349,13382 21405,13285 21485,13205 21582,13149 21678,13093 21788,13063 21900,13063 22012,13063 22122,13093 22218,13149 22315,13205 22395,13285 22451,13382 22507,13478 22537,13588 22537,13700 L 22537,13700 Z"/>
         <path fill="rgb(90,125,163)" stroke="none" d="M 22510,13700 C 22510,13807 22482,13912 22428,14005 22375,14098 22298,14175 22205,14228 22112,14282 22007,14310 21900,14310 21793,14310 21688,14282 21595,14228 21502,14175 21425,14098 21372,14005 21318,13912 21290,13807 21290,13700 21290,13593 21318,13488 21372,13395 21425,13302 21502,13225 21595,13172 21688,13118 21793,13090 21900,13090 22007,13090 22112,13118 22205,13172 22298,13225 22375,13302 22428,13395 22482,13488 22510,13593 22510,13700 L 22510,13700 Z"/>
         <path fill="rgb(91,127,165)" stroke="none" d="M 22484,13700 C 22484,13802 22457,13903 22405,13992 22354,14080 22280,14154 22192,14205 22103,14257 22002,14284 21900,14284 21798,14284 21697,14257 21608,14205 21520,14154 21446,14080 21395,13992 21343,13903 21316,13802 21316,13700 21316,13598 21343,13497 21395,13408 21446,13320 21520,13246 21608,13195 21697,13143 21798,13116 21900,13116 22002,13116 22103,13143 22192,13195 22280,13246 22354,13320 22405,13408 22457,13497 22484,13598 22484,13700 L 22484,13700 Z"/>
         <path fill="rgb(92,128,167)" stroke="none" d="M 22457,13700 C 22457,13798 22431,13894 22382,13979 22334,14063 22263,14134 22179,14182 22094,14231 21998,14257 21900,14257 21802,14257 21706,14231 21621,14182 21537,14134 21466,14063 21418,13979 21369,13894 21343,13798 21343,13700 21343,13602 21369,13506 21418,13421 21466,13337 21537,13266 21621,13218 21706,13169 21802,13143 21900,13143 21998,13143 22094,13169 22179,13218 22263,13266 22334,13337 22382,13421 22431,13506 22457,13602 22457,13700 L 22457,13700 Z"/>
         <path fill="rgb(93,130,169)" stroke="none" d="M 22431,13700 C 22431,13793 22406,13885 22359,13965 22313,14046 22246,14113 22165,14159 22085,14206 21993,14231 21900,14231 21807,14231 21715,14206 21635,14159 21554,14113 21487,14046 21441,13965 21394,13885 21369,13793 21369,13700 21369,13607 21394,13515 21441,13435 21487,13354 21554,13287 21635,13241 21715,13194 21807,13169 21900,13169 21993,13169 22085,13194 22165,13241 22246,13287 22313,13354 22359,13435 22406,13515 22431,13607 22431,13700 L 22431,13700 Z"/>
         <path fill="rgb(94,131,171)" stroke="none" d="M 22404,13700 C 22404,13788 22381,13875 22336,13952 22292,14029 22229,14092 22152,14136 22075,14181 21988,14204 21900,14204 21812,14204 21725,14181 21648,14136 21571,14092 21508,14029 21464,13952 21419,13875 21396,13788 21396,13700 21396,13612 21419,13525 21464,13448 21508,13371 21571,13308 21648,13264 21725,13219 21812,13196 21900,13196 21988,13196 22075,13219 22152,13264 22229,13308 22292,13371 22336,13448 22381,13525 22404,13612 22404,13700 L 22404,13700 Z"/>
         <path fill="rgb(95,133,173)" stroke="none" d="M 22377,13700 C 22377,13784 22355,13866 22313,13939 22272,14011 22211,14072 22139,14113 22066,14155 21984,14177 21900,14177 21816,14177 21734,14155 21661,14113 21589,14072 21528,14011 21487,13939 21445,13866 21423,13784 21423,13700 21423,13616 21445,13534 21487,13461 21528,13389 21589,13328 21661,13287 21734,13245 21816,13223 21900,13223 21984,13223 22066,13245 22139,13287 22211,13328 22272,13389 22313,13461 22355,13534 22377,13616 22377,13700 L 22377,13700 Z"/>
         <path fill="rgb(96,134,175)" stroke="none" d="M 22351,13700 C 22351,13779 22330,13857 22291,13925 22251,13994 22194,14051 22125,14091 22057,14130 21979,14151 21900,14151 21821,14151 21743,14130 21675,14091 21606,14051 21549,13994 21509,13925 21470,13857 21449,13779 21449,13700 21449,13621 21470,13543 21509,13475 21549,13406 21606,13349 21675,13309 21743,13270 21821,13249 21900,13249 21979,13249 22057,13270 22125,13309 22194,13349 22251,13406 22291,13475 22330,13543 22351,13621 22351,13700 L 22351,13700 Z"/>
         <path fill="rgb(97,136,177)" stroke="none" d="M 22324,13700 C 22324,13774 22305,13848 22268,13912 22230,13977 22177,14030 22112,14068 22048,14105 21974,14124 21900,14124 21826,14124 21752,14105 21688,14068 21623,14030 21570,13977 21532,13912 21495,13848 21476,13774 21476,13700 21476,13626 21495,13552 21532,13488 21570,13423 21623,13370 21688,13332 21752,13295 21826,13276 21900,13276 21974,13276 22048,13295 22112,13332 22177,13370 22230,13423 22268,13488 22305,13552 22324,13626 22324,13700 L 22324,13700 Z"/>
         <path fill="rgb(99,137,179)" stroke="none" d="M 22298,13700 C 22298,13770 22279,13838 22245,13899 22210,13959 22159,14010 22099,14045 22038,14079 21970,14098 21900,14098 21830,14098 21762,14079 21701,14045 21641,14010 21590,13959 21555,13899 21521,13838 21502,13770 21502,13700 21502,13630 21521,13562 21555,13501 21590,13441 21641,13390 21701,13355 21762,13321 21830,13302 21900,13302 21970,13302 22038,13321 22099,13355 22159,13390 22210,13441 22245,13501 22279,13562 22298,13630 22298,13700 L 22298,13700 Z"/>
         <path fill="rgb(100,139,181)" stroke="none" d="M 22271,13700 C 22271,13765 22254,13829 22222,13886 22189,13942 22142,13989 22086,14022 22029,14054 21965,14071 21900,14071 21835,14071 21771,14054 21714,14022 21658,13989 21611,13942 21578,13886 21546,13829 21529,13765 21529,13700 21529,13635 21546,13571 21578,13514 21611,13458 21658,13411 21714,13378 21771,13346 21835,13329 21900,13329 21965,13329 22029,13346 22086,13378 22142,13411 22189,13458 22222,13514 22254,13571 22271,13635 22271,13700 L 22271,13700 Z"/>
         <path fill="rgb(101,140,183)" stroke="none" d="M 22245,13700 C 22245,13761 22229,13820 22199,13872 22168,13925 22125,13968 22072,13999 22020,14029 21961,14045 21900,14045 21839,14045 21780,14029 21728,13999 21675,13968 21632,13925 21601,13872 21571,13820 21555,13761 21555,13700 21555,13639 21571,13580 21601,13528 21632,13475 21675,13432 21728,13401 21780,13371 21839,13355 21900,13355 21961,13355 22020,13371 22072,13401 22125,13432 22168,13475 22199,13528 22229,13580 22245,13639 22245,13700 L 22245,13700 Z"/>
         <path fill="rgb(102,142,185)" stroke="none" d="M 22218,13700 C 22218,13756 22204,13811 22176,13859 22148,13908 22108,13948 22059,13976 22011,14004 21956,14018 21900,14018 21844,14018 21789,14004 21741,13976 21692,13948 21652,13908 21624,13859 21596,13811 21582,13756 21582,13700 21582,13644 21596,13589 21624,13541 21652,13492 21692,13452 21741,13424 21789,13396 21844,13382 21900,13382 21956,13382 22011,13396 22059,13424 22108,13452 22148,13492 22176,13541 22204,13589 22218,13644 22218,13700 L 22218,13700 Z"/>
         <path fill="rgb(103,144,187)" stroke="none" d="M 22192,13700 C 22192,13751 22178,13802 22153,13846 22127,13890 22090,13927 22046,13953 22002,13978 21951,13992 21900,13992 21849,13992 21798,13978 21754,13953 21710,13927 21673,13890 21647,13846 21622,13802 21608,13751 21608,13700 21608,13649 21622,13598 21647,13554 21673,13510 21710,13473 21754,13447 21798,13422 21849,13408 21900,13408 21951,13408 22002,13422 22046,13447 22090,13473 22127,13510 22153,13554 22178,13598 22192,13649 22192,13700 L 22192,13700 Z"/>
         <path fill="rgb(104,145,189)" stroke="none" d="M 22165,13700 C 22165,13747 22153,13792 22130,13833 22106,13873 22073,13906 22033,13930 21992,13953 21947,13965 21900,13965 21853,13965 21808,13953 21767,13930 21727,13906 21694,13873 21670,13833 21647,13792 21635,13747 21635,13700 21635,13653 21647,13608 21670,13567 21694,13527 21727,13494 21767,13470 21808,13447 21853,13435 21900,13435 21947,13435 21992,13447 22033,13470 22073,13494 22106,13527 22130,13567 22153,13608 22165,13653 22165,13700 L 22165,13700 Z"/>
         <path fill="rgb(105,147,191)" stroke="none" d="M 22139,13700 C 22139,13742 22128,13783 22107,13819 22086,13856 22056,13886 22019,13907 21983,13928 21942,13939 21900,13939 21858,13939 21817,13928 21781,13907 21744,13886 21714,13856 21693,13819 21672,13783 21661,13742 21661,13700 21661,13658 21672,13617 21693,13581 21714,13544 21744,13514 21781,13493 21817,13472 21858,13461 21900,13461 21942,13461 21983,13472 22019,13493 22056,13514 22086,13544 22107,13581 22128,13617 22139,13658 22139,13700 L 22139,13700 Z"/>
         <path fill="rgb(106,148,193)" stroke="none" d="M 22112,13700 C 22112,13737 22102,13774 22084,13806 22065,13838 22038,13865 22006,13884 21974,13902 21937,13912 21900,13912 21863,13912 21826,13902 21794,13884 21762,13865 21735,13838 21716,13806 21698,13774 21688,13737 21688,13700 21688,13663 21698,13626 21716,13594 21735,13562 21762,13535 21794,13516 21826,13498 21863,13488 21900,13488 21937,13488 21974,13498 22006,13516 22038,13535 22065,13562 22084,13594 22102,13626 22112,13663 22112,13700 L 22112,13700 Z"/>
         <path fill="rgb(107,150,195)" stroke="none" d="M 22086,13700 C 22086,13733 22077,13765 22061,13793 22045,13821 22021,13845 21993,13861 21965,13877 21933,13886 21900,13886 21867,13886 21835,13877 21807,13861 21779,13845 21755,13821 21739,13793 21723,13765 21714,13733 21714,13700 21714,13667 21723,13635 21739,13607 21755,13579 21779,13555 21807,13539 21835,13523 21867,13514 21900,13514 21933,13514 21965,13523 21993,13539 22021,13555 22045,13579 22061,13607 22077,13635 22086,13667 22086,13700 L 22086,13700 Z"/>
         <path fill="rgb(108,151,197)" stroke="none" d="M 22059,13700 C 22059,13728 22052,13755 22038,13780 22024,13804 22004,13824 21980,13838 21955,13852 21928,13859 21900,13859 21872,13859 21845,13852 21820,13838 21796,13824 21776,13804 21762,13780 21748,13755 21741,13728 21741,13700 21741,13672 21748,13645 21762,13620 21776,13596 21796,13576 21820,13562 21845,13548 21872,13541 21900,13541 21928,13541 21955,13548 21980,13562 22004,13576 22024,13596 22038,13620 22052,13645 22059,13672 22059,13700 L 22059,13700 Z"/>
         <path fill="rgb(110,153,199)" stroke="none" d="M 22033,13700 C 22033,13723 22026,13746 22015,13766 22003,13786 21986,13803 21966,13815 21946,13826 21923,13833 21900,13833 21877,13833 21854,13826 21834,13815 21814,13803 21797,13786 21785,13766 21774,13746 21767,13723 21767,13700 21767,13677 21774,13654 21785,13634 21797,13614 21814,13597 21834,13585 21854,13574 21877,13567 21900,13567 21923,13567 21946,13574 21966,13585 21986,13597 22003,13614 22015,13634 22026,13654 22033,13677 22033,13700 L 22033,13700 Z"/>
         <path fill="rgb(111,154,201)" stroke="none" d="M 22006,13700 C 22006,13719 22001,13737 21992,13753 21983,13769 21969,13783 21953,13792 21937,13801 21919,13806 21900,13806 21881,13806 21863,13801 21847,13792 21831,13783 21817,13769 21808,13753 21799,13737 21794,13719 21794,13700 21794,13681 21799,13663 21808,13647 21817,13631 21831,13617 21847,13608 21863,13599 21881,13594 21900,13594 21919,13594 21937,13599 21953,13608 21969,13617 21983,13631 21992,13647 22001,13663 22006,13681 22006,13700 L 22006,13700 Z"/>
         <path fill="rgb(112,156,203)" stroke="none" d="M 21980,13700 C 21980,13714 21976,13728 21969,13740 21962,13752 21952,13762 21940,13769 21928,13776 21914,13780 21900,13780 21886,13780 21872,13776 21860,13769 21848,13762 21838,13752 21831,13740 21824,13728 21820,13714 21820,13700 21820,13686 21824,13672 21831,13660 21838,13648 21848,13638 21860,13631 21872,13624 21886,13620 21900,13620 21914,13620 21928,13624 21940,13631 21952,13638 21962,13648 21969,13660 21976,13672 21980,13686 21980,13700 L 21980,13700 Z"/>
         <path fill="rgb(113,157,205)" stroke="none" d="M 21953,13700 C 21953,13709 21951,13718 21946,13727 21941,13735 21935,13741 21927,13746 21918,13751 21909,13753 21900,13753 21891,13753 21882,13751 21873,13746 21865,13741 21859,13735 21854,13727 21849,13718 21847,13709 21847,13700 21847,13691 21849,13682 21854,13673 21859,13665 21865,13659 21873,13654 21882,13649 21891,13647 21900,13647 21909,13647 21918,13649 21927,13654 21935,13659 21941,13665 21946,13673 21951,13682 21953,13691 21953,13700 L 21953,13700 Z"/>
         <path fill="rgb(114,159,207)" stroke="none" d="M 21927,13700 C 21927,13705 21925,13709 21923,13713 21921,13717 21917,13721 21913,13723 21909,13725 21905,13727 21900,13727 21895,13727 21891,13725 21887,13723 21883,13721 21879,13717 21877,13713 21875,13709 21873,13705 21873,13700 21873,13695 21875,13691 21877,13687 21879,13683 21883,13679 21887,13677 21891,13675 21895,13673 21900,13673 21905,13673 21909,13675 21913,13677 21917,13679 21921,13683 21923,13687 21925,13691 21927,13695 21927,13700 L 21927,13700 Z"/>
        </g>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21900,11800 C 20809,11800 19900,12015 19900,12275 L 19900,15125 C 19900,15385 20809,15601 21900,15601 22991,15601 23901,15385 23901,15125 L 23901,12275 C 23901,12015 22991,11800 21900,11800 Z"/>
        <defs>
         <clipPath id="clip_path_2" clipPathUnits="userSpaceOnUse">
          <path d="M 21900,11800 C 20809,11800 19900,12015 19900,12275 19900,12534 20809,12750 21900,12750 22991,12750 23901,12534 23901,12275 23901,12015 22991,11800 21900,11800 L 21900,11800 Z"/>
         </clipPath>
        </defs>
        <g clip-path="url(#clip_path_2)">
         <path fill="rgb(102,102,102)" stroke="none" d="M 19900,11800 L 23901,11800 23901,12750 19900,12750 19900,11800 Z"/>
         <path fill="rgb(103,104,104)" stroke="none" d="M 24614,13700 C 24614,14176 24489,14644 24251,15057 24012,15470 23670,15812 23257,16051 22844,16289 22376,16414 21900,16414 21424,16414 20956,16289 20543,16051 20130,15812 19788,15470 19549,15057 19311,14644 19186,14176 19186,13700 19186,13224 19311,12756 19549,12343 19788,11930 20130,11588 20543,11349 20956,11111 21424,10986 21900,10986 22376,10986 22844,11111 23257,11349 23670,11588 24012,11930 24251,12343 24489,12756 24614,13224 24614,13700 L 24614,13700 Z"/>
         <path fill="rgb(104,105,106)" stroke="none" d="M 24570,13700 C 24570,14169 24446,14629 24212,15035 23978,15441 23641,15778 23235,16012 22829,16246 22369,16370 21900,16370 21431,16370 20971,16246 20565,16012 20159,15778 19822,15441 19588,15035 19354,14629 19230,14169 19230,13700 19230,13231 19354,12771 19588,12365 19822,11959 20159,11622 20565,11388 20971,11154 21431,11030 21900,11030 22369,11030 22829,11154 23235,11388 23641,11622 23978,11959 24212,12365 24446,12771 24570,13231 24570,13700 L 24570,13700 Z"/>
         <path fill="rgb(105,107,108)" stroke="none" d="M 24525,13700 C 24525,14161 24404,14613 24173,15013 23943,15412 23612,15743 23213,15973 22813,16204 22361,16325 21900,16325 21439,16325 20987,16204 20587,15973 20188,15743 19857,15412 19627,15013 19396,14613 19275,14161 19275,13700 19275,13239 19396,12787 19627,12387 19857,11988 20188,11657 20587,11427 20987,11196 21439,11075 21900,11075 22361,11075 22813,11196 23213,11427 23612,11657 23943,11988 24173,12387 24404,12787 24525,13239 24525,13700 L 24525,13700 Z"/>
         <path fill="rgb(106,108,110)" stroke="none" d="M 24481,13700 C 24481,14153 24361,14598 24135,14990 23908,15383 23583,15708 23190,15935 22798,16161 22353,16281 21900,16281 21447,16281 21002,16161 20610,15935 20217,15708 19892,15383 19665,14990 19439,14598 19319,14153 19319,13700 19319,13247 19439,12802 19665,12410 19892,12017 20217,11692 20610,11465 21002,11239 21447,11119 21900,11119 22353,11119 22798,11239 23190,11465 23583,11692 23908,12017 24135,12410 24361,12802 24481,13247 24481,13700 L 24481,13700 Z"/>
         <path fill="rgb(107,110,112)" stroke="none" d="M 24436,13700 C 24436,14145 24319,14583 24096,14968 23874,15354 23554,15674 23168,15896 22783,16119 22345,16236 21900,16236 21455,16236 21017,16119 20632,15896 20246,15674 19926,15354 19704,14968 19481,14583 19364,14145 19364,13700 19364,13255 19481,12817 19704,12432 19926,12046 20246,11726 20632,11504 21017,11281 21455,11164 21900,11164 22345,11164 22783,11281 23168,11504 23554,11726 23874,12046 24096,12432 24319,12817 24436,13255 24436,13700 L 24436,13700 Z"/>
         <path fill="rgb(108,111,114)" stroke="none" d="M 24392,13700 C 24392,14137 24277,14567 24058,14946 23839,15325 23525,15639 23146,15858 22767,16077 22337,16192 21900,16192 21463,16192 21033,16077 20654,15858 20275,15639 19961,15325 19742,14946 19523,14567 19408,14137 19408,13700 19408,13263 19523,12833 19742,12454 19961,12075 20275,11761 20654,11542 21033,11323 21463,11208 21900,11208 22337,11208 22767,11323 23146,11542 23525,11761 23839,12075 24058,12454 24277,12833 24392,13263 24392,13700 L 24392,13700 Z"/>
         <path fill="rgb(109,113,116)" stroke="none" d="M 24347,13700 C 24347,14130 24234,14552 24019,14924 23805,15296 23496,15605 23124,15819 22752,16034 22330,16147 21900,16147 21470,16147 21048,16034 20676,15819 20304,15605 19995,15296 19781,14924 19566,14552 19453,14130 19453,13700 19453,13270 19566,12848 19781,12476 19995,12104 20304,11795 20676,11581 21048,11366 21470,11253 21900,11253 22330,11253 22752,11366 23124,11581 23496,11795 23805,12104 24019,12476 24234,12848 24347,13270 24347,13700 L 24347,13700 Z"/>
         <path fill="rgb(110,114,118)" stroke="none" d="M 24303,13700 C 24303,14122 24192,14536 23981,14901 23770,15267 23467,15570 23101,15781 22736,15992 22322,16103 21900,16103 21478,16103 21064,15992 20699,15781 20333,15570 20030,15267 19819,14901 19608,14536 19497,14122 19497,13700 19497,13278 19608,12864 19819,12499 20030,12133 20333,11830 20699,11619 21064,11408 21478,11297 21900,11297 22322,11297 22736,11408 23101,11619 23467,11830 23770,12133 23981,12499 24192,12864 24303,13278 24303,13700 L 24303,13700 Z"/>
         <path fill="rgb(111,116,120)" stroke="none" d="M 24258,13700 C 24258,14114 24149,14521 23942,14879 23735,15238 23438,15535 23079,15742 22721,15949 22314,16058 21900,16058 21486,16058 21079,15949 20721,15742 20362,15535 20065,15238 19858,14879 19651,14521 19542,14114 19542,13700 19542,13286 19651,12879 19858,12521 20065,12162 20362,11865 20721,11658 21079,11451 21486,11342 21900,11342 22314,11342 22721,11451 23079,11658 23438,11865 23735,12162 23942,12521 24149,12879 24258,13286 24258,13700 L 24258,13700 Z"/>
         <path fill="rgb(112,117,122)" stroke="none" d="M 24214,13700 C 24214,14106 24107,14505 23904,14857 23701,15209 23409,15501 23057,15704 22705,15907 22306,16014 21900,16014 21494,16014 21095,15907 20743,15704 20391,15501 20099,15209 19896,14857 19693,14505 19586,14106 19586,13700 19586,13294 19693,12895 19896,12543 20099,12191 20391,11899 20743,11696 21095,11493 21494,11386 21900,11386 22306,11386 22705,11493 23057,11696 23409,11899 23701,12191 23904,12543 24107,12895 24214,13294 24214,13700 L 24214,13700 Z"/>
         <path fill="rgb(113,119,124)" stroke="none" d="M 24169,13700 C 24169,14098 24064,14490 23865,14835 23666,15180 23380,15466 23035,15665 22690,15864 22298,15969 21900,15969 21502,15969 21110,15864 20765,15665 20420,15466 20134,15180 19935,14835 19736,14490 19631,14098 19631,13700 19631,13302 19736,12910 19935,12565 20134,12220 20420,11934 20765,11735 21110,11536 21502,11431 21900,11431 22298,11431 22690,11536 23035,11735 23380,11934 23666,12220 23865,12565 24064,12910 24169,13302 24169,13700 L 24169,13700 Z"/>
         <path fill="rgb(114,120,126)" stroke="none" d="M 24125,13700 C 24125,14091 24022,14474 23827,14812 23631,15151 23351,15431 23012,15627 22674,15822 22291,15925 21900,15925 21509,15925 21126,15822 20788,15627 20449,15431 20169,15151 19973,14812 19778,14474 19675,14091 19675,13700 19675,13309 19778,12926 19973,12588 20169,12249 20449,11969 20788,11773 21126,11578 21509,11475 21900,11475 22291,11475 22674,11578 23012,11773 23351,11969 23631,12249 23827,12588 24022,12926 24125,13309 24125,13700 L 24125,13700 Z"/>
         <path fill="rgb(115,122,128)" stroke="none" d="M 24080,13700 C 24080,14083 23979,14459 23788,14790 23597,15122 23322,15397 22990,15588 22659,15779 22283,15880 21900,15880 21517,15880 21141,15779 20810,15588 20478,15397 20203,15122 20012,14790 19821,14459 19720,14083 19720,13700 19720,13317 19821,12941 20012,12610 20203,12278 20478,12003 20810,11812 21141,11621 21517,11520 21900,11520 22283,11520 22659,11621 22990,11812 23322,12003 23597,12278 23788,12610 23979,12941 24080,13317 24080,13700 L 24080,13700 Z"/>
         <path fill="rgb(116,123,130)" stroke="none" d="M 24036,13700 C 24036,14075 23937,14443 23750,14768 23562,15093 23293,15362 22968,15550 22643,15737 22275,15836 21900,15836 21525,15836 21157,15737 20832,15550 20507,15362 20238,15093 20050,14768 19863,14443 19764,14075 19764,13700 19764,13325 19863,12957 20050,12632 20238,12307 20507,12038 20832,11850 21157,11663 21525,11564 21900,11564 22275,11564 22643,11663 22968,11850 23293,12038 23562,12307 23750,12632 23937,12957 24036,13325 24036,13700 L 24036,13700 Z"/>
         <path fill="rgb(117,125,132)" stroke="none" d="M 23991,13700 C 23991,14067 23895,14428 23711,14746 23528,15064 23264,15328 22946,15511 22628,15695 22267,15791 21900,15791 21533,15791 21172,15695 20854,15511 20536,15328 20272,15064 20089,14746 19905,14428 19809,14067 19809,13700 19809,13333 19905,12972 20089,12654 20272,12336 20536,12072 20854,11889 21172,11705 21533,11609 21900,11609 22267,11609 22628,11705 22946,11889 23264,12072 23528,12336 23711,12654 23895,12972 23991,13333 23991,13700 L 23991,13700 Z"/>
         <path fill="rgb(119,126,135)" stroke="none" d="M 23947,13700 C 23947,14059 23852,14412 23673,14723 23493,15035 23235,15293 22923,15473 22612,15652 22259,15747 21900,15747 21541,15747 21188,15652 20877,15473 20565,15293 20307,15035 20127,14723 19948,14412 19853,14059 19853,13700 19853,13341 19948,12988 20127,12677 20307,12365 20565,12107 20877,11927 21188,11748 21541,11653 21900,11653 22259,11653 22612,11748 22923,11927 23235,12107 23493,12365 23673,12677 23852,12988 23947,13341 23947,13700 L 23947,13700 Z"/>
         <path fill="rgb(120,128,137)" stroke="none" d="M 23902,13700 C 23902,14051 23810,14397 23634,14701 23458,15005 23205,15258 22901,15434 22597,15610 22251,15702 21900,15702 21549,15702 21203,15610 20899,15434 20595,15258 20342,15005 20166,14701 19990,14397 19898,14051 19898,13700 19898,13349 19990,13003 20166,12699 20342,12395 20595,12142 20899,11966 21203,11790 21549,11698 21900,11698 22251,11698 22597,11790 22901,11966 23205,12142 23458,12395 23634,12699 23810,13003 23902,13349 23902,13700 L 23902,13700 Z"/>
         <path fill="rgb(121,129,139)" stroke="none" d="M 23858,13700 C 23858,14044 23767,14381 23595,14679 23424,14976 23176,15224 22879,15395 22581,15567 22244,15658 21900,15658 21556,15658 21219,15567 20921,15395 20624,15224 20376,14976 20205,14679 20033,14381 19942,14044 19942,13700 19942,13356 20033,13019 20205,12721 20376,12424 20624,12176 20921,12005 21219,11833 21556,11742 21900,11742 22244,11742 22581,11833 22879,12005 23176,12176 23424,12424 23595,12721 23767,13019 23858,13356 23858,13700 L 23858,13700 Z"/>
         <path fill="rgb(122,131,141)" stroke="none" d="M 23813,13700 C 23813,14036 23725,14366 23557,14657 23389,14947 23147,15189 22857,15357 22566,15525 22236,15613 21900,15613 21564,15613 21234,15525 20943,15357 20653,15189 20411,14947 20243,14657 20075,14366 19987,14036 19987,13700 19987,13364 20075,13034 20243,12743 20411,12453 20653,12211 20943,12043 21234,11875 21564,11787 21900,11787 22236,11787 22566,11875 22857,12043 23147,12211 23389,12453 23557,12743 23725,13034 23813,13364 23813,13700 L 23813,13700 Z"/>
         <path fill="rgb(123,132,143)" stroke="none" d="M 23769,13700 C 23769,14028 23682,14350 23518,14634 23354,14918 23118,15154 22834,15318 22550,15482 22228,15569 21900,15569 21572,15569 21250,15482 20966,15318 20682,15154 20446,14918 20282,14634 20118,14350 20031,14028 20031,13700 20031,13372 20118,13050 20282,12766 20446,12482 20682,12246 20966,12082 21250,11918 21572,11831 21900,11831 22228,11831 22550,11918 22834,12082 23118,12246 23354,12482 23518,12766 23682,13050 23769,13372 23769,13700 L 23769,13700 Z"/>
         <path fill="rgb(124,134,145)" stroke="none" d="M 23724,13700 C 23724,14020 23640,14335 23480,14612 23320,14889 23089,15120 22812,15280 22535,15440 22220,15524 21900,15524 21580,15524 21265,15440 20988,15280 20711,15120 20480,14889 20320,14612 20160,14335 20076,14020 20076,13700 20076,13380 20160,13065 20320,12788 20480,12511 20711,12280 20988,12120 21265,11960 21580,11876 21900,11876 22220,11876 22535,11960 22812,12120 23089,12280 23320,12511 23480,12788 23640,13065 23724,13380 23724,13700 L 23724,13700 Z"/>
         <path fill="rgb(125,136,147)" stroke="none" d="M 23680,13700 C 23680,14012 23598,14319 23441,14590 23285,14860 23060,15085 22790,15241 22519,15398 22212,15480 21900,15480 21588,15480 21281,15398 21010,15241 20740,15085 20515,14860 20359,14590 20202,14319 20120,14012 20120,13700 20120,13388 20202,13081 20359,12810 20515,12540 20740,12315 21010,12159 21281,12002 21588,11920 21900,11920 22212,11920 22519,12002 22790,12159 23060,12315 23285,12540 23441,12810 23598,13081 23680,13388 23680,13700 L 23680,13700 Z"/>
         <path fill="rgb(126,137,149)" stroke="none" d="M 23635,13700 C 23635,14005 23555,14304 23403,14568 23250,14831 23031,15050 22768,15203 22504,15355 22205,15435 21900,15435 21595,15435 21296,15355 21032,15203 20769,15050 20550,14831 20397,14568 20245,14304 20165,14005 20165,13700 20165,13395 20245,13096 20397,12832 20550,12569 20769,12350 21032,12197 21296,12045 21595,11965 21900,11965 22205,11965 22504,12045 22768,12197 23031,12350 23250,12569 23403,12832 23555,13096 23635,13395 23635,13700 L 23635,13700 Z"/>
         <path fill="rgb(127,139,151)" stroke="none" d="M 23591,13700 C 23591,13997 23513,14288 23364,14545 23216,14802 23002,15016 22745,15164 22488,15313 22197,15391 21900,15391 21603,15391 21312,15313 21055,15164 20798,15016 20584,14802 20436,14545 20287,14288 20209,13997 20209,13700 20209,13403 20287,13112 20436,12855 20584,12598 20798,12384 21055,12236 21312,12087 21603,12009 21900,12009 22197,12009 22488,12087 22745,12236 23002,12384 23216,12598 23364,12855 23513,13112 23591,13403 23591,13700 L 23591,13700 Z"/>
         <path fill="rgb(128,140,153)" stroke="none" d="M 23546,13700 C 23546,13989 23470,14273 23326,14523 23181,14773 22973,14981 22723,15126 22473,15270 22189,15346 21900,15346 21611,15346 21327,15270 21077,15126 20827,14981 20619,14773 20474,14523 20330,14273 20254,13989 20254,13700 20254,13411 20330,13127 20474,12877 20619,12627 20827,12419 21077,12274 21327,12130 21611,12054 21900,12054 22189,12054 22473,12130 22723,12274 22973,12419 23181,12627 23326,12877 23470,13127 23546,13411 23546,13700 L 23546,13700 Z"/>
         <path fill="rgb(129,142,155)" stroke="none" d="M 23502,13700 C 23502,13981 23428,14257 23287,14501 23147,14744 22944,14947 22701,15087 22457,15228 22181,15302 21900,15302 21619,15302 21343,15228 21099,15087 20856,14947 20653,14744 20513,14501 20372,14257 20298,13981 20298,13700 20298,13419 20372,13143 20513,12899 20653,12656 20856,12453 21099,12313 21343,12172 21619,12098 21900,12098 22181,12098 22457,12172 22701,12313 22944,12453 23147,12656 23287,12899 23428,13143 23502,13419 23502,13700 L 23502,13700 Z"/>
         <path fill="rgb(130,143,157)" stroke="none" d="M 23457,13700 C 23457,13973 23385,14242 23249,14479 23112,14715 22915,14912 22679,15049 22442,15185 22173,15257 21900,15257 21627,15257 21358,15185 21121,15049 20885,14912 20688,14715 20551,14479 20415,14242 20343,13973 20343,13700 20343,13427 20415,13158 20551,12921 20688,12685 20885,12488 21121,12351 21358,12215 21627,12143 21900,12143 22173,12143 22442,12215 22679,12351 22915,12488 23112,12685 23249,12921 23385,13158 23457,13427 23457,13700 L 23457,13700 Z"/>
         <path fill="rgb(131,145,159)" stroke="none" d="M 23413,13700 C 23413,13966 23343,14226 23210,14456 23077,14686 22886,14877 22656,15010 22426,15143 22166,15213 21900,15213 21634,15213 21374,15143 21144,15010 20914,14877 20723,14686 20590,14456 20457,14226 20387,13966 20387,13700 20387,13434 20457,13174 20590,12944 20723,12714 20914,12523 21144,12390 21374,12257 21634,12187 21900,12187 22166,12187 22426,12257 22656,12390 22886,12523 23077,12714 23210,12944 23343,13174 23413,13434 23413,13700 L 23413,13700 Z"/>
         <path fill="rgb(132,146,161)" stroke="none" d="M 23368,13700 C 23368,13958 23300,14211 23172,14434 23043,14657 22857,14843 22634,14972 22411,15100 22158,15168 21900,15168 21642,15168 21389,15100 21166,14972 20943,14843 20757,14657 20628,14434 20500,14211 20432,13958 20432,13700 20432,13442 20500,13189 20628,12966 20757,12743 20943,12557 21166,12428 21389,12300 21642,12232 21900,12232 22158,12232 22411,12300 22634,12428 22857,12557 23043,12743 23172,12966 23300,13189 23368,13442 23368,13700 L 23368,13700 Z"/>
         <path fill="rgb(133,148,163)" stroke="none" d="M 23324,13700 C 23324,13950 23258,14195 23133,14412 23008,14628 22828,14808 22612,14933 22395,15058 22150,15124 21900,15124 21650,15124 21405,15058 21188,14933 20972,14808 20792,14628 20667,14412 20542,14195 20476,13950 20476,13700 20476,13450 20542,13205 20667,12988 20792,12772 20972,12592 21188,12467 21405,12342 21650,12276 21900,12276 22150,12276 22395,12342 22612,12467 22828,12592 23008,12772 23133,12988 23258,13205 23324,13450 23324,13700 L 23324,13700 Z"/>
         <path fill="rgb(134,149,165)" stroke="none" d="M 23279,13700 C 23279,13942 23216,14180 23095,14390 22973,14599 22799,14773 22590,14895 22380,15016 22142,15079 21900,15079 21658,15079 21420,15016 21210,14895 21001,14773 20827,14599 20705,14390 20584,14180 20521,13942 20521,13700 20521,13458 20584,13220 20705,13010 20827,12801 21001,12627 21210,12505 21420,12384 21658,12321 21900,12321 22142,12321 22380,12384 22590,12505 22799,12627 22973,12801 23095,13010 23216,13220 23279,13458 23279,13700 L 23279,13700 Z"/>
         <path fill="rgb(135,151,167)" stroke="none" d="M 23235,13700 C 23235,13934 23173,14164 23056,14367 22939,14570 22770,14739 22567,14856 22364,14973 22134,15035 21900,15035 21666,15035 21436,14973 21233,14856 21030,14739 20861,14570 20744,14367 20627,14164 20565,13934 20565,13700 20565,13466 20627,13236 20744,13033 20861,12830 21030,12661 21233,12544 21436,12427 21666,12365 21900,12365 22134,12365 22364,12427 22567,12544 22770,12661 22939,12830 23056,13033 23173,13236 23235,13466 23235,13700 L 23235,13700 Z"/>
         <path fill="rgb(136,152,169)" stroke="none" d="M 23190,13700 C 23190,13926 23131,14149 23017,14345 22904,14541 22741,14704 22545,14817 22349,14931 22126,14990 21900,14990 21674,14990 21451,14931 21255,14817 21059,14704 20896,14541 20783,14345 20669,14149 20610,13926 20610,13700 20610,13474 20669,13251 20783,13055 20896,12859 21059,12696 21255,12583 21451,12469 21674,12410 21900,12410 22126,12410 22349,12469 22545,12583 22741,12696 22904,12859 23017,13055 23131,13251 23190,13474 23190,13700 L 23190,13700 Z"/>
         <path fill="rgb(137,154,171)" stroke="none" d="M 23146,13700 C 23146,13919 23088,14134 22979,14323 22870,14512 22712,14670 22523,14779 22334,14888 22119,14946 21900,14946 21681,14946 21466,14888 21277,14779 21088,14670 20930,14512 20821,14323 20712,14134 20654,13919 20654,13700 20654,13481 20712,13266 20821,13077 20930,12888 21088,12730 21277,12621 21466,12512 21681,12454 21900,12454 22119,12454 22334,12512 22523,12621 22712,12730 22870,12888 22979,13077 23088,13266 23146,13481 23146,13700 L 23146,13700 Z"/>
         <path fill="rgb(138,155,173)" stroke="none" d="M 23101,13700 C 23101,13911 23046,14118 22940,14301 22835,14483 22683,14635 22501,14740 22318,14846 22111,14901 21900,14901 21689,14901 21482,14846 21299,14740 21117,14635 20965,14483 20860,14301 20754,14118 20699,13911 20699,13700 20699,13489 20754,13282 20860,13099 20965,12917 21117,12765 21299,12660 21482,12554 21689,12499 21900,12499 22111,12499 22318,12554 22501,12660 22683,12765 22835,12917 22940,13099 23046,13282 23101,13489 23101,13700 L 23101,13700 Z"/>
         <path fill="rgb(139,157,175)" stroke="none" d="M 23057,13700 C 23057,13903 23003,14103 22902,14278 22800,14454 22654,14600 22478,14702 22303,14803 22103,14857 21900,14857 21697,14857 21497,14803 21322,14702 21146,14600 21000,14454 20898,14278 20797,14103 20743,13903 20743,13700 20743,13497 20797,13297 20898,13122 21000,12946 21146,12800 21322,12698 21497,12597 21697,12543 21900,12543 22103,12543 22303,12597 22478,12698 22654,12800 22800,12946 22902,13122 23003,13297 23057,13497 23057,13700 L 23057,13700 Z"/>
         <path fill="rgb(140,158,177)" stroke="none" d="M 23012,13700 C 23012,13895 22961,14087 22863,14256 22766,14425 22625,14566 22456,14663 22287,14761 22095,14812 21900,14812 21705,14812 21513,14761 21344,14663 21175,14566 21034,14425 20937,14256 20839,14087 20788,13895 20788,13700 20788,13505 20839,13313 20937,13144 21034,12975 21175,12834 21344,12737 21513,12639 21705,12588 21900,12588 22095,12588 22287,12639 22456,12737 22625,12834 22766,12975 22863,13144 22961,13313 23012,13505 23012,13700 L 23012,13700 Z"/>
         <path fill="rgb(141,160,179)" stroke="none" d="M 22968,13700 C 22968,13887 22919,14072 22825,14234 22731,14396 22596,14531 22434,14625 22272,14719 22087,14768 21900,14768 21713,14768 21528,14719 21366,14625 21204,14531 21069,14396 20975,14234 20881,14072 20832,13887 20832,13700 20832,13513 20881,13328 20975,13166 21069,13004 21204,12869 21366,12775 21528,12681 21713,12632 21900,12632 22087,12632 22272,12681 22434,12775 22596,12869 22731,13004 22825,13166 22919,13328 22968,13513 22968,13700 L 22968,13700 Z"/>
         <path fill="rgb(142,161,181)" stroke="none" d="M 22923,13700 C 22923,13880 22876,14056 22786,14212 22696,14367 22567,14496 22412,14586 22256,14676 22080,14723 21900,14723 21720,14723 21544,14676 21388,14586 21233,14496 21104,14367 21014,14212 20924,14056 20877,13880 20877,13700 20877,13520 20924,13344 21014,13188 21104,13033 21233,12904 21388,12814 21544,12724 21720,12677 21900,12677 22080,12677 22256,12724 22412,12814 22567,12904 22696,13033 22786,13188 22876,13344 22923,13520 22923,13700 L 22923,13700 Z"/>
         <path fill="rgb(143,163,183)" stroke="none" d="M 22879,13700 C 22879,13872 22834,14041 22748,14189 22662,14338 22538,14462 22389,14548 22241,14634 22072,14679 21900,14679 21728,14679 21559,14634 21411,14548 21262,14462 21138,14338 21052,14189 20966,14041 20921,13872 20921,13700 20921,13528 20966,13359 21052,13211 21138,13062 21262,12938 21411,12852 21559,12766 21728,12721 21900,12721 22072,12721 22241,12766 22389,12852 22538,12938 22662,13062 22748,13211 22834,13359 22879,13528 22879,13700 L 22879,13700 Z"/>
         <path fill="rgb(144,165,185)" stroke="none" d="M 22834,13700 C 22834,13864 22791,14025 22709,14167 22627,14309 22509,14427 22367,14509 22225,14591 22064,14634 21900,14634 21736,14634 21575,14591 21433,14509 21291,14427 21173,14309 21091,14167 21009,14025 20966,13864 20966,13700 20966,13536 21009,13375 21091,13233 21173,13091 21291,12973 21433,12891 21575,12809 21736,12766 21900,12766 22064,12766 22225,12809 22367,12891 22509,12973 22627,13091 22709,13233 22791,13375 22834,13536 22834,13700 L 22834,13700 Z"/>
         <path fill="rgb(145,166,187)" stroke="none" d="M 22790,13700 C 22790,13856 22749,14010 22671,14145 22593,14280 22480,14393 22345,14471 22210,14549 22056,14590 21900,14590 21744,14590 21590,14549 21455,14471 21320,14393 21207,14280 21129,14145 21051,14010 21010,13856 21010,13700 21010,13544 21051,13390 21129,13255 21207,13120 21320,13007 21455,12929 21590,12851 21744,12810 21900,12810 22056,12810 22210,12851 22345,12929 22480,13007 22593,13120 22671,13255 22749,13390 22790,13544 22790,13700 L 22790,13700 Z"/>
         <path fill="rgb(146,168,189)" stroke="none" d="M 22745,13700 C 22745,13848 22706,13994 22632,14123 22558,14251 22451,14358 22323,14432 22194,14506 22048,14545 21900,14545 21752,14545 21606,14506 21477,14432 21349,14358 21242,14251 21168,14123 21094,13994 21055,13848 21055,13700 21055,13552 21094,13406 21168,13277 21242,13149 21349,13042 21477,12968 21606,12894 21752,12855 21900,12855 22048,12855 22194,12894 22323,12968 22451,13042 22558,13149 22632,13277 22706,13406 22745,13552 22745,13700 L 22745,13700 Z"/>
         <path fill="rgb(147,169,191)" stroke="none" d="M 22701,13700 C 22701,13841 22664,13979 22594,14100 22523,14222 22422,14323 22300,14394 22179,14464 22041,14501 21900,14501 21759,14501 21621,14464 21500,14394 21378,14323 21277,14222 21206,14100 21136,13979 21099,13841 21099,13700 21099,13559 21136,13421 21206,13300 21277,13178 21378,13077 21500,13006 21621,12936 21759,12899 21900,12899 22041,12899 22179,12936 22300,13006 22422,13077 22523,13178 22594,13300 22664,13421 22701,13559 22701,13700 L 22701,13700 Z"/>
         <path fill="rgb(148,171,193)" stroke="none" d="M 22656,13700 C 22656,13833 22621,13963 22555,14078 22489,14193 22393,14289 22278,14355 22163,14421 22033,14456 21900,14456 21767,14456 21637,14421 21522,14355 21407,14289 21311,14193 21245,14078 21179,13963 21144,13833 21144,13700 21144,13567 21179,13437 21245,13322 21311,13207 21407,13111 21522,13045 21637,12979 21767,12944 21900,12944 22033,12944 22163,12979 22278,13045 22393,13111 22489,13207 22555,13322 22621,13437 22656,13567 22656,13700 L 22656,13700 Z"/>
         <path fill="rgb(150,172,196)" stroke="none" d="M 22612,13700 C 22612,13825 22579,13948 22517,14056 22454,14164 22364,14254 22256,14317 22148,14379 22025,14412 21900,14412 21775,14412 21652,14379 21544,14317 21436,14254 21346,14164 21283,14056 21221,13948 21188,13825 21188,13700 21188,13575 21221,13452 21283,13344 21346,13236 21436,13146 21544,13083 21652,13021 21775,12988 21900,12988 22025,12988 22148,13021 22256,13083 22364,13146 22454,13236 22517,13344 22579,13452 22612,13575 22612,13700 L 22612,13700 Z"/>
         <path fill="rgb(151,174,198)" stroke="none" d="M 22567,13700 C 22567,13817 22537,13932 22478,14034 22419,14135 22335,14219 22234,14278 22132,14337 22017,14367 21900,14367 21783,14367 21668,14337 21566,14278 21465,14219 21381,14135 21322,14034 21263,13932 21233,13817 21233,13700 21233,13583 21263,13468 21322,13366 21381,13265 21465,13181 21566,13122 21668,13063 21783,13033 21900,13033 22017,13033 22132,13063 22234,13122 22335,13181 22419,13265 22478,13366 22537,13468 22567,13583 22567,13700 L 22567,13700 Z"/>
         <path fill="rgb(152,175,200)" stroke="none" d="M 22523,13700 C 22523,13809 22494,13917 22439,14011 22385,14106 22306,14185 22211,14239 22117,14294 22009,14323 21900,14323 21791,14323 21683,14294 21589,14239 21494,14185 21415,14106 21361,14011 21306,13917 21277,13809 21277,13700 21277,13591 21306,13483 21361,13389 21415,13294 21494,13215 21589,13161 21683,13106 21791,13077 21900,13077 22009,13077 22117,13106 22211,13161 22306,13215 22385,13294 22439,13389 22494,13483 22523,13591 22523,13700 L 22523,13700 Z"/>
         <path fill="rgb(153,177,202)" stroke="none" d="M 22478,13700 C 22478,13802 22452,13901 22401,13989 22350,14077 22277,14150 22189,14201 22101,14252 22002,14278 21900,14278 21798,14278 21699,14252 21611,14201 21523,14150 21450,14077 21399,13989 21348,13901 21322,13802 21322,13700 21322,13598 21348,13499 21399,13411 21450,13323 21523,13250 21611,13199 21699,13148 21798,13122 21900,13122 22002,13122 22101,13148 22189,13199 22277,13250 22350,13323 22401,13411 22452,13499 22478,13598 22478,13700 L 22478,13700 Z"/>
         <path fill="rgb(154,178,204)" stroke="none" d="M 22434,13700 C 22434,13794 22409,13886 22362,13967 22316,14048 22248,14116 22167,14162 22086,14209 21994,14234 21900,14234 21806,14234 21714,14209 21633,14162 21552,14116 21484,14048 21438,13967 21391,13886 21366,13794 21366,13700 21366,13606 21391,13514 21438,13433 21484,13352 21552,13284 21633,13238 21714,13191 21806,13166 21900,13166 21994,13166 22086,13191 22167,13238 22248,13284 22316,13352 22362,13433 22409,13514 22434,13606 22434,13700 L 22434,13700 Z"/>
         <path fill="rgb(155,180,206)" stroke="none" d="M 22389,13700 C 22389,13786 22367,13870 22324,13945 22281,14019 22219,14081 22145,14124 22070,14167 21986,14189 21900,14189 21814,14189 21730,14167 21655,14124 21581,14081 21519,14019 21476,13945 21433,13870 21411,13786 21411,13700 21411,13614 21433,13530 21476,13455 21519,13381 21581,13319 21655,13276 21730,13233 21814,13211 21900,13211 21986,13211 22070,13233 22145,13276 22219,13319 22281,13381 22324,13455 22367,13530 22389,13614 22389,13700 L 22389,13700 Z"/>
         <path fill="rgb(156,181,208)" stroke="none" d="M 22345,13700 C 22345,13778 22324,13855 22285,13922 22246,13990 22190,14046 22122,14085 22055,14124 21978,14145 21900,14145 21822,14145 21745,14124 21678,14085 21610,14046 21554,13990 21515,13922 21476,13855 21455,13778 21455,13700 21455,13622 21476,13545 21515,13478 21554,13410 21610,13354 21678,13315 21745,13276 21822,13255 21900,13255 21978,13255 22055,13276 22122,13315 22190,13354 22246,13410 22285,13478 22324,13545 22345,13622 22345,13700 L 22345,13700 Z"/>
         <path fill="rgb(157,183,210)" stroke="none" d="M 22300,13700 C 22300,13770 22282,13839 22247,13900 22212,13961 22161,14012 22100,14047 22039,14082 21970,14100 21900,14100 21830,14100 21761,14082 21700,14047 21639,14012 21588,13961 21553,13900 21518,13839 21500,13770 21500,13700 21500,13630 21518,13561 21553,13500 21588,13439 21639,13388 21700,13353 21761,13318 21830,13300 21900,13300 21970,13300 22039,13318 22100,13353 22161,13388 22212,13439 22247,13500 22282,13561 22300,13630 22300,13700 L 22300,13700 Z"/>
         <path fill="rgb(158,184,212)" stroke="none" d="M 22256,13700 C 22256,13762 22240,13824 22208,13878 22177,13932 22132,13977 22078,14008 22024,14040 21962,14056 21900,14056 21838,14056 21776,14040 21722,14008 21668,13977 21623,13932 21592,13878 21560,13824 21544,13762 21544,13700 21544,13638 21560,13576 21592,13522 21623,13468 21668,13423 21722,13392 21776,13360 21838,13344 21900,13344 21962,13344 22024,13360 22078,13392 22132,13423 22177,13468 22208,13522 22240,13576 22256,13638 22256,13700 L 22256,13700 Z"/>
         <path fill="rgb(159,186,214)" stroke="none" d="M 22211,13700 C 22211,13755 22197,13808 22170,13856 22142,13903 22103,13942 22056,13970 22008,13997 21955,14011 21900,14011 21845,14011 21792,13997 21744,13970 21697,13942 21658,13903 21630,13856 21603,13808 21589,13755 21589,13700 21589,13645 21603,13592 21630,13544 21658,13497 21697,13458 21744,13430 21792,13403 21845,13389 21900,13389 21955,13389 22008,13403 22056,13430 22103,13458 22142,13497 22170,13544 22197,13592 22211,13645 22211,13700 L 22211,13700 Z"/>
         <path fill="rgb(160,187,216)" stroke="none" d="M 22167,13700 C 22167,13747 22155,13793 22131,13833 22108,13874 22074,13908 22033,13931 21993,13955 21947,13967 21900,13967 21853,13967 21807,13955 21767,13931 21726,13908 21692,13874 21669,13833 21645,13793 21633,13747 21633,13700 21633,13653 21645,13607 21669,13567 21692,13526 21726,13492 21767,13469 21807,13445 21853,13433 21900,13433 21947,13433 21993,13445 22033,13469 22074,13492 22108,13526 22131,13567 22155,13607 22167,13653 22167,13700 L 22167,13700 Z"/>
         <path fill="rgb(161,189,218)" stroke="none" d="M 22122,13700 C 22122,13739 22112,13777 22093,13811 22073,13845 22045,13873 22011,13893 21977,13912 21939,13922 21900,13922 21861,13922 21823,13912 21789,13893 21755,13873 21727,13845 21707,13811 21688,13777 21678,13739 21678,13700 21678,13661 21688,13623 21707,13589 21727,13555 21755,13527 21789,13507 21823,13488 21861,13478 21900,13478 21939,13478 21977,13488 22011,13507 22045,13527 22073,13555 22093,13589 22112,13623 22122,13661 22122,13700 L 22122,13700 Z"/>
         <path fill="rgb(162,190,220)" stroke="none" d="M 22078,13700 C 22078,13731 22070,13762 22054,13789 22039,13816 22016,13839 21989,13854 21962,13870 21931,13878 21900,13878 21869,13878 21838,13870 21811,13854 21784,13839 21761,13816 21746,13789 21730,13762 21722,13731 21722,13700 21722,13669 21730,13638 21746,13611 21761,13584 21784,13561 21811,13546 21838,13530 21869,13522 21900,13522 21931,13522 21962,13530 21989,13546 22016,13561 22039,13584 22054,13611 22070,13638 22078,13669 22078,13700 L 22078,13700 Z"/>
         <path fill="rgb(163,192,222)" stroke="none" d="M 22033,13700 C 22033,13723 22027,13746 22016,13767 22004,13787 21987,13804 21967,13816 21946,13827 21923,13833 21900,13833 21877,13833 21854,13827 21833,13816 21813,13804 21796,13787 21784,13767 21773,13746 21767,13723 21767,13700 21767,13677 21773,13654 21784,13633 21796,13613 21813,13596 21833,13584 21854,13573 21877,13567 21900,13567 21923,13567 21946,13573 21967,13584 21987,13596 22004,13613 22016,13633 22027,13654 22033,13677 22033,13700 L 22033,13700 Z"/>
         <path fill="rgb(164,193,224)" stroke="none" d="M 21989,13700 C 21989,13716 21985,13731 21977,13744 21969,13758 21958,13769 21944,13777 21931,13785 21916,13789 21900,13789 21884,13789 21869,13785 21856,13777 21842,13769 21831,13758 21823,13744 21815,13731 21811,13716 21811,13700 21811,13684 21815,13669 21823,13656 21831,13642 21842,13631 21856,13623 21869,13615 21884,13611 21900,13611 21916,13611 21931,13615 21944,13623 21958,13631 21969,13642 21977,13656 21985,13669 21989,13684 21989,13700 L 21989,13700 Z"/>
         <path fill="rgb(165,195,226)" stroke="none" d="M 21944,13700 C 21944,13708 21942,13715 21939,13722 21935,13729 21929,13735 21922,13739 21915,13742 21908,13744 21900,13744 21892,13744 21885,13742 21878,13739 21871,13735 21865,13729 21861,13722 21858,13715 21856,13708 21856,13700 21856,13692 21858,13685 21861,13678 21865,13671 21871,13665 21878,13661 21885,13658 21892,13656 21900,13656 21908,13656 21915,13658 21922,13661 21929,13665 21935,13671 21939,13678 21942,13685 21944,13692 21944,13700 L 21944,13700 Z"/>
        </g>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21900,11800 C 20809,11800 19900,12015 19900,12275 19900,12534 20809,12750 21900,12750 22991,12750 23901,12534 23901,12275 23901,12015 22991,11800 21900,11800 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id7">
        <rect class="BoundingBox" stroke="none" fill="none" x="1299" y="13999" width="4003" height="1403"/>
        <path fill="rgb(128,128,128)" stroke="none" d="M 3400,15400 L 1500,15400 1500,14200 5300,14200 5300,15400 3400,15400 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" d="M 3400,15400 L 1500,15400 1500,14200 5300,14200 5300,15400 3400,15400 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="1783" y="14948"><tspan fill="rgb(128,128,128)" stroke="none">PRESENTATION</tspan></tspan></tspan></text>
        <path fill="rgb(221,221,221)" stroke="none" d="M 3200,15200 L 1300,15200 1300,14000 5100,14000 5100,15200 3200,15200 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 3200,15200 L 1300,15200 1300,14000 5100,14000 5100,15200 3200,15200 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="1583" y="14748"><tspan fill="rgb(0,0,0)" stroke="none">PRESENTATION</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id8">
        <rect class="BoundingBox" stroke="none" fill="none" x="21599" y="699" width="3403" height="1203"/>
        <path fill="rgb(128,128,128)" stroke="none" d="M 23400,1900 L 21800,1900 21800,900 25000,900 25000,1900 23400,1900 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" d="M 23400,1900 L 21800,1900 21800,900 25000,900 25000,1900 23400,1900 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="22109" y="1548"><tspan fill="rgb(128,128,128)" stroke="none">TEMP. DOCX</tspan></tspan></tspan></text>
        <path fill="rgb(221,221,221)" stroke="none" d="M 23200,1700 L 21600,1700 21600,700 24800,700 24800,1700 23200,1700 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23200,1700 L 21600,1700 21600,700 24800,700 24800,1700 23200,1700 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="21909" y="1348"><tspan fill="rgb(0,0,0)" stroke="none">TEMP. DOCX</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id9">
        <rect class="BoundingBox" stroke="none" fill="none" x="799" y="599" width="3203" height="4203"/>
        <path fill="rgb(128,128,128)" stroke="none" d="M 2500,4800 L 1000,4800 1000,800 4000,800 4000,4800 2500,4800 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" d="M 2500,4800 L 1000,4800 1000,800 4000,800 4000,4800 2500,4800 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="353px" font-weight="400"><tspan class="TextPosition" x="2052" y="2527"><tspan fill="rgb(128,128,128)" stroke="none">TEXT</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="353px" font-weight="400"><tspan class="TextPosition" x="1444" y="2921"><tspan fill="rgb(128,128,128)" stroke="none">Unstructured </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="353px" font-weight="400"><tspan class="TextPosition" x="2159" y="3315"><tspan fill="rgb(128,128,128)" stroke="none">data</tspan></tspan></tspan></text>
        <path fill="rgb(221,221,221)" stroke="none" d="M 2300,4600 L 800,4600 800,600 3800,600 3800,4600 2300,4600 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 2300,4600 L 800,4600 800,600 3800,600 3800,4600 2300,4600 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="353px" font-weight="400"><tspan class="TextPosition" x="1852" y="2327"><tspan fill="rgb(0,0,0)" stroke="none">TEXT</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="353px" font-weight="400"><tspan class="TextPosition" x="1244" y="2721"><tspan fill="rgb(0,0,0)" stroke="none">Unstructured </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="353px" font-weight="400"><tspan class="TextPosition" x="1959" y="3115"><tspan fill="rgb(0,0,0)" stroke="none">data</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id10">
        <rect class="BoundingBox" stroke="none" fill="none" x="10499" y="599" width="3203" height="4203"/>
        <path fill="rgb(128,128,128)" stroke="none" d="M 12200,4800 L 10700,4800 10700,800 13700,800 13700,4800 12200,4800 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" d="M 12200,4800 L 10700,4800 10700,800 13700,800 13700,4800 12200,4800 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="400"><tspan class="TextPosition" x="11548" y="3021"><tspan fill="rgb(128,128,128)" stroke="none">XML</tspan></tspan></tspan></text>
        <path fill="rgb(221,221,221)" stroke="none" d="M 12000,4600 L 10500,4600 10500,600 13500,600 13500,4600 12000,4600 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 12000,4600 L 10500,4600 10500,600 13500,600 13500,4600 12000,4600 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="400"><tspan class="TextPosition" x="11348" y="2821"><tspan fill="rgb(0,0,0)" stroke="none">XML</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id11">
        <rect class="BoundingBox" stroke="none" fill="none" x="3799" y="2450" width="6702" height="301"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 3800,2600 L 10220,2600"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 10200,2450 L 10500,2600 10200,2750 10200,2450 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id12">
        <rect class="BoundingBox" stroke="none" fill="none" x="19899" y="11799" width="4004" height="1004"/>
        <path fill="rgb(129,212,26)" stroke="none" d="M 23901,12301 C 23901,12388 23809,12475 23633,12551 23457,12627 23205,12690 22901,12734 22597,12778 22252,12801 21901,12801 21549,12801 21204,12778 20900,12734 20596,12690 20344,12627 20168,12551 19992,12475 19900,12388 19900,12301 19900,12213 19992,12126 20168,12050 20344,11974 20596,11911 20900,11867 21204,11823 21549,11800 21901,11800 22252,11800 22597,11823 22901,11867 23205,11911 23457,11974 23633,12050 23809,12126 23901,12213 23901,12301 L 23901,12301 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23901,12301 C 23901,12388 23809,12475 23633,12551 23457,12627 23205,12690 22901,12734 22597,12778 22252,12801 21901,12801 21549,12801 21204,12778 20900,12734 20596,12690 20344,12627 20168,12551 19992,12475 19900,12388 19900,12301 19900,12213 19992,12126 20168,12050 20344,11974 20596,11911 20900,11867 21204,11823 21549,11800 21901,11800 22252,11800 22597,11823 22901,11867 23205,11911 23457,11974 23633,12050 23809,12126 23901,12213 23901,12301 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="400"><tspan class="TextPosition" x="21460" y="12521"><tspan fill="rgb(0,0,0)" stroke="none">DB</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.ConnectorShape">
       <g id="id13">
        <rect class="BoundingBox" stroke="none" fill="none" x="19899" y="12299" width="3" height="2903"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 19900,12300 L 19900,15200"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.ConnectorShape">
       <g id="id14">
        <rect class="BoundingBox" stroke="none" fill="none" x="23899" y="12199" width="3" height="3003"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23900,12200 L 23900,15200"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id15">
        <rect class="BoundingBox" stroke="none" fill="none" x="4499" y="8399" width="3203" height="4203"/>
        <path fill="rgb(128,128,128)" stroke="none" d="M 6200,12600 L 4700,12600 4700,8600 7700,8600 7700,12600 6200,12600 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" d="M 6200,12600 L 4700,12600 4700,8600 7700,8600 7700,12600 6200,12600 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="400"><tspan class="TextPosition" x="5337" y="10821"><tspan fill="rgb(128,128,128)" stroke="none">HTML</tspan></tspan></tspan></text>
        <path fill="rgb(221,221,221)" stroke="none" d="M 6000,12400 L 4500,12400 4500,8400 7500,8400 7500,12400 6000,12400 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 6000,12400 L 4500,12400 4500,8400 7500,8400 7500,12400 6000,12400 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="400"><tspan class="TextPosition" x="5137" y="10621"><tspan fill="rgb(0,0,0)" stroke="none">HTML</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id16">
        <rect class="BoundingBox" stroke="none" fill="none" x="8499" y="8399" width="3203" height="4203"/>
        <path fill="rgb(128,128,128)" stroke="none" d="M 10200,12600 L 8700,12600 8700,8600 11700,8600 11700,12600 10200,12600 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" d="M 10200,12600 L 8700,12600 8700,8600 11700,8600 11700,12600 10200,12600 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="400"><tspan class="TextPosition" x="9582" y="10821"><tspan fill="rgb(128,128,128)" stroke="none">TEX</tspan></tspan></tspan></text>
        <path fill="rgb(221,221,221)" stroke="none" d="M 10000,12400 L 8500,12400 8500,8400 11500,8400 11500,12400 10000,12400 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 10000,12400 L 8500,12400 8500,8400 11500,8400 11500,12400 10000,12400 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="400"><tspan class="TextPosition" x="9382" y="10621"><tspan fill="rgb(0,0,0)" stroke="none">TEX</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id17">
        <rect class="BoundingBox" stroke="none" fill="none" x="12499" y="8399" width="3203" height="4203"/>
        <path fill="rgb(128,128,128)" stroke="none" d="M 14200,12600 L 12700,12600 12700,8600 15700,8600 15700,12600 14200,12600 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" d="M 14200,12600 L 12700,12600 12700,8600 15700,8600 15700,12600 14200,12600 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="400"><tspan class="TextPosition" x="13144" y="10821"><tspan fill="rgb(128,128,128)" stroke="none">Markup</tspan></tspan></tspan></text>
        <path fill="rgb(221,221,221)" stroke="none" d="M 14000,12400 L 12500,12400 12500,8400 15500,8400 15500,12400 14000,12400 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 14000,12400 L 12500,12400 12500,8400 15500,8400 15500,12400 14000,12400 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="400"><tspan class="TextPosition" x="12944" y="10621"><tspan fill="rgb(0,0,0)" stroke="none">Markup</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id18">
        <rect class="BoundingBox" stroke="none" fill="none" x="16499" y="8399" width="3203" height="4203"/>
        <path fill="rgb(128,128,128)" stroke="none" d="M 18200,12600 L 16700,12600 16700,8600 19700,8600 19700,12600 18200,12600 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" d="M 18200,12600 L 16700,12600 16700,8600 19700,8600 19700,12600 18200,12600 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="400"><tspan class="TextPosition" x="17354" y="10821"><tspan fill="rgb(128,128,128)" stroke="none">JSON</tspan></tspan></tspan></text>
        <path fill="rgb(221,221,221)" stroke="none" d="M 18000,12400 L 16500,12400 16500,8400 19500,8400 19500,12400 18000,12400 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 18000,12400 L 16500,12400 16500,8400 19500,8400 19500,12400 18000,12400 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="400"><tspan class="TextPosition" x="17154" y="10621"><tspan fill="rgb(0,0,0)" stroke="none">JSON</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.ConnectorShape">
       <g id="id19">
        <rect class="BoundingBox" stroke="none" fill="none" x="5850" y="4599" width="6152" height="3802"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 12000,4600 L 12000,6600 6000,6600 6000,8120"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 6150,8100 L 6000,8400 5850,8100 6150,8100 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.ConnectorShape">
       <g id="id20">
        <rect class="BoundingBox" stroke="none" fill="none" x="9850" y="4599" width="2152" height="3802"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 12000,4600 L 12000,6600 10000,6600 10000,8120"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 10150,8100 L 10000,8400 9850,8100 10150,8100 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.ConnectorShape">
       <g id="id21">
        <rect class="BoundingBox" stroke="none" fill="none" x="11999" y="4599" width="2152" height="3802"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 12000,4600 L 12000,6600 14000,6600 14000,8120"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 14150,8100 L 14000,8400 13850,8100 14150,8100 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.ConnectorShape">
       <g id="id22">
        <rect class="BoundingBox" stroke="none" fill="none" x="11999" y="4599" width="6152" height="3802"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 12000,4600 L 12000,6600 18000,6600 18000,8120"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 18150,8100 L 18000,8400 17850,8100 18150,8100 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id23">
        <rect class="BoundingBox" stroke="none" fill="none" x="6799" y="13999" width="4003" height="1403"/>
        <path fill="rgb(128,128,128)" stroke="none" d="M 8900,15400 L 7000,15400 7000,14200 10800,14200 10800,15400 8900,15400 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" d="M 8900,15400 L 7000,15400 7000,14200 10800,14200 10800,15400 8900,15400 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="8094" y="14732"><tspan fill="rgb(128,128,128)" stroke="none">CONTENT </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="7260" y="15088"><tspan fill="rgb(128,128,128)" stroke="none">MANAGEMENT FORM</tspan></tspan></tspan></text>
        <path fill="rgb(221,221,221)" stroke="none" d="M 8700,15200 L 6800,15200 6800,14000 10600,14000 10600,15200 8700,15200 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 8700,15200 L 6800,15200 6800,14000 10600,14000 10600,15200 8700,15200 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="7894" y="14532"><tspan fill="rgb(0,0,0)" stroke="none">CONTENT </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="7060" y="14888"><tspan fill="rgb(0,0,0)" stroke="none">MANAGEMENT FORM</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.ConnectorShape">
       <g id="id24">
        <rect class="BoundingBox" stroke="none" fill="none" x="3200" y="12399" width="2802" height="1602"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 6000,12400 L 3443,13861"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 3535,13981 L 3200,14000 3386,13721 3535,13981 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.ConnectorShape">
       <g id="id25">
        <rect class="BoundingBox" stroke="none" fill="none" x="5999" y="12399" width="2702" height="1602"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 6000,12400 L 8459,13857"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 8518,13718 L 8700,14000 8365,13976 8518,13718 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.ConnectorShape">
       <g id="id26">
        <rect class="BoundingBox" stroke="none" fill="none" x="13499" y="2599" width="8552" height="9202"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 13500,2600 L 18100,2600 21900,6000 21900,11520"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 22050,11500 L 21900,11800 21750,11500 22050,11500 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id27">
        <rect class="BoundingBox" stroke="none" fill="none" x="10599" y="14250" width="9302" height="301"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 10600,14400 L 19620,14400"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 19600,14250 L 19900,14400 19600,14550 19600,14250 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id28">
        <rect class="BoundingBox" stroke="none" fill="none" x="25299" y="599" width="3" height="4003"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,600 L 25300,762"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,843 L 25300,1004"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,1085 L 25300,1247"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,1328 L 25300,1489"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,1570 L 25300,1732"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,1813 L 25300,1974"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,2055 L 25300,2217"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,2298 L 25300,2460"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,2540 L 25300,2702"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,2783 L 25300,2945"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,3025 L 25300,3187"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,3268 L 25300,3430"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,3511 L 25300,3672"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,3753 L 25300,3915"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,3996 L 25300,4157"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,4238 L 25300,4400"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25300,4481 L 25300,4600"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id29">
        <rect class="BoundingBox" stroke="none" fill="none" x="21299" y="599" width="4003" height="3"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,600 L 21462,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21543,600 L 21704,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21785,600 L 21947,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 22028,600 L 22189,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 22270,600 L 22432,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 22513,600 L 22674,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 22755,600 L 22917,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 22998,600 L 23160,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23240,600 L 23402,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23483,600 L 23645,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23726,600 L 23887,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23968,600 L 24130,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 24211,600 L 24372,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 24453,600 L 24615,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 24696,600 L 24857,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 24938,600 L 25100,600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25181,600 L 25300,600"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id30">
        <rect class="BoundingBox" stroke="none" fill="none" x="21299" y="599" width="3" height="4003"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,600 L 21300,762"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,843 L 21300,1004"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,1085 L 21300,1247"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,1328 L 21300,1489"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,1570 L 21300,1732"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,1813 L 21300,1974"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,2055 L 21300,2217"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,2298 L 21300,2460"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,2540 L 21300,2702"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,2783 L 21300,2945"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,3025 L 21300,3187"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,3268 L 21300,3430"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,3511 L 21300,3672"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,3753 L 21300,3915"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,3996 L 21300,4157"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,4238 L 21300,4400"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,4481 L 21300,4600"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id31">
        <rect class="BoundingBox" stroke="none" fill="none" x="21299" y="4599" width="4003" height="3"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21300,4600 L 21462,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21543,4600 L 21704,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 21785,4600 L 21947,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 22028,4600 L 22189,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 22270,4600 L 22432,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 22513,4600 L 22674,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 22755,4600 L 22917,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 22998,4600 L 23160,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23240,4600 L 23402,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23483,4600 L 23645,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23726,4600 L 23887,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23968,4600 L 24130,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 24211,4600 L 24372,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 24453,4600 L 24615,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 24696,4600 L 24857,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 24938,4600 L 25100,4600"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 25181,4600 L 25300,4600"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id32">
        <rect class="BoundingBox" stroke="none" fill="none" x="21599" y="1999" width="3403" height="1203"/>
        <path fill="rgb(128,128,128)" stroke="none" d="M 23400,3200 L 21800,3200 21800,2200 25000,2200 25000,3200 23400,3200 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" d="M 23400,3200 L 21800,3200 21800,2200 25000,2200 25000,3200 23400,3200 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="22274" y="2848"><tspan fill="rgb(128,128,128)" stroke="none">TEMP. ODT</tspan></tspan></tspan></text>
        <path fill="rgb(221,221,221)" stroke="none" d="M 23200,3000 L 21600,3000 21600,2000 24800,2000 24800,3000 23200,3000 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23200,3000 L 21600,3000 21600,2000 24800,2000 24800,3000 23200,3000 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="22074" y="2648"><tspan fill="rgb(0,0,0)" stroke="none">TEMP. ODT</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.ConnectorShape">
       <g id="id33">
        <rect class="BoundingBox" stroke="none" fill="none" x="23150" y="4600" width="302" height="7348"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23315,11946 L 23301,4880"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 23151,4900 L 23300,4600 23451,4900 23151,4900 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id34">
        <rect class="BoundingBox" stroke="none" fill="none" x="21599" y="3299" width="3403" height="1203"/>
        <path fill="rgb(128,128,128)" stroke="none" d="M 23400,4500 L 21800,4500 21800,3500 25000,3500 25000,4500 23400,4500 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" d="M 23400,4500 L 21800,4500 21800,3500 25000,3500 25000,4500 23400,4500 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="22096" y="4148"><tspan fill="rgb(128,128,128)" stroke="none">TEMPLATE X</tspan></tspan></tspan></text>
        <path fill="rgb(221,221,221)" stroke="none" d="M 23200,4300 L 21600,4300 21600,3300 24800,3300 24800,4300 23200,4300 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23200,4300 L 21600,4300 21600,3300 24800,3300 24800,4300 23200,4300 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="21896" y="3948"><tspan fill="rgb(0,0,0)" stroke="none">TEMPLATE X</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id35">
        <rect class="BoundingBox" stroke="none" fill="none" x="4399" y="1499" width="4104" height="2204"/>
        <path fill="rgb(222,230,239)" stroke="none" d="M 4400,1500 L 7824,1500 8501,2600 7824,3701 4400,3701 5076,2600 4400,1500 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 4400,1500 L 7824,1500 8501,2600 7824,3701 4400,3701 5076,2600 4400,1500 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="5820" y="2223"><tspan fill="rgb(0,0,0)" stroke="none">PYTHON </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="5223" y="2541"><tspan fill="rgb(0,0,0)" stroke="none">(tagging-structured </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="6135" y="2859"><tspan fill="rgb(0,0,0)" stroke="none">data </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="5498" y="3177"><tspan fill="rgb(0,0,0)" stroke="none">transformation)</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id36">
        <rect class="BoundingBox" stroke="none" fill="none" x="13899" y="1499" width="3804" height="2204"/>
        <path fill="rgb(222,230,239)" stroke="none" d="M 13900,1500 L 17024,1500 17701,2600 17024,3701 13900,3701 14576,2600 13900,1500 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 13900,1500 L 17024,1500 17701,2600 17024,3701 13900,3701 14576,2600 13900,1500 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="14668" y="2382"><tspan fill="rgb(0,0,0)" stroke="none">POSTGRESQL – </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="14850" y="2700"><tspan fill="rgb(0,0,0)" stroke="none">XML database </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="14569" y="3018"><tspan fill="rgb(0,0,0)" stroke="none">initialization/staging</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id37">
        <rect class="BoundingBox" stroke="none" fill="none" x="13199" y="13299" width="3204" height="2204"/>
        <path fill="rgb(222,230,239)" stroke="none" d="M 13200,13300 L 15724,13300 16401,14400 15724,15501 13200,15501 13876,14400 13200,13300 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 13200,13300 L 15724,13300 16401,14400 15724,15501 13200,15501 13876,14400 13200,13300 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="14119" y="14182"><tspan fill="rgb(0,0,0)" stroke="none">RESTFUL </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="14178" y="14500"><tspan fill="rgb(0,0,0)" stroke="none">SERVICE</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="14337" y="14818"><tspan fill="rgb(0,0,0)" stroke="none">(HTTP)</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id38">
        <rect class="BoundingBox" stroke="none" fill="none" x="4799" y="8799" width="2403" height="3203"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6000,12000 L 5838,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5757,12000 L 5731,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5650,12000 L 5488,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5407,12000 L 5380,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5299,12000 L 5138,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5057,12000 L 5030,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4949,12000 L 4800,12000 4800,11987"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,11906 L 4800,11879"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,11799 L 4800,11637"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,11556 L 4800,11529"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,11448 L 4800,11287"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,11206 L 4800,11179"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,11098 L 4800,10936"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,10855 L 4800,10828"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,10748 L 4800,10586"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,10505 L 4800,10478"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,10397 L 4800,10236"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,10155 L 4800,10128"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,10047 L 4800,9885"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,9804 L 4800,9777"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,9697 L 4800,9535"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,9454 L 4800,9427"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,9346 L 4800,9184"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,9104 L 4800,9077"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,8996 L 4800,8834"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4847,8800 L 4874,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4955,8800 L 5116,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5197,8800 L 5224,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5305,8800 L 5467,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5547,8800 L 5574,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5655,8800 L 5817,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5898,8800 L 5925,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6006,8800 L 6167,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6248,8800 L 6275,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6356,8800 L 6518,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6598,8800 L 6625,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6706,8800 L 6868,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6949,8800 L 6976,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7057,8800 L 7200,8800 7200,8818"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,8899 L 7200,8926"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,9007 L 7200,9169"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,9250 L 7200,9276"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,9357 L 7200,9519"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,9600 L 7200,9627"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,9708 L 7200,9869"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,9950 L 7200,9977"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,10058 L 7200,10220"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,10301 L 7200,10328"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,10408 L 7200,10570"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,10651 L 7200,10678"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,10759 L 7200,10920"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,11001 L 7200,11028"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,11109 L 7200,11271"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,11352 L 7200,11379"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,11459 L 7200,11621"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,11702 L 7200,11729"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,11810 L 7200,11971"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7148,12000 L 7121,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7040,12000 L 6878,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6797,12000 L 6770,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6690,12000 L 6528,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6447,12000 L 6420,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6339,12000 L 6177,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6097,12000 L 6070,12000"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id39">
        <rect class="BoundingBox" stroke="none" fill="none" x="8799" y="8799" width="2403" height="3203"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10000,12000 L 9838,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9757,12000 L 9731,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9650,12000 L 9488,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9407,12000 L 9380,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9299,12000 L 9138,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9057,12000 L 9030,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8949,12000 L 8800,12000 8800,11987"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,11906 L 8800,11879"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,11799 L 8800,11637"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,11556 L 8800,11529"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,11448 L 8800,11287"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,11206 L 8800,11179"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,11098 L 8800,10936"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,10855 L 8800,10828"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,10748 L 8800,10586"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,10505 L 8800,10478"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,10397 L 8800,10236"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,10155 L 8800,10128"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,10047 L 8800,9885"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,9804 L 8800,9777"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,9697 L 8800,9535"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,9454 L 8800,9427"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,9346 L 8800,9184"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,9104 L 8800,9077"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8800,8996 L 8800,8834"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8847,8800 L 8874,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8955,8800 L 9116,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9197,8800 L 9224,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9305,8800 L 9467,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9547,8800 L 9574,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9655,8800 L 9817,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9898,8800 L 9925,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10006,8800 L 10167,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10248,8800 L 10275,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10356,8800 L 10518,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10598,8800 L 10625,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10706,8800 L 10868,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10949,8800 L 10976,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11057,8800 L 11200,8800 11200,8818"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,8899 L 11200,8926"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,9007 L 11200,9169"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,9250 L 11200,9276"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,9357 L 11200,9519"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,9600 L 11200,9627"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,9708 L 11200,9869"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,9950 L 11200,9977"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,10058 L 11200,10220"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,10301 L 11200,10328"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,10408 L 11200,10570"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,10651 L 11200,10678"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,10759 L 11200,10920"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,11001 L 11200,11028"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,11109 L 11200,11271"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,11352 L 11200,11379"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,11459 L 11200,11621"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,11702 L 11200,11729"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11200,11810 L 11200,11971"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11148,12000 L 11121,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11040,12000 L 10878,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10797,12000 L 10770,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10690,12000 L 10528,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10447,12000 L 10420,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10339,12000 L 10177,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10097,12000 L 10070,12000"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id40">
        <rect class="BoundingBox" stroke="none" fill="none" x="12799" y="8799" width="2403" height="3203"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 14000,12000 L 13838,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13757,12000 L 13731,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13650,12000 L 13488,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13407,12000 L 13380,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13299,12000 L 13138,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13057,12000 L 13030,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12949,12000 L 12800,12000 12800,11987"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,11906 L 12800,11879"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,11799 L 12800,11637"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,11556 L 12800,11529"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,11448 L 12800,11287"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,11206 L 12800,11179"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,11098 L 12800,10936"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,10855 L 12800,10828"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,10748 L 12800,10586"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,10505 L 12800,10478"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,10397 L 12800,10236"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,10155 L 12800,10128"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,10047 L 12800,9885"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,9804 L 12800,9777"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,9697 L 12800,9535"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,9454 L 12800,9427"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,9346 L 12800,9184"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,9104 L 12800,9077"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12800,8996 L 12800,8834"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12847,8800 L 12874,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12955,8800 L 13116,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13197,8800 L 13224,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13305,8800 L 13467,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13547,8800 L 13574,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13655,8800 L 13817,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13898,8800 L 13925,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 14006,8800 L 14167,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 14248,8800 L 14275,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 14356,8800 L 14518,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 14598,8800 L 14625,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 14706,8800 L 14868,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 14949,8800 L 14976,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15057,8800 L 15200,8800 15200,8818"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,8899 L 15200,8926"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,9007 L 15200,9169"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,9250 L 15200,9276"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,9357 L 15200,9519"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,9600 L 15200,9627"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,9708 L 15200,9869"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,9950 L 15200,9977"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,10058 L 15200,10220"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,10301 L 15200,10328"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,10408 L 15200,10570"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,10651 L 15200,10678"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,10759 L 15200,10920"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,11001 L 15200,11028"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,11109 L 15200,11271"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,11352 L 15200,11379"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,11459 L 15200,11621"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,11702 L 15200,11729"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15200,11810 L 15200,11971"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15148,12000 L 15121,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 15040,12000 L 14878,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 14797,12000 L 14770,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 14690,12000 L 14528,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 14447,12000 L 14420,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 14339,12000 L 14177,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 14097,12000 L 14070,12000"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id41">
        <rect class="BoundingBox" stroke="none" fill="none" x="16799" y="8799" width="2403" height="3203"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 18000,12000 L 17838,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 17757,12000 L 17731,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 17650,12000 L 17488,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 17407,12000 L 17380,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 17299,12000 L 17138,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 17057,12000 L 17030,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16949,12000 L 16800,12000 16800,11987"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,11906 L 16800,11879"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,11799 L 16800,11637"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,11556 L 16800,11529"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,11448 L 16800,11287"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,11206 L 16800,11179"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,11098 L 16800,10936"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,10855 L 16800,10828"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,10748 L 16800,10586"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,10505 L 16800,10478"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,10397 L 16800,10236"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,10155 L 16800,10128"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,10047 L 16800,9885"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,9804 L 16800,9777"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,9697 L 16800,9535"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,9454 L 16800,9427"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,9346 L 16800,9184"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,9104 L 16800,9077"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16800,8996 L 16800,8834"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16847,8800 L 16874,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 16955,8800 L 17116,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 17197,8800 L 17224,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 17305,8800 L 17467,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 17547,8800 L 17574,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 17655,8800 L 17817,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 17898,8800 L 17925,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 18006,8800 L 18167,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 18248,8800 L 18275,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 18356,8800 L 18518,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 18599,8800 L 18625,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 18706,8800 L 18868,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 18949,8800 L 18976,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19057,8800 L 19200,8800 19200,8818"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,8899 L 19200,8926"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,9007 L 19200,9169"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,9250 L 19200,9276"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,9357 L 19200,9519"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,9600 L 19200,9627"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,9708 L 19200,9869"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,9950 L 19200,9977"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,10058 L 19200,10220"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,10301 L 19200,10328"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,10408 L 19200,10570"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,10651 L 19200,10678"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,10759 L 19200,10920"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,11001 L 19200,11028"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,11109 L 19200,11271"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,11352 L 19200,11379"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,11459 L 19200,11621"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,11702 L 19200,11729"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19200,11810 L 19200,11971"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19148,12000 L 19121,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 19040,12000 L 18878,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 18797,12000 L 18770,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 18690,12000 L 18528,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 18447,12000 L 18420,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 18339,12000 L 18177,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 18097,12000 L 18070,12000"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id42">
        <rect class="BoundingBox" stroke="none" fill="none" x="10799" y="999" width="2403" height="3203"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12000,4200 L 11838,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11757,4200 L 11731,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11650,4200 L 11488,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11407,4200 L 11380,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11299,4200 L 11138,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11057,4200 L 11030,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10949,4200 L 10800,4200 10800,4187"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,4106 L 10800,4079"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,3999 L 10800,3837"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,3756 L 10800,3729"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,3648 L 10800,3487"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,3406 L 10800,3379"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,3298 L 10800,3136"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,3055 L 10800,3028"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,2948 L 10800,2786"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,2705 L 10800,2678"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,2597 L 10800,2436"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,2355 L 10800,2328"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,2247 L 10800,2085"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,2004 L 10800,1977"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,1897 L 10800,1735"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,1654 L 10800,1627"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,1546 L 10800,1384"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,1304 L 10800,1277"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10800,1196 L 10800,1034"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10847,1000 L 10874,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10955,1000 L 11116,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11197,1000 L 11224,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11305,1000 L 11467,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11547,1000 L 11574,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11655,1000 L 11817,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 11898,1000 L 11925,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12006,1000 L 12167,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12248,1000 L 12275,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12356,1000 L 12518,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12598,1000 L 12625,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12706,1000 L 12868,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12949,1000 L 12976,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13057,1000 L 13200,1000 13200,1018"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,1099 L 13200,1126"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,1207 L 13200,1369"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,1450 L 13200,1476"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,1557 L 13200,1719"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,1800 L 13200,1827"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,1908 L 13200,2069"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,2150 L 13200,2177"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,2258 L 13200,2420"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,2501 L 13200,2528"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,2608 L 13200,2770"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,2851 L 13200,2878"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,2959 L 13200,3120"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,3201 L 13200,3228"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,3309 L 13200,3471"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,3552 L 13200,3579"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,3659 L 13200,3821"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,3902 L 13200,3929"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13200,4010 L 13200,4171"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13148,4200 L 13121,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 13040,4200 L 12878,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12797,4200 L 12770,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12690,4200 L 12528,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12447,4200 L 12420,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12339,4200 L 12177,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 12097,4200 L 12070,4200"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id43">
        <rect class="BoundingBox" stroke="none" fill="none" x="1099" y="999" width="2403" height="3203"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2300,4200 L 2138,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2057,4200 L 2031,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1950,4200 L 1788,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1707,4200 L 1680,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1599,4200 L 1438,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1357,4200 L 1330,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1249,4200 L 1100,4200 1100,4187"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,4106 L 1100,4079"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,3999 L 1100,3837"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,3756 L 1100,3729"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,3648 L 1100,3487"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,3406 L 1100,3379"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,3298 L 1100,3136"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,3055 L 1100,3028"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,2948 L 1100,2786"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,2705 L 1100,2678"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,2597 L 1100,2436"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,2355 L 1100,2328"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,2247 L 1100,2085"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,2004 L 1100,1977"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,1897 L 1100,1735"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,1654 L 1100,1627"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,1546 L 1100,1384"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,1304 L 1100,1277"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1100,1196 L 1100,1034"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1147,1000 L 1174,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1255,1000 L 1416,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1497,1000 L 1524,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1605,1000 L 1767,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1847,1000 L 1874,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1955,1000 L 2117,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2198,1000 L 2225,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2306,1000 L 2467,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2548,1000 L 2575,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2656,1000 L 2818,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2898,1000 L 2925,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3006,1000 L 3168,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3249,1000 L 3276,1000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3357,1000 L 3500,1000 3500,1018"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,1099 L 3500,1126"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,1207 L 3500,1369"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,1450 L 3500,1476"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,1557 L 3500,1719"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,1800 L 3500,1827"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,1908 L 3500,2069"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,2150 L 3500,2177"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,2258 L 3500,2420"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,2501 L 3500,2528"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,2608 L 3500,2770"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,2851 L 3500,2878"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,2959 L 3500,3120"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,3201 L 3500,3228"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,3309 L 3500,3471"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,3552 L 3500,3579"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,3659 L 3500,3821"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,3902 L 3500,3929"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3500,4010 L 3500,4171"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3448,4200 L 3421,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3340,4200 L 3178,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3097,4200 L 3070,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2990,4200 L 2828,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2747,4200 L 2720,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2639,4200 L 2477,4200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2397,4200 L 2370,4200"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id44">
        <rect class="BoundingBox" stroke="none" fill="none" x="4799" y="8799" width="2403" height="3203"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6000,12000 L 5838,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5757,12000 L 5731,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5650,12000 L 5488,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5407,12000 L 5380,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5299,12000 L 5138,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5057,12000 L 5030,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4949,12000 L 4800,12000 4800,11987"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,11906 L 4800,11879"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,11799 L 4800,11637"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,11556 L 4800,11529"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,11448 L 4800,11287"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,11206 L 4800,11179"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,11098 L 4800,10936"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,10855 L 4800,10828"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,10748 L 4800,10586"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,10505 L 4800,10478"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,10397 L 4800,10236"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,10155 L 4800,10128"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,10047 L 4800,9885"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,9804 L 4800,9777"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,9697 L 4800,9535"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,9454 L 4800,9427"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,9346 L 4800,9184"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,9104 L 4800,9077"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4800,8996 L 4800,8834"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4847,8800 L 4874,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4955,8800 L 5116,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5197,8800 L 5224,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5305,8800 L 5467,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5547,8800 L 5574,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5655,8800 L 5817,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 5898,8800 L 5925,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6006,8800 L 6167,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6248,8800 L 6275,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6356,8800 L 6518,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6598,8800 L 6625,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6706,8800 L 6868,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6949,8800 L 6976,8800"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7057,8800 L 7200,8800 7200,8818"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,8899 L 7200,8926"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,9007 L 7200,9169"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,9250 L 7200,9276"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,9357 L 7200,9519"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,9600 L 7200,9627"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,9708 L 7200,9869"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,9950 L 7200,9977"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,10058 L 7200,10220"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,10301 L 7200,10328"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,10408 L 7200,10570"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,10651 L 7200,10678"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,10759 L 7200,10920"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,11001 L 7200,11028"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,11109 L 7200,11271"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,11352 L 7200,11379"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,11459 L 7200,11621"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,11702 L 7200,11729"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7200,11810 L 7200,11971"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7148,12000 L 7121,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7040,12000 L 6878,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6797,12000 L 6770,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6690,12000 L 6528,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6447,12000 L 6420,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6339,12000 L 6177,12000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6097,12000 L 6070,12000"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id45">
        <rect class="BoundingBox" stroke="none" fill="none" x="1399" y="14199" width="3503" height="803"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3150,15000 L 2988,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2907,15000 L 2881,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2800,15000 L 2638,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2557,15000 L 2530,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2449,15000 L 2288,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2207,15000 L 2180,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2099,15000 L 1937,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1856,15000 L 1829,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1749,15000 L 1587,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1506,15000 L 1479,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1400,14998 L 1400,14837"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1400,14756 L 1400,14729"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1400,14648 L 1400,14486"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1400,14405 L 1400,14378"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1400,14298 L 1400,14200 1464,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1545,14200 L 1572,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1653,14200 L 1815,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 1895,14200 L 1922,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2003,14200 L 2165,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2246,14200 L 2273,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2354,14200 L 2515,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2596,14200 L 2623,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2704,14200 L 2866,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 2946,14200 L 2973,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3054,14200 L 3216,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3297,14200 L 3324,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3405,14200 L 3566,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3647,14200 L 3674,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3755,14200 L 3917,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3997,14200 L 4024,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4105,14200 L 4267,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4348,14200 L 4375,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4456,14200 L 4617,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4698,14200 L 4725,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4806,14200 L 4900,14200 4900,14268"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4900,14348 L 4900,14375"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4900,14456 L 4900,14618"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4900,14699 L 4900,14726"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4900,14807 L 4900,14968"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4851,15000 L 4824,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4743,15000 L 4581,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4500,15000 L 4474,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4393,15000 L 4231,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4150,15000 L 4123,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 4042,15000 L 3881,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3800,15000 L 3773,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3692,15000 L 3530,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3449,15000 L 3422,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 3342,15000 L 3180,15000"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id46">
        <rect class="BoundingBox" stroke="none" fill="none" x="6899" y="14199" width="3503" height="803"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8650,15000 L 8488,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8407,15000 L 8381,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8300,15000 L 8138,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8057,15000 L 8030,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7949,15000 L 7788,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7707,15000 L 7680,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7599,15000 L 7437,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7356,15000 L 7329,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7249,15000 L 7087,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7006,15000 L 6979,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6900,14998 L 6900,14837"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6900,14756 L 6900,14729"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6900,14648 L 6900,14486"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6900,14405 L 6900,14378"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 6900,14298 L 6900,14200 6964,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7045,14200 L 7072,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7153,14200 L 7315,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7395,14200 L 7422,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7503,14200 L 7665,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7746,14200 L 7773,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 7854,14200 L 8015,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8096,14200 L 8123,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8204,14200 L 8366,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8446,14200 L 8473,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8554,14200 L 8716,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8797,14200 L 8824,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8905,14200 L 9066,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9147,14200 L 9174,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9255,14200 L 9417,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9497,14200 L 9524,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9605,14200 L 9767,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9848,14200 L 9875,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9956,14200 L 10117,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10198,14200 L 10225,14200"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10306,14200 L 10400,14200 10400,14268"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10400,14348 L 10400,14375"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10400,14456 L 10400,14618"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10400,14699 L 10400,14726"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10400,14807 L 10400,14968"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10351,15000 L 10324,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10243,15000 L 10081,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 10000,15000 L 9974,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9893,15000 L 9731,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9650,15000 L 9623,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9542,15000 L 9381,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9300,15000 L 9273,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 9192,15000 L 9030,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8949,15000 L 8922,15000"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 8842,15000 L 8680,15000"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id47">
        <rect class="BoundingBox" stroke="none" fill="none" x="20999" y="299" width="4603" height="4603"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 23300,4900 L 23138,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 23057,4900 L 23031,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 22950,4900 L 22788,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 22707,4900 L 22680,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 22599,4900 L 22438,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 22357,4900 L 22330,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 22249,4900 L 22087,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 22006,4900 L 21979,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21899,4900 L 21737,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21656,4900 L 21629,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21548,4900 L 21387,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21306,4900 L 21279,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21198,4900 L 21036,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,4855 L 21000,4828"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,4748 L 21000,4586"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,4505 L 21000,4478"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,4397 L 21000,4236"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,4155 L 21000,4128"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,4047 L 21000,3885"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,3804 L 21000,3777"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,3697 L 21000,3535"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,3454 L 21000,3427"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,3346 L 21000,3184"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,3104 L 21000,3077"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,2996 L 21000,2834"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,2753 L 21000,2726"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,2645 L 21000,2484"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,2403 L 21000,2376"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,2295 L 21000,2133"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,2053 L 21000,2026"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,1945 L 21000,1783"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,1702 L 21000,1675"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,1594 L 21000,1433"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,1352 L 21000,1325"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,1244 L 21000,1082"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,1002 L 21000,975"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,894 L 21000,732"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,651 L 21000,624"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,543 L 21000,382"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21000,301 L 21000,300 21026,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21107,300 L 21269,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21350,300 L 21376,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21457,300 L 21619,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21700,300 L 21727,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 21808,300 L 21969,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 22050,300 L 22077,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 22158,300 L 22320,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 22401,300 L 22428,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 22508,300 L 22670,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 22751,300 L 22778,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 22859,300 L 23020,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 23101,300 L 23128,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 23209,300 L 23371,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 23452,300 L 23479,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 23559,300 L 23721,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 23802,300 L 23829,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 23910,300 L 24071,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 24152,300 L 24179,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 24260,300 L 24422,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 24503,300 L 24530,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 24610,300 L 24772,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 24853,300 L 24880,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 24961,300 L 25123,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25203,300 L 25230,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25311,300 L 25473,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25554,300 L 25581,300"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,362 L 25600,523"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,604 L 25600,631"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,712 L 25600,874"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,954 L 25600,981"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,1062 L 25600,1224"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,1305 L 25600,1332"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,1413 L 25600,1574"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,1655 L 25600,1682"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,1763 L 25600,1925"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,2005 L 25600,2032"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,2113 L 25600,2275"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,2356 L 25600,2383"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,2464 L 25600,2625"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,2706 L 25600,2733"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,2814 L 25600,2976"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,3057 L 25600,3083"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,3164 L 25600,3326"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,3407 L 25600,3434"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,3515 L 25600,3676"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,3757 L 25600,3784"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,3865 L 25600,4027"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,4108 L 25600,4135"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,4215 L 25600,4377"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,4458 L 25600,4485"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,4566 L 25600,4727"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25600,4808 L 25600,4835"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25584,4900 L 25422,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25341,4900 L 25314,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 25234,4900 L 25072,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 24991,4900 L 24964,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 24883,4900 L 24722,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 24641,4900 L 24614,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 24533,4900 L 24371,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 24290,4900 L 24263,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 24183,4900 L 24021,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 23940,4900 L 23913,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 23832,4900 L 23670,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 23590,4900 L 23563,4900"/>
        <path fill="none" stroke="rgb(255,0,0)" d="M 23482,4900 L 23320,4900"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id48">
        <rect class="BoundingBox" stroke="none" fill="none" x="8799" y="2099" width="1004" height="1004"/>
        <path fill="rgb(246,249,212)" stroke="none" d="M 9801,2601 C 9801,2688 9778,2775 9734,2851 9690,2927 9627,2990 9551,3034 9475,3078 9388,3101 9301,3101 9213,3101 9126,3078 9050,3034 8974,2990 8911,2927 8867,2851 8823,2775 8800,2688 8800,2601 8800,2513 8823,2426 8867,2350 8911,2274 8974,2211 9050,2167 9126,2123 9213,2100 9301,2100 9388,2100 9475,2123 9551,2167 9627,2211 9690,2274 9734,2350 9778,2426 9801,2513 9801,2600 L 9801,2601 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 9801,2601 C 9801,2688 9778,2775 9734,2851 9690,2927 9627,2990 9551,3034 9475,3078 9388,3101 9301,3101 9213,3101 9126,3078 9050,3034 8974,2990 8911,2927 8867,2851 8823,2775 8800,2688 8800,2601 8800,2513 8823,2426 8867,2350 8911,2274 8974,2211 9050,2167 9126,2123 9213,2100 9301,2100 9388,2100 9475,2123 9551,2167 9627,2211 9690,2274 9734,2350 9778,2426 9801,2513 9801,2600 L 9801,2601 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="700"><tspan class="TextPosition" x="9124" y="2821"><tspan fill="rgb(0,0,0)" stroke="none">1</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id49">
        <rect class="BoundingBox" stroke="none" fill="none" x="11499" y="6899" width="1004" height="1004"/>
        <path fill="rgb(246,249,212)" stroke="none" d="M 12501,7401 C 12501,7488 12478,7575 12434,7651 12390,7727 12327,7790 12251,7834 12175,7878 12088,7901 12001,7901 11913,7901 11826,7878 11750,7834 11674,7790 11611,7727 11567,7651 11523,7575 11500,7488 11500,7401 11500,7313 11523,7226 11567,7150 11611,7074 11674,7011 11750,6967 11826,6923 11913,6900 12001,6900 12088,6900 12175,6923 12251,6967 12327,7011 12390,7074 12434,7150 12478,7226 12501,7313 12501,7400 L 12501,7401 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 12501,7401 C 12501,7488 12478,7575 12434,7651 12390,7727 12327,7790 12251,7834 12175,7878 12088,7901 12001,7901 11913,7901 11826,7878 11750,7834 11674,7790 11611,7727 11567,7651 11523,7575 11500,7488 11500,7401 11500,7313 11523,7226 11567,7150 11611,7074 11674,7011 11750,6967 11826,6923 11913,6900 12001,6900 12088,6900 12175,6923 12251,6967 12327,7011 12390,7074 12434,7150 12478,7226 12501,7313 12501,7400 L 12501,7401 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="700"><tspan class="TextPosition" x="11824" y="7621"><tspan fill="rgb(0,0,0)" stroke="none">2</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id50">
        <rect class="BoundingBox" stroke="none" fill="none" x="5499" y="12899" width="1004" height="1004"/>
        <path fill="rgb(246,249,212)" stroke="none" d="M 6501,13401 C 6501,13488 6478,13575 6434,13651 6390,13727 6327,13790 6251,13834 6175,13878 6088,13901 6001,13901 5913,13901 5826,13878 5750,13834 5674,13790 5611,13727 5567,13651 5523,13575 5500,13488 5500,13401 5500,13313 5523,13226 5567,13150 5611,13074 5674,13011 5750,12967 5826,12923 5913,12900 6001,12900 6088,12900 6175,12923 6251,12967 6327,13011 6390,13074 6434,13150 6478,13226 6501,13313 6501,13401 L 6501,13401 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 6501,13401 C 6501,13488 6478,13575 6434,13651 6390,13727 6327,13790 6251,13834 6175,13878 6088,13901 6001,13901 5913,13901 5826,13878 5750,13834 5674,13790 5611,13727 5567,13651 5523,13575 5500,13488 5500,13401 5500,13313 5523,13226 5567,13150 5611,13074 5674,13011 5750,12967 5826,12923 5913,12900 6001,12900 6088,12900 6175,12923 6251,12967 6327,13011 6390,13074 6434,13150 6478,13226 6501,13313 6501,13401 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="700"><tspan class="TextPosition" x="5824" y="13621"><tspan fill="rgb(0,0,0)" stroke="none">3</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id51">
        <rect class="BoundingBox" stroke="none" fill="none" x="17899" y="2099" width="1004" height="1004"/>
        <path fill="rgb(246,249,212)" stroke="none" d="M 18901,2601 C 18901,2688 18878,2775 18834,2851 18790,2927 18727,2990 18651,3034 18575,3078 18488,3101 18401,3101 18313,3101 18226,3078 18150,3034 18074,2990 18011,2927 17967,2851 17923,2775 17900,2688 17900,2601 17900,2513 17923,2426 17967,2350 18011,2274 18074,2211 18150,2167 18226,2123 18313,2100 18401,2100 18488,2100 18575,2123 18651,2167 18727,2211 18790,2274 18834,2350 18878,2426 18901,2513 18901,2600 L 18901,2601 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 18901,2601 C 18901,2688 18878,2775 18834,2851 18790,2927 18727,2990 18651,3034 18575,3078 18488,3101 18401,3101 18313,3101 18226,3078 18150,3034 18074,2990 18011,2927 17967,2851 17923,2775 17900,2688 17900,2601 17900,2513 17923,2426 17967,2350 18011,2274 18074,2211 18150,2167 18226,2123 18313,2100 18401,2100 18488,2100 18575,2123 18651,2167 18727,2211 18790,2274 18834,2350 18878,2426 18901,2513 18901,2600 L 18901,2601 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="700"><tspan class="TextPosition" x="18224" y="2821"><tspan fill="rgb(0,0,0)" stroke="none">4</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id52">
        <rect class="BoundingBox" stroke="none" fill="none" x="17499" y="13899" width="1004" height="1004"/>
        <path fill="rgb(246,249,212)" stroke="none" d="M 18501,14401 C 18501,14488 18478,14575 18434,14651 18390,14727 18327,14790 18251,14834 18175,14878 18088,14901 18001,14901 17913,14901 17826,14878 17750,14834 17674,14790 17611,14727 17567,14651 17523,14575 17500,14488 17500,14401 17500,14313 17523,14226 17567,14150 17611,14074 17674,14011 17750,13967 17826,13923 17913,13900 18001,13900 18088,13900 18175,13923 18251,13967 18327,14011 18390,14074 18434,14150 18478,14226 18501,14313 18501,14401 L 18501,14401 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 18501,14401 C 18501,14488 18478,14575 18434,14651 18390,14727 18327,14790 18251,14834 18175,14878 18088,14901 18001,14901 17913,14901 17826,14878 17750,14834 17674,14790 17611,14727 17567,14651 17523,14575 17500,14488 17500,14401 17500,14313 17523,14226 17567,14150 17611,14074 17674,14011 17750,13967 17826,13923 17913,13900 18001,13900 18088,13900 18175,13923 18251,13967 18327,14011 18390,14074 18434,14150 18478,14226 18501,14313 18501,14401 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="700"><tspan class="TextPosition" x="17824" y="14621"><tspan fill="rgb(0,0,0)" stroke="none">5</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id53">
        <rect class="BoundingBox" stroke="none" fill="none" x="22799" y="5199" width="1004" height="1004"/>
        <path fill="rgb(246,249,212)" stroke="none" d="M 23801,5701 C 23801,5788 23778,5875 23734,5951 23690,6027 23627,6090 23551,6134 23475,6178 23388,6201 23301,6201 23213,6201 23126,6178 23050,6134 22974,6090 22911,6027 22867,5951 22823,5875 22800,5788 22800,5701 22800,5613 22823,5526 22867,5450 22911,5374 22974,5311 23050,5267 23126,5223 23213,5200 23301,5200 23388,5200 23475,5223 23551,5267 23627,5311 23690,5374 23734,5450 23778,5526 23801,5613 23801,5700 L 23801,5701 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 23801,5701 C 23801,5788 23778,5875 23734,5951 23690,6027 23627,6090 23551,6134 23475,6178 23388,6201 23301,6201 23213,6201 23126,6178 23050,6134 22974,6090 22911,6027 22867,5951 22823,5875 22800,5788 22800,5701 22800,5613 22823,5526 22867,5450 22911,5374 22974,5311 23050,5267 23126,5223 23213,5200 23301,5200 23388,5200 23475,5223 23551,5267 23627,5311 23690,5374 23734,5450 23778,5526 23801,5613 23801,5700 L 23801,5701 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="635px" font-weight="700"><tspan class="TextPosition" x="23124" y="5921"><tspan fill="rgb(0,0,0)" stroke="none">6</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id54">
        <rect class="BoundingBox" stroke="none" fill="none" x="4599" y="3399" width="3403" height="3"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 4600,3400 L 4762,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 4843,3400 L 4870,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 4950,3400 L 5112,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 5193,3400 L 5220,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 5301,3400 L 5462,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 5543,3400 L 5570,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 5651,3400 L 5813,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 5894,3400 L 5921,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 6001,3400 L 6163,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 6244,3400 L 6271,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 6352,3400 L 6513,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 6594,3400 L 6621,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 6702,3400 L 6864,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 6945,3400 L 6972,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 7052,3400 L 7214,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 7295,3400 L 7322,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 7403,3400 L 7564,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 7645,3400 L 7672,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 7753,3400 L 7915,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 7996,3400 L 8000,3400"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id55">
        <rect class="BoundingBox" stroke="none" fill="none" x="14099" y="3399" width="3103" height="3"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 14100,3400 L 14262,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 14343,3400 L 14370,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 14450,3400 L 14612,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 14693,3400 L 14720,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 14801,3400 L 14962,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 15043,3400 L 15070,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 15151,3400 L 15313,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 15394,3400 L 15421,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 15501,3400 L 15663,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 15744,3400 L 15771,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 15852,3400 L 16013,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 16094,3400 L 16121,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 16202,3400 L 16364,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 16445,3400 L 16472,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 16552,3400 L 16714,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 16795,3400 L 16822,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 16903,3400 L 17065,3400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 17145,3400 L 17172,3400"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id56">
        <rect class="BoundingBox" stroke="none" fill="none" x="13399" y="15199" width="2403" height="3"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 13400,15200 L 13562,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 13643,15200 L 13670,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 13750,15200 L 13912,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 13993,15200 L 14020,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 14101,15200 L 14262,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 14343,15200 L 14370,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 14451,15200 L 14613,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 14694,15200 L 14721,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 14801,15200 L 14963,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 15044,15200 L 15071,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 15152,15200 L 15313,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 15394,15200 L 15421,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 15502,15200 L 15664,15200"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 15745,15200 L 15772,15200"/>
       </g>
      </g>
      <g class="Group">
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id57">
         <rect class="BoundingBox" stroke="none" fill="none" x="19299" y="5697" width="2004" height="1405"/>
         <defs>
          <clipPath id="clip_path_3" clipPathUnits="userSpaceOnUse">
           <path d="M 20300,5698 C 19754,5698 19300,5777 19300,5873 L 19300,6924 C 19300,7020 19754,7100 20300,7100 20846,7100 21301,7020 21301,6924 L 21301,5873 C 21301,5777 20846,5698 20300,5698 L 20300,5698 Z"/>
          </clipPath>
         </defs>
         <g clip-path="url(#clip_path_3)">
          <path fill="rgb(0,0,0)" stroke="none" d="M 19300,5698 L 21301,5698 21301,7100 19300,7100 19300,5698 Z"/>
          <path fill="rgb(1,2,2)" stroke="none" d="M 21509,6400 C 21509,6612 21453,6820 21347,7004 21241,7188 21088,7341 20905,7447 20721,7553 20512,7609 20300,7609 20088,7609 19879,7553 19695,7447 19512,7341 19359,7188 19253,7004 19147,6820 19091,6612 19091,6400 19091,6187 19147,5979 19253,5795 19359,5611 19512,5458 19695,5352 19879,5246 20088,5190 20300,5190 20512,5190 20721,5246 20905,5352 21088,5458 21241,5611 21347,5795 21453,5979 21509,6187 21509,6400 L 21509,6400 Z"/>
          <path fill="rgb(2,3,4)" stroke="none" d="M 21497,6400 C 21497,6610 21442,6816 21337,6998 21232,7180 21081,7331 20899,7437 20717,7542 20510,7597 20300,7597 20090,7597 19883,7542 19701,7437 19519,7331 19368,7180 19263,6998 19158,6816 19103,6610 19103,6400 19103,6189 19158,5983 19263,5801 19368,5619 19519,5468 19701,5362 19883,5257 20090,5202 20300,5202 20510,5202 20717,5257 20899,5362 21081,5468 21232,5619 21337,5801 21442,5983 21497,6189 21497,6400 L 21497,6400 Z"/>
          <path fill="rgb(3,5,6)" stroke="none" d="M 21486,6400 C 21486,6608 21431,6812 21327,6992 21223,7173 21073,7322 20893,7426 20713,7530 20508,7585 20300,7585 20092,7585 19887,7530 19707,7426 19527,7322 19377,7173 19273,6992 19169,6812 19114,6608 19114,6400 19114,6191 19169,5987 19273,5807 19377,5626 19527,5477 19707,5373 19887,5269 20092,5214 20300,5214 20508,5214 20713,5269 20893,5373 21073,5477 21223,5626 21327,5807 21431,5987 21486,6191 21486,6400 L 21486,6400 Z"/>
          <path fill="rgb(4,6,8)" stroke="none" d="M 21474,6400 C 21474,6606 21420,6808 21317,6986 21214,7165 21065,7313 20887,7416 20709,7519 20506,7573 20300,7573 20094,7573 19891,7519 19713,7416 19535,7313 19386,7165 19283,6986 19180,6808 19126,6606 19126,6400 19126,6193 19180,5991 19283,5813 19386,5634 19535,5486 19713,5383 19891,5280 20094,5226 20300,5226 20506,5226 20709,5280 20887,5383 21065,5486 21214,5634 21317,5813 21420,5991 21474,6193 21474,6400 L 21474,6400 Z"/>
          <path fill="rgb(6,8,10)" stroke="none" d="M 21462,6400 C 21462,6604 21409,6804 21307,6981 21205,7157 21058,7304 20881,7406 20704,7508 20504,7562 20300,7562 20096,7562 19896,7508 19719,7406 19542,7304 19395,7157 19293,6981 19191,6804 19138,6604 19138,6400 19138,6195 19191,5995 19293,5818 19395,5642 19542,5495 19719,5393 19896,5291 20096,5237 20300,5237 20504,5237 20704,5291 20881,5393 21058,5495 21205,5642 21307,5818 21409,5995 21462,6195 21462,6400 L 21462,6400 Z"/>
          <path fill="rgb(7,9,12)" stroke="none" d="M 21451,6400 C 21451,6601 21397,6800 21296,6975 21195,7150 21050,7295 20875,7396 20700,7497 20502,7550 20300,7550 20098,7550 19900,7497 19725,7396 19550,7295 19405,7150 19304,6975 19203,6800 19149,6601 19149,6400 19149,6198 19203,5999 19304,5824 19405,5649 19550,5504 19725,5403 19900,5302 20098,5249 20300,5249 20502,5249 20700,5302 20875,5403 21050,5504 21195,5649 21296,5824 21397,5999 21451,6198 21451,6400 L 21451,6400 Z"/>
          <path fill="rgb(8,11,14)" stroke="none" d="M 21439,6400 C 21439,6599 21386,6796 21286,6969 21186,7142 21042,7286 20869,7386 20696,7486 20500,7538 20300,7538 20100,7538 19904,7486 19731,7386 19558,7286 19414,7142 19314,6969 19214,6796 19161,6599 19161,6400 19161,6200 19214,6003 19314,5830 19414,5657 19558,5513 19731,5413 19904,5313 20100,5261 20300,5261 20500,5261 20696,5313 20869,5413 21042,5513 21186,5657 21286,5830 21386,6003 21439,6200 21439,6400 L 21439,6400 Z"/>
          <path fill="rgb(9,12,16)" stroke="none" d="M 21427,6400 C 21427,6597 21375,6792 21276,6963 21177,7134 21035,7277 20864,7376 20692,7474 20498,7527 20300,7527 20102,7527 19908,7474 19736,7376 19565,7277 19423,7134 19324,6963 19225,6792 19173,6597 19173,6400 19173,6202 19225,6007 19324,5836 19423,5665 19565,5522 19736,5423 19908,5325 20102,5272 20300,5272 20498,5272 20692,5325 20864,5423 21035,5522 21177,5665 21276,5836 21375,6007 21427,6202 21427,6400 L 21427,6400 Z"/>
          <path fill="rgb(10,14,18)" stroke="none" d="M 21415,6400 C 21415,6595 21364,6788 21266,6957 21168,7127 21027,7267 20858,7365 20688,7463 20496,7515 20300,7515 20104,7515 19912,7463 19742,7365 19573,7267 19432,7127 19334,6957 19236,6788 19185,6595 19185,6400 19185,6204 19236,6011 19334,5842 19432,5672 19573,5532 19742,5434 19912,5336 20104,5284 20300,5284 20496,5284 20688,5336 20858,5434 21027,5532 21168,5672 21266,5842 21364,6011 21415,6204 21415,6400 L 21415,6400 Z"/>
          <path fill="rgb(11,15,20)" stroke="none" d="M 21404,6400 C 21404,6593 21353,6784 21256,6951 21159,7119 21020,7258 20852,7355 20684,7452 20494,7503 20300,7503 20106,7503 19916,7452 19748,7355 19580,7258 19441,7119 19344,6951 19247,6784 19196,6593 19196,6400 19196,6206 19247,6015 19344,5848 19441,5680 19580,5541 19748,5444 19916,5347 20106,5296 20300,5296 20494,5296 20684,5347 20852,5444 21020,5541 21159,5680 21256,5848 21353,6015 21404,6206 21404,6400 L 21404,6400 Z"/>
          <path fill="rgb(12,17,22)" stroke="none" d="M 21392,6400 C 21392,6591 21341,6779 21246,6945 21150,7111 21012,7249 20846,7345 20680,7441 20492,7491 20300,7491 20108,7491 19920,7441 19754,7345 19588,7249 19450,7111 19354,6945 19259,6779 19208,6591 19208,6400 19208,6208 19259,6020 19354,5854 19450,5688 19588,5550 19754,5454 19920,5358 20108,5308 20300,5308 20492,5308 20680,5358 20846,5454 21012,5550 21150,5688 21246,5854 21341,6020 21392,6208 21392,6400 L 21392,6400 Z"/>
          <path fill="rgb(13,19,24)" stroke="none" d="M 21380,6400 C 21380,6589 21330,6775 21235,6940 21141,7104 21004,7240 20840,7335 20676,7430 20490,7480 20300,7480 20110,7480 19924,7430 19760,7335 19596,7240 19459,7104 19365,6940 19270,6775 19220,6589 19220,6400 19220,6210 19270,6024 19365,5859 19459,5695 19596,5559 19760,5464 19924,5369 20110,5319 20300,5319 20490,5319 20676,5369 20840,5464 21004,5559 21141,5695 21235,5859 21330,6024 21380,6210 21380,6400 L 21380,6400 Z"/>
          <path fill="rgb(14,20,26)" stroke="none" d="M 21368,6400 C 21368,6587 21319,6771 21225,6934 21131,7096 20997,7231 20834,7325 20672,7418 20488,7468 20300,7468 20112,7468 19928,7418 19766,7325 19603,7231 19469,7096 19375,6934 19281,6771 19232,6587 19232,6400 19232,6212 19281,6028 19375,5865 19469,5703 19603,5568 19766,5474 19928,5381 20112,5331 20300,5331 20488,5331 20672,5381 20834,5474 20997,5568 21131,5703 21225,5865 21319,6028 21368,6212 21368,6400 L 21368,6400 Z"/>
          <path fill="rgb(15,22,28)" stroke="none" d="M 21357,6400 C 21357,6585 21308,6767 21215,6928 21122,7088 20989,7222 20828,7315 20668,7407 20485,7456 20300,7456 20115,7456 19932,7407 19772,7315 19611,7222 19478,7088 19385,6928 19292,6767 19243,6585 19243,6400 19243,6214 19292,6032 19385,5871 19478,5711 19611,5577 19772,5484 19932,5392 20115,5343 20300,5343 20485,5343 20668,5392 20828,5484 20989,5577 21122,5711 21215,5871 21308,6032 21357,6214 21357,6400 L 21357,6400 Z"/>
          <path fill="rgb(17,23,30)" stroke="none" d="M 21345,6400 C 21345,6583 21297,6763 21205,6922 21113,7081 20981,7213 20822,7304 20664,7396 20483,7444 20300,7444 20117,7444 19936,7396 19778,7304 19619,7213 19487,7081 19395,6922 19303,6763 19255,6583 19255,6400 19255,6216 19303,6036 19395,5877 19487,5718 19619,5586 19778,5495 19936,5403 20117,5355 20300,5355 20483,5355 20664,5403 20822,5495 20981,5586 21113,5718 21205,5877 21297,6036 21345,6216 21345,6400 L 21345,6400 Z"/>
          <path fill="rgb(18,25,32)" stroke="none" d="M 21333,6400 C 21333,6581 21285,6759 21195,6916 21104,7073 20974,7204 20817,7294 20660,7385 20481,7433 20300,7433 20119,7433 19940,7385 19783,7294 19626,7204 19496,7073 19405,6916 19315,6759 19267,6581 19267,6400 19267,6218 19315,6040 19405,5883 19496,5726 19626,5595 19783,5505 19940,5414 20119,5366 20300,5366 20481,5366 20660,5414 20817,5505 20974,5595 21104,5726 21195,5883 21285,6040 21333,6218 21333,6400 L 21333,6400 Z"/>
          <path fill="rgb(19,26,34)" stroke="none" d="M 21321,6400 C 21321,6579 21274,6755 21185,6910 21095,7065 20966,7194 20811,7284 20655,7374 20479,7421 20300,7421 20121,7421 19945,7374 19789,7284 19634,7194 19505,7065 19415,6910 19326,6755 19279,6579 19279,6400 19279,6220 19326,6044 19415,5889 19505,5734 19634,5605 19789,5515 19945,5425 20121,5378 20300,5378 20479,5378 20655,5425 20811,5515 20966,5605 21095,5734 21185,5889 21274,6044 21321,6220 21321,6400 L 21321,6400 Z"/>
          <path fill="rgb(20,28,36)" stroke="none" d="M 21310,6400 C 21310,6577 21263,6751 21174,6904 21086,7058 20958,7185 20805,7274 20651,7362 20477,7409 20300,7409 20123,7409 19949,7362 19795,7274 19642,7185 19514,7058 19426,6904 19337,6751 19290,6577 19290,6400 19290,6222 19337,6048 19426,5895 19514,5741 19642,5614 19795,5525 19949,5437 20123,5390 20300,5390 20477,5390 20651,5437 20805,5525 20958,5614 21086,5741 21174,5895 21263,6048 21310,6222 21310,6400 L 21310,6400 Z"/>
          <path fill="rgb(21,29,38)" stroke="none" d="M 21298,6400 C 21298,6575 21252,6747 21164,6898 21077,7050 20951,7176 20799,7264 20647,7351 20475,7397 20300,7397 20125,7397 19953,7351 19801,7264 19649,7176 19523,7050 19436,6898 19348,6747 19302,6575 19302,6400 19302,6224 19348,6052 19436,5901 19523,5749 19649,5623 19801,5535 19953,5448 20125,5402 20300,5402 20475,5402 20647,5448 20799,5535 20951,5623 21077,5749 21164,5901 21252,6052 21298,6224 21298,6400 L 21298,6400 Z"/>
          <path fill="rgb(22,31,40)" stroke="none" d="M 21286,6400 C 21286,6573 21241,6743 21154,6893 21067,7042 20943,7167 20793,7254 20643,7340 20473,7386 20300,7386 20127,7386 19957,7340 19807,7254 19657,7167 19533,7042 19446,6893 19359,6743 19314,6573 19314,6400 19314,6226 19359,6056 19446,5906 19533,5757 19657,5632 19807,5545 19957,5459 20127,5413 20300,5413 20473,5413 20643,5459 20793,5545 20943,5632 21067,5757 21154,5906 21241,6056 21286,6226 21286,6400 L 21286,6400 Z"/>
          <path fill="rgb(23,32,42)" stroke="none" d="M 21274,6400 C 21274,6571 21229,6739 21144,6887 21058,7035 20935,7158 20787,7243 20639,7329 20471,7374 20300,7374 20129,7374 19961,7329 19813,7243 19665,7158 19542,7035 19456,6887 19371,6739 19326,6571 19326,6400 19326,6228 19371,6060 19456,5912 19542,5764 19665,5641 19813,5556 19961,5470 20129,5425 20300,5425 20471,5425 20639,5470 20787,5556 20935,5641 21058,5764 21144,5912 21229,6060 21274,6228 21274,6400 L 21274,6400 Z"/>
          <path fill="rgb(24,34,44)" stroke="none" d="M 21263,6400 C 21263,6568 21218,6734 21134,6881 21049,7027 20928,7149 20781,7233 20635,7318 20469,7362 20300,7362 20131,7362 19965,7318 19819,7233 19672,7149 19551,7027 19466,6881 19382,6734 19337,6568 19337,6400 19337,6231 19382,6065 19466,5918 19551,5772 19672,5650 19819,5566 19965,5481 20131,5437 20300,5437 20469,5437 20635,5481 20781,5566 20928,5650 21049,5772 21134,5918 21218,6065 21263,6231 21263,6400 L 21263,6400 Z"/>
          <path fill="rgb(25,36,46)" stroke="none" d="M 21251,6400 C 21251,6566 21207,6730 21124,6875 21040,7020 20920,7140 20775,7223 20631,7306 20467,7350 20300,7350 20133,7350 19969,7306 19825,7223 19680,7140 19560,7020 19476,6875 19393,6730 19349,6566 19349,6400 19349,6233 19393,6069 19476,5924 19560,5779 19680,5659 19825,5576 19969,5493 20133,5449 20300,5449 20467,5449 20631,5493 20775,5576 20920,5659 21040,5779 21124,5924 21207,6069 21251,6233 21251,6400 L 21251,6400 Z"/>
          <path fill="rgb(27,37,48)" stroke="none" d="M 21239,6400 C 21239,6564 21196,6726 21113,6869 21031,7012 20912,7130 20770,7213 20627,7295 20465,7339 20300,7339 20135,7339 19973,7295 19830,7213 19688,7130 19569,7012 19487,6869 19404,6726 19361,6564 19361,6400 19361,6235 19404,6073 19487,5930 19569,5787 19688,5669 19830,5586 19973,5504 20135,5460 20300,5460 20465,5460 20627,5504 20770,5586 20912,5669 21031,5787 21113,5930 21196,6073 21239,6235 21239,6400 L 21239,6400 Z"/>
          <path fill="rgb(28,39,50)" stroke="none" d="M 21227,6400 C 21227,6562 21185,6722 21103,6863 21022,7004 20905,7121 20764,7203 20623,7284 20463,7327 20300,7327 20137,7327 19977,7284 19836,7203 19695,7121 19578,7004 19497,6863 19415,6722 19373,6562 19373,6400 19373,6237 19415,6077 19497,5936 19578,5795 19695,5678 19836,5596 19977,5515 20137,5472 20300,5472 20463,5472 20623,5515 20764,5596 20905,5678 21022,5795 21103,5936 21185,6077 21227,6237 21227,6400 L 21227,6400 Z"/>
          <path fill="rgb(29,40,52)" stroke="none" d="M 21216,6400 C 21216,6560 21173,6718 21093,6857 21013,6997 20897,7112 20758,7193 20619,7273 20461,7315 20300,7315 20139,7315 19981,7273 19842,7193 19703,7112 19587,6997 19507,6857 19427,6718 19384,6560 19384,6400 19384,6239 19427,6081 19507,5942 19587,5802 19703,5687 19842,5606 19981,5526 20139,5484 20300,5484 20461,5484 20619,5526 20758,5606 20897,5687 21013,5802 21093,5942 21173,6081 21216,6239 21216,6400 L 21216,6400 Z"/>
          <path fill="rgb(30,42,54)" stroke="none" d="M 21204,6400 C 21204,6558 21162,6714 21083,6851 21004,6989 20889,7103 20752,7182 20615,7262 20459,7303 20300,7303 20141,7303 19985,7262 19848,7182 19711,7103 19596,6989 19517,6851 19438,6714 19396,6558 19396,6400 19396,6241 19438,6085 19517,5948 19596,5810 19711,5696 19848,5617 19985,5537 20141,5496 20300,5496 20459,5496 20615,5537 20752,5617 20889,5696 21004,5810 21083,5948 21162,6085 21204,6241 21204,6400 L 21204,6400 Z"/>
          <path fill="rgb(31,43,56)" stroke="none" d="M 21192,6400 C 21192,6556 21151,6710 21073,6846 20994,6981 20882,7094 20746,7172 20610,7251 20457,7292 20300,7292 20143,7292 19990,7251 19854,7172 19718,7094 19606,6981 19527,6846 19449,6710 19408,6556 19408,6400 19408,6243 19449,6089 19527,5953 19606,5818 19718,5705 19854,5627 19990,5548 20143,5507 20300,5507 20457,5507 20610,5548 20746,5627 20882,5705 20994,5818 21073,5953 21151,6089 21192,6243 21192,6400 L 21192,6400 Z"/>
          <path fill="rgb(32,45,58)" stroke="none" d="M 21180,6400 C 21180,6554 21140,6706 21063,6840 20985,6974 20874,7085 20740,7162 20606,7239 20455,7280 20300,7280 20145,7280 19994,7239 19860,7162 19726,7085 19615,6974 19537,6840 19460,6706 19420,6554 19420,6400 19420,6245 19460,6093 19537,5959 19615,5825 19726,5714 19860,5637 19994,5560 20145,5519 20300,5519 20455,5519 20606,5560 20740,5637 20874,5714 20985,5825 21063,5959 21140,6093 21180,6245 21180,6400 L 21180,6400 Z"/>
          <path fill="rgb(33,46,60)" stroke="none" d="M 21169,6400 C 21169,6552 21129,6702 21052,6834 20976,6966 20866,7076 20734,7152 20602,7228 20452,7268 20300,7268 20148,7268 19998,7228 19866,7152 19734,7076 19624,6966 19548,6834 19471,6702 19431,6552 19431,6400 19431,6247 19471,6097 19548,5965 19624,5833 19734,5723 19866,5647 19998,5571 20148,5531 20300,5531 20452,5531 20602,5571 20734,5647 20866,5723 20976,5833 21052,5965 21129,6097 21169,6247 21169,6400 L 21169,6400 Z"/>
          <path fill="rgb(34,48,62)" stroke="none" d="M 21157,6400 C 21157,6550 21117,6698 21042,6828 20967,6958 20859,7066 20729,7142 20598,7217 20450,7257 20300,7257 20150,7257 20002,7217 19871,7142 19741,7066 19633,6958 19558,6828 19483,6698 19443,6550 19443,6400 19443,6249 19483,6101 19558,5971 19633,5841 19741,5733 19871,5657 20002,5582 20150,5542 20300,5542 20450,5542 20598,5582 20729,5657 20859,5733 20967,5841 21042,5971 21117,6101 21157,6249 21157,6400 L 21157,6400 Z"/>
          <path fill="rgb(35,49,64)" stroke="none" d="M 21145,6400 C 21145,6548 21106,6694 21032,6822 20958,6951 20851,7057 20723,7132 20594,7206 20448,7245 20300,7245 20152,7245 20006,7206 19877,7132 19749,7057 19642,6951 19568,6822 19494,6694 19455,6548 19455,6400 19455,6251 19494,6105 19568,5977 19642,5848 19749,5742 19877,5667 20006,5593 20152,5554 20300,5554 20448,5554 20594,5593 20723,5667 20851,5742 20958,5848 21032,5977 21106,6105 21145,6251 21145,6400 L 21145,6400 Z"/>
          <path fill="rgb(37,51,66)" stroke="none" d="M 21134,6400 C 21134,6546 21095,6690 21022,6816 20949,6943 20843,7048 20717,7121 20590,7195 20446,7233 20300,7233 20154,7233 20010,7195 19883,7121 19757,7048 19651,6943 19578,6816 19505,6690 19466,6546 19466,6400 19466,6253 19505,6109 19578,5983 19651,5856 19757,5751 19883,5678 20010,5604 20154,5566 20300,5566 20446,5566 20590,5604 20717,5678 20843,5751 20949,5856 21022,5983 21095,6109 21134,6253 21134,6400 L 21134,6400 Z"/>
          <path fill="rgb(38,52,68)" stroke="none" d="M 21122,6400 C 21122,6544 21084,6685 21012,6810 20940,6935 20836,7039 20711,7111 20586,7183 20444,7221 20300,7221 20156,7221 20014,7183 19889,7111 19764,7039 19660,6935 19588,6810 19516,6685 19478,6544 19478,6400 19478,6255 19516,6114 19588,5989 19660,5864 19764,5760 19889,5688 20014,5616 20156,5578 20300,5578 20444,5578 20586,5616 20711,5688 20836,5760 20940,5864 21012,5989 21084,6114 21122,6255 21122,6400 L 21122,6400 Z"/>
          <path fill="rgb(39,54,70)" stroke="none" d="M 21110,6400 C 21110,6542 21073,6681 21002,6805 20930,6928 20828,7030 20705,7101 20582,7172 20442,7210 20300,7210 20158,7210 20018,7172 19895,7101 19772,7030 19670,6928 19598,6805 19527,6681 19490,6542 19490,6400 19490,6257 19527,6118 19598,5994 19670,5871 19772,5769 19895,5698 20018,5627 20158,5589 20300,5589 20442,5589 20582,5627 20705,5698 20828,5769 20930,5871 21002,5994 21073,6118 21110,6257 21110,6400 L 21110,6400 Z"/>
          <path fill="rgb(40,56,72)" stroke="none" d="M 21098,6400 C 21098,6540 21061,6677 20991,6799 20921,6920 20821,7021 20699,7091 20578,7161 20440,7198 20300,7198 20160,7198 20022,7161 19901,7091 19779,7021 19679,6920 19609,6799 19539,6677 19502,6540 19502,6400 19502,6259 19539,6122 19609,6000 19679,5879 19779,5778 19901,5708 20022,5638 20160,5601 20300,5601 20440,5601 20578,5638 20699,5708 20821,5778 20921,5879 20991,6000 21061,6122 21098,6259 21098,6400 L 21098,6400 Z"/>
          <path fill="rgb(41,57,74)" stroke="none" d="M 21087,6400 C 21087,6538 21050,6673 20981,6793 20912,6912 20813,7012 20693,7081 20574,7150 20438,7186 20300,7186 20162,7186 20026,7150 19907,7081 19787,7012 19688,6912 19619,6793 19550,6673 19513,6538 19513,6400 19513,6261 19550,6126 19619,6006 19688,5887 19787,5787 19907,5718 20026,5649 20162,5613 20300,5613 20438,5613 20574,5649 20693,5718 20813,5787 20912,5887 20981,6006 21050,6126 21087,6261 21087,6400 L 21087,6400 Z"/>
          <path fill="rgb(42,59,76)" stroke="none" d="M 21075,6400 C 21075,6536 21039,6669 20971,6787 20903,6905 20805,7003 20687,7071 20570,7139 20436,7174 20300,7174 20164,7174 20030,7139 19913,7071 19795,7003 19697,6905 19629,6787 19561,6669 19525,6536 19525,6400 19525,6263 19561,6130 19629,6012 19697,5894 19795,5796 19913,5728 20030,5660 20164,5625 20300,5625 20436,5625 20570,5660 20687,5728 20805,5796 20903,5894 20971,6012 21039,6130 21075,6263 21075,6400 L 21075,6400 Z"/>
          <path fill="rgb(43,60,78)" stroke="none" d="M 21063,6400 C 21063,6533 21028,6665 20961,6781 20894,6897 20798,6993 20682,7060 20566,7127 20434,7163 20300,7163 20166,7163 20034,7127 19918,7060 19802,6993 19706,6897 19639,6781 19572,6665 19537,6533 19537,6400 19537,6266 19572,6134 19639,6018 19706,5902 19802,5806 19918,5739 20034,5672 20166,5636 20300,5636 20434,5636 20566,5672 20682,5739 20798,5806 20894,5902 20961,6018 21028,6134 21063,6266 21063,6400 L 21063,6400 Z"/>
          <path fill="rgb(44,62,80)" stroke="none" d="M 21051,6400 C 21051,6531 21017,6661 20951,6775 20885,6889 20790,6984 20676,7050 20561,7116 20432,7151 20300,7151 20168,7151 20039,7116 19924,7050 19810,6984 19715,6889 19649,6775 19583,6661 19549,6531 19549,6400 19549,6268 19583,6138 19649,6024 19715,5910 19810,5815 19924,5749 20039,5683 20168,5648 20300,5648 20432,5648 20561,5683 20676,5749 20790,5815 20885,5910 20951,6024 21017,6138 21051,6268 21051,6400 L 21051,6400 Z"/>
          <path fill="rgb(45,63,82)" stroke="none" d="M 21040,6400 C 21040,6529 21005,6657 20941,6769 20876,6882 20782,6975 20670,7040 20557,7105 20430,7139 20300,7139 20170,7139 20043,7105 19930,7040 19818,6975 19724,6882 19659,6769 19595,6657 19560,6529 19560,6400 19560,6270 19595,6142 19659,6030 19724,5917 19818,5824 19930,5759 20043,5694 20170,5660 20300,5660 20430,5660 20557,5694 20670,5759 20782,5824 20876,5917 20941,6030 21005,6142 21040,6270 21040,6400 L 21040,6400 Z"/>
          <path fill="rgb(46,65,84)" stroke="none" d="M 21028,6400 C 21028,6527 20994,6653 20930,6763 20866,6874 20775,6966 20664,7030 20553,7094 20428,7127 20300,7127 20172,7127 20047,7094 19936,7030 19825,6966 19734,6874 19670,6763 19606,6653 19572,6527 19572,6400 19572,6272 19606,6146 19670,6036 19734,5925 19825,5833 19936,5769 20047,5705 20172,5672 20300,5672 20428,5672 20553,5705 20664,5769 20775,5833 20866,5925 20930,6036 20994,6146 21028,6272 21028,6400 L 21028,6400 Z"/>
          <path fill="rgb(48,66,86)" stroke="none" d="M 21016,6400 C 21016,6525 20983,6649 20920,6758 20857,6866 20767,6957 20658,7020 20549,7083 20426,7116 20300,7116 20174,7116 20051,7083 19942,7020 19833,6957 19743,6866 19680,6758 19617,6649 19584,6525 19584,6400 19584,6274 19617,6150 19680,6041 19743,5933 19833,5842 19942,5779 20051,5716 20174,5683 20300,5683 20426,5683 20549,5716 20658,5779 20767,5842 20857,5933 20920,6041 20983,6150 21016,6274 21016,6400 L 21016,6400 Z"/>
          <path fill="rgb(49,68,88)" stroke="none" d="M 21004,6400 C 21004,6523 20972,6645 20910,6752 20848,6859 20759,6948 20652,7010 20545,7071 20424,7104 20300,7104 20176,7104 20055,7071 19948,7010 19841,6948 19752,6859 19690,6752 19628,6645 19596,6523 19596,6400 19596,6276 19628,6154 19690,6047 19752,5940 19841,5851 19948,5789 20055,5728 20176,5695 20300,5695 20424,5695 20545,5728 20652,5789 20759,5851 20848,5940 20910,6047 20972,6154 21004,6276 21004,6400 L 21004,6400 Z"/>
          <path fill="rgb(50,69,90)" stroke="none" d="M 20993,6400 C 20993,6521 20961,6641 20900,6746 20839,6851 20752,6939 20646,6999 20541,7060 20422,7092 20300,7092 20178,7092 20059,7060 19954,6999 19848,6939 19761,6851 19700,6746 19639,6641 19607,6521 19607,6400 19607,6278 19639,6158 19700,6053 19761,5948 19848,5860 19954,5800 20059,5739 20178,5707 20300,5707 20422,5707 20541,5739 20646,5800 20752,5860 20839,5948 20900,6053 20961,6158 20993,6278 20993,6400 L 20993,6400 Z"/>
          <path fill="rgb(51,71,92)" stroke="none" d="M 20981,6400 C 20981,6519 20949,6636 20890,6740 20830,6843 20744,6929 20640,6989 20537,7049 20420,7080 20300,7080 20180,7080 20063,7049 19960,6989 19856,6929 19770,6843 19710,6740 19651,6636 19619,6519 19619,6400 19619,6280 19651,6163 19710,6059 19770,5956 19856,5870 19960,5810 20063,5750 20180,5719 20300,5719 20420,5719 20537,5750 20640,5810 20744,5870 20830,5956 20890,6059 20949,6163 20981,6280 20981,6400 L 20981,6400 Z"/>
          <path fill="rgb(52,73,94)" stroke="none" d="M 20969,6400 C 20969,6517 20938,6632 20880,6734 20821,6836 20736,6920 20635,6979 20533,7038 20417,7069 20300,7069 20183,7069 20067,7038 19965,6979 19864,6920 19779,6836 19720,6734 19662,6632 19631,6517 19631,6400 19631,6282 19662,6167 19720,6065 19779,5963 19864,5879 19965,5820 20067,5761 20183,5730 20300,5730 20417,5730 20533,5761 20635,5820 20736,5879 20821,5963 20880,6065 20938,6167 20969,6282 20969,6400 L 20969,6400 Z"/>
          <path fill="rgb(53,74,96)" stroke="none" d="M 20957,6400 C 20957,6515 20927,6628 20869,6728 20812,6828 20729,6911 20629,6969 20529,7027 20415,7057 20300,7057 20185,7057 20071,7027 19971,6969 19871,6911 19788,6828 19731,6728 19673,6628 19643,6515 19643,6400 19643,6284 19673,6171 19731,6071 19788,5971 19871,5888 19971,5830 20071,5772 20185,5742 20300,5742 20415,5742 20529,5772 20629,5830 20729,5888 20812,5971 20869,6071 20927,6171 20957,6284 20957,6400 L 20957,6400 Z"/>
          <path fill="rgb(54,76,98)" stroke="none" d="M 20946,6400 C 20946,6513 20916,6624 20859,6722 20803,6821 20721,6902 20623,6959 20525,7015 20413,7045 20300,7045 20187,7045 20075,7015 19977,6959 19879,6902 19797,6821 19741,6722 19684,6624 19654,6513 19654,6400 19654,6286 19684,6175 19741,6077 19797,5978 19879,5897 19977,5840 20075,5784 20187,5754 20300,5754 20413,5754 20525,5784 20623,5840 20721,5897 20803,5978 20859,6077 20916,6175 20946,6286 20946,6400 L 20946,6400 Z"/>
          <path fill="rgb(55,77,100)" stroke="none" d="M 20934,6400 C 20934,6511 20905,6620 20849,6716 20793,6813 20713,6893 20617,6949 20521,7004 20411,7033 20300,7033 20189,7033 20079,7004 19983,6949 19887,6893 19807,6813 19751,6716 19695,6620 19666,6511 19666,6400 19666,6288 19695,6179 19751,6083 19807,5986 19887,5906 19983,5850 20079,5795 20189,5766 20300,5766 20411,5766 20521,5795 20617,5850 20713,5906 20793,5986 20849,6083 20905,6179 20934,6288 20934,6400 L 20934,6400 Z"/>
          <path fill="rgb(56,79,102)" stroke="none" d="M 20922,6400 C 20922,6509 20893,6616 20839,6711 20784,6805 20706,6884 20611,6938 20517,6993 20409,7022 20300,7022 20191,7022 20083,6993 19989,6938 19894,6884 19816,6805 19761,6711 19707,6616 19678,6509 19678,6400 19678,6290 19707,6183 19761,6088 19816,5994 19894,5915 19989,5861 20083,5806 20191,5777 20300,5777 20409,5777 20517,5806 20611,5861 20706,5915 20784,5994 20839,6088 20893,6183 20922,6290 20922,6400 L 20922,6400 Z"/>
          <path fill="rgb(58,80,105)" stroke="none" d="M 20910,6400 C 20910,6507 20882,6612 20829,6705 20775,6798 20698,6875 20605,6928 20512,6982 20407,7010 20300,7010 20193,7010 20088,6982 19995,6928 19902,6875 19825,6798 19771,6705 19718,6612 19690,6507 19690,6400 19690,6292 19718,6187 19771,6094 19825,6001 19902,5924 19995,5871 20088,5817 20193,5789 20300,5789 20407,5789 20512,5817 20605,5871 20698,5924 20775,6001 20829,6094 20882,6187 20910,6292 20910,6400 L 20910,6400 Z"/>
          <path fill="rgb(59,82,107)" stroke="none" d="M 20899,6400 C 20899,6505 20871,6608 20819,6699 20766,6790 20690,6865 20599,6918 20508,6971 20405,6998 20300,6998 20195,6998 20092,6971 20001,6918 19910,6865 19834,6790 19781,6699 19729,6608 19701,6505 19701,6400 19701,6294 19729,6191 19781,6100 19834,6009 19910,5934 20001,5881 20092,5828 20195,5801 20300,5801 20405,5801 20508,5828 20599,5881 20690,5934 20766,6009 20819,6100 20871,6191 20899,6294 20899,6400 L 20899,6400 Z"/>
          <path fill="rgb(60,83,109)" stroke="none" d="M 20887,6400 C 20887,6503 20860,6604 20808,6693 20757,6782 20683,6856 20593,6908 20504,6959 20403,6986 20300,6986 20197,6986 20096,6959 20007,6908 19917,6856 19843,6782 19792,6693 19740,6604 19713,6503 19713,6400 19713,6296 19740,6195 19792,6106 19843,6017 19917,5943 20007,5891 20096,5840 20197,5813 20300,5813 20403,5813 20504,5840 20593,5891 20683,5943 20757,6017 20808,6106 20860,6195 20887,6296 20887,6400 L 20887,6400 Z"/>
          <path fill="rgb(61,85,111)" stroke="none" d="M 20875,6400 C 20875,6500 20849,6600 20798,6687 20748,6775 20675,6847 20588,6898 20500,6948 20401,6975 20300,6975 20199,6975 20100,6948 20012,6898 19925,6847 19852,6775 19802,6687 19751,6600 19725,6500 19725,6400 19725,6299 19751,6199 19802,6112 19852,6024 19925,5952 20012,5901 20100,5851 20199,5824 20300,5824 20401,5824 20500,5851 20588,5901 20675,5952 20748,6024 20798,6112 20849,6199 20875,6299 20875,6400 L 20875,6400 Z"/>
          <path fill="rgb(62,86,113)" stroke="none" d="M 20864,6400 C 20864,6498 20837,6596 20788,6681 20739,6767 20667,6838 20582,6888 20496,6937 20399,6963 20300,6963 20201,6963 20104,6937 20018,6888 19933,6838 19861,6767 19812,6681 19763,6596 19736,6498 19736,6400 19736,6301 19763,6203 19812,6118 19861,6032 19933,5961 20018,5911 20104,5862 20201,5836 20300,5836 20399,5836 20496,5862 20582,5911 20667,5961 20739,6032 20788,6118 20837,6203 20864,6301 20864,6400 L 20864,6400 Z"/>
          <path fill="rgb(63,88,115)" stroke="none" d="M 20852,6400 C 20852,6496 20826,6592 20778,6675 20729,6759 20660,6829 20576,6877 20492,6926 20397,6951 20300,6951 20203,6951 20108,6926 20024,6877 19940,6829 19871,6759 19822,6675 19774,6592 19748,6496 19748,6400 19748,6303 19774,6207 19822,6124 19871,6040 19940,5970 20024,5922 20108,5873 20203,5848 20300,5848 20397,5848 20492,5873 20576,5922 20660,5970 20729,6040 20778,6124 20826,6207 20852,6303 20852,6400 L 20852,6400 Z"/>
          <path fill="rgb(64,90,117)" stroke="none" d="M 20840,6400 C 20840,6494 20815,6587 20768,6670 20720,6752 20652,6820 20570,6867 20488,6915 20395,6940 20300,6940 20205,6940 20112,6915 20030,6867 19948,6820 19880,6752 19832,6670 19785,6587 19760,6494 19760,6400 19760,6305 19785,6212 19832,6129 19880,6047 19948,5979 20030,5932 20112,5884 20205,5859 20300,5859 20395,5859 20488,5884 20570,5932 20652,5979 20720,6047 20768,6129 20815,6212 20840,6305 20840,6400 L 20840,6400 Z"/>
          <path fill="rgb(65,91,119)" stroke="none" d="M 20828,6400 C 20828,6492 20804,6583 20758,6664 20711,6744 20644,6811 20564,6857 20484,6903 20393,6928 20300,6928 20207,6928 20116,6903 20036,6857 19956,6811 19889,6744 19842,6664 19796,6583 19772,6492 19772,6400 19772,6307 19796,6216 19842,6135 19889,6055 19956,5988 20036,5942 20116,5896 20207,5871 20300,5871 20393,5871 20484,5896 20564,5942 20644,5988 20711,6055 20758,6135 20804,6216 20828,6307 20828,6400 L 20828,6400 Z"/>
          <path fill="rgb(66,93,121)" stroke="none" d="M 20817,6400 C 20817,6490 20793,6579 20747,6658 20702,6736 20637,6802 20558,6847 20480,6892 20391,6916 20300,6916 20209,6916 20120,6892 20042,6847 19963,6802 19898,6736 19853,6658 19807,6579 19783,6490 19783,6400 19783,6309 19807,6220 19853,6141 19898,6063 19963,5997 20042,5952 20120,5907 20209,5883 20300,5883 20391,5883 20480,5907 20558,5952 20637,5997 20702,6063 20747,6141 20793,6220 20817,6309 20817,6400 L 20817,6400 Z"/>
          <path fill="rgb(68,94,123)" stroke="none" d="M 20805,6400 C 20805,6488 20781,6575 20737,6652 20693,6729 20629,6792 20552,6837 20476,6881 20389,6904 20300,6904 20211,6904 20124,6881 20048,6837 19971,6792 19907,6729 19863,6652 19819,6575 19795,6488 19795,6400 19795,6311 19819,6224 19863,6147 19907,6070 19971,6007 20048,5962 20124,5918 20211,5895 20300,5895 20389,5895 20476,5918 20552,5962 20629,6007 20693,6070 20737,6147 20781,6224 20805,6311 20805,6400 L 20805,6400 Z"/>
          <path fill="rgb(69,96,125)" stroke="none" d="M 20793,6400 C 20793,6486 20770,6571 20727,6646 20684,6721 20621,6783 20547,6827 20472,6870 20387,6893 20300,6893 20213,6893 20128,6870 20053,6827 19979,6783 19916,6721 19873,6646 19830,6571 19807,6486 19807,6400 19807,6313 19830,6228 19873,6153 19916,6078 19979,6016 20053,5972 20128,5929 20213,5906 20300,5906 20387,5906 20472,5929 20547,5972 20621,6016 20684,6078 20727,6153 20770,6228 20793,6313 20793,6400 L 20793,6400 Z"/>
          <path fill="rgb(70,97,127)" stroke="none" d="M 20781,6400 C 20781,6484 20759,6567 20717,6640 20675,6713 20614,6774 20541,6816 20467,6859 20384,6881 20300,6881 20216,6881 20133,6859 20059,6816 19986,6774 19925,6713 19883,6640 19841,6567 19819,6484 19819,6400 19819,6315 19841,6232 19883,6159 19925,6086 19986,6025 20059,5983 20133,5940 20216,5918 20300,5918 20384,5918 20467,5940 20541,5983 20614,6025 20675,6086 20717,6159 20759,6232 20781,6315 20781,6400 L 20781,6400 Z"/>
          <path fill="rgb(71,99,129)" stroke="none" d="M 20770,6400 C 20770,6482 20748,6563 20707,6634 20665,6706 20606,6765 20535,6806 20463,6847 20382,6869 20300,6869 20218,6869 20137,6847 20065,6806 19994,6765 19935,6706 19893,6634 19852,6563 19830,6482 19830,6400 19830,6317 19852,6236 19893,6165 19935,6093 19994,6034 20065,5993 20137,5952 20218,5930 20300,5930 20382,5930 20463,5952 20535,5993 20606,6034 20665,6093 20707,6165 20748,6236 20770,6317 20770,6400 L 20770,6400 Z"/>
          <path fill="rgb(72,100,131)" stroke="none" d="M 20758,6400 C 20758,6480 20737,6559 20697,6628 20656,6698 20599,6756 20529,6796 20459,6836 20380,6857 20300,6857 20220,6857 20141,6836 20071,6796 20001,6756 19944,6698 19903,6628 19863,6559 19842,6480 19842,6400 19842,6319 19863,6240 19903,6171 19944,6101 20001,6043 20071,6003 20141,5963 20220,5942 20300,5942 20380,5942 20459,5963 20529,6003 20599,6043 20656,6101 20697,6171 20737,6240 20758,6319 20758,6400 L 20758,6400 Z"/>
          <path fill="rgb(73,102,133)" stroke="none" d="M 20746,6400 C 20746,6478 20726,6555 20686,6623 20647,6690 20591,6747 20523,6786 20455,6825 20378,6846 20300,6846 20222,6846 20145,6825 20077,6786 20009,6747 19953,6690 19914,6623 19874,6555 19854,6478 19854,6400 19854,6321 19874,6244 19914,6176 19953,6109 20009,6052 20077,6013 20145,5974 20222,5953 20300,5953 20378,5953 20455,5974 20523,6013 20591,6052 20647,6109 20686,6176 20726,6244 20746,6321 20746,6400 L 20746,6400 Z"/>
          <path fill="rgb(74,103,135)" stroke="none" d="M 20734,6400 C 20734,6476 20714,6551 20676,6617 20638,6683 20583,6738 20517,6776 20451,6814 20376,6834 20300,6834 20224,6834 20149,6814 20083,6776 20017,6738 19962,6683 19924,6617 19886,6551 19866,6476 19866,6400 19866,6323 19886,6248 19924,6182 19962,6116 20017,6061 20083,6023 20149,5985 20224,5965 20300,5965 20376,5965 20451,5985 20517,6023 20583,6061 20638,6116 20676,6182 20714,6248 20734,6323 20734,6400 L 20734,6400 Z"/>
          <path fill="rgb(75,105,137)" stroke="none" d="M 20723,6400 C 20723,6474 20703,6547 20666,6611 20629,6675 20576,6728 20511,6766 20447,6803 20374,6822 20300,6822 20226,6822 20153,6803 20089,6766 20024,6728 19971,6675 19934,6611 19897,6547 19877,6474 19877,6400 19877,6325 19897,6252 19934,6188 19971,6124 20024,6071 20089,6033 20153,5996 20226,5977 20300,5977 20374,5977 20447,5996 20511,6033 20576,6071 20629,6124 20666,6188 20703,6252 20723,6325 20723,6400 L 20723,6400 Z"/>
          <path fill="rgb(76,107,139)" stroke="none" d="M 20711,6400 C 20711,6472 20692,6542 20656,6605 20620,6667 20568,6719 20505,6755 20443,6791 20372,6810 20300,6810 20228,6810 20157,6791 20095,6755 20032,6719 19980,6667 19944,6605 19908,6542 19889,6472 19889,6400 19889,6327 19908,6257 19944,6194 19980,6132 20032,6080 20095,6044 20157,6008 20228,5989 20300,5989 20372,5989 20443,6008 20505,6044 20568,6080 20620,6132 20656,6194 20692,6257 20711,6327 20711,6400 L 20711,6400 Z"/>
          <path fill="rgb(77,108,141)" stroke="none" d="M 20699,6400 C 20699,6470 20681,6538 20646,6599 20611,6660 20560,6710 20500,6745 20439,6780 20370,6799 20300,6799 20230,6799 20161,6780 20100,6745 20040,6710 19989,6660 19954,6599 19919,6538 19901,6470 19901,6400 19901,6329 19919,6261 19954,6200 19989,6139 20040,6089 20100,6054 20161,6019 20230,6000 20300,6000 20370,6000 20439,6019 20500,6054 20560,6089 20611,6139 20646,6200 20681,6261 20699,6329 20699,6400 L 20699,6400 Z"/>
          <path fill="rgb(79,110,143)" stroke="none" d="M 20687,6400 C 20687,6468 20670,6534 20636,6593 20602,6652 20553,6701 20494,6735 20435,6769 20368,6787 20300,6787 20232,6787 20165,6769 20106,6735 20047,6701 19998,6652 19964,6593 19930,6534 19913,6468 19913,6400 19913,6331 19930,6265 19964,6206 19998,6147 20047,6098 20106,6064 20165,6030 20232,6012 20300,6012 20368,6012 20435,6030 20494,6064 20553,6098 20602,6147 20636,6206 20670,6265 20687,6331 20687,6400 L 20687,6400 Z"/>
          <path fill="rgb(80,111,145)" stroke="none" d="M 20676,6400 C 20676,6465 20658,6530 20625,6587 20592,6644 20545,6692 20488,6725 20431,6758 20366,6775 20300,6775 20234,6775 20169,6758 20112,6725 20055,6692 20008,6644 19975,6587 19942,6530 19924,6465 19924,6400 19924,6334 19942,6269 19975,6212 20008,6155 20055,6107 20112,6074 20169,6041 20234,6024 20300,6024 20366,6024 20431,6041 20488,6074 20545,6107 20592,6155 20625,6212 20658,6269 20676,6334 20676,6400 L 20676,6400 Z"/>
          <path fill="rgb(81,113,147)" stroke="none" d="M 20664,6400 C 20664,6463 20647,6526 20615,6581 20583,6637 20537,6683 20482,6715 20427,6747 20364,6763 20300,6763 20236,6763 20173,6747 20118,6715 20063,6683 20017,6637 19985,6581 19953,6526 19936,6463 19936,6400 19936,6336 19953,6273 19985,6218 20017,6162 20063,6116 20118,6084 20173,6052 20236,6036 20300,6036 20364,6036 20427,6052 20482,6084 20537,6116 20583,6162 20615,6218 20647,6273 20664,6336 20664,6400 L 20664,6400 Z"/>
          <path fill="rgb(82,114,149)" stroke="none" d="M 20652,6400 C 20652,6461 20636,6522 20605,6576 20574,6629 20530,6674 20476,6705 20423,6735 20362,6752 20300,6752 20238,6752 20177,6735 20124,6705 20070,6674 20026,6629 19995,6576 19964,6522 19948,6461 19948,6400 19948,6338 19964,6277 19995,6223 20026,6170 20070,6125 20124,6094 20177,6064 20238,6047 20300,6047 20362,6047 20423,6064 20476,6094 20530,6125 20574,6170 20605,6223 20636,6277 20652,6338 20652,6400 L 20652,6400 Z"/>
          <path fill="rgb(83,116,151)" stroke="none" d="M 20640,6400 C 20640,6459 20625,6518 20595,6570 20565,6621 20522,6664 20470,6694 20418,6724 20360,6740 20300,6740 20240,6740 20182,6724 20130,6694 20078,6664 20035,6621 20005,6570 19975,6518 19960,6459 19960,6400 19960,6340 19975,6281 20005,6229 20035,6178 20078,6135 20130,6105 20182,6075 20240,6059 20300,6059 20360,6059 20418,6075 20470,6105 20522,6135 20565,6178 20595,6229 20625,6281 20640,6340 20640,6400 L 20640,6400 Z"/>
          <path fill="rgb(84,117,153)" stroke="none" d="M 20629,6400 C 20629,6457 20614,6514 20585,6564 20556,6614 20514,6655 20464,6684 20414,6713 20358,6728 20300,6728 20242,6728 20186,6713 20136,6684 20086,6655 20044,6614 20015,6564 19986,6514 19971,6457 19971,6400 19971,6342 19986,6285 20015,6235 20044,6185 20086,6144 20136,6115 20186,6086 20242,6071 20300,6071 20358,6071 20414,6086 20464,6115 20514,6144 20556,6185 20585,6235 20614,6285 20629,6342 20629,6400 L 20629,6400 Z"/>
          <path fill="rgb(85,119,155)" stroke="none" d="M 20617,6400 C 20617,6455 20602,6510 20575,6558 20547,6606 20507,6646 20458,6674 20410,6702 20356,6716 20300,6716 20244,6716 20190,6702 20142,6674 20093,6646 20053,6606 20025,6558 19998,6510 19983,6455 19983,6400 19983,6344 19998,6289 20025,6241 20053,6193 20093,6153 20142,6125 20190,6097 20244,6083 20300,6083 20356,6083 20410,6097 20458,6125 20507,6153 20547,6193 20575,6241 20602,6289 20617,6344 20617,6400 L 20617,6400 Z"/>
          <path fill="rgb(86,120,157)" stroke="none" d="M 20605,6400 C 20605,6453 20591,6506 20564,6552 20538,6599 20499,6637 20453,6664 20406,6691 20354,6705 20300,6705 20246,6705 20194,6691 20147,6664 20101,6637 20062,6599 20036,6552 20009,6506 19995,6453 19995,6400 19995,6346 20009,6293 20036,6247 20062,6200 20101,6162 20147,6135 20194,6108 20246,6094 20300,6094 20354,6094 20406,6108 20453,6135 20499,6162 20538,6200 20564,6247 20591,6293 20605,6346 20605,6400 L 20605,6400 Z"/>
          <path fill="rgb(87,122,159)" stroke="none" d="M 20593,6400 C 20593,6451 20580,6502 20554,6546 20528,6591 20491,6628 20447,6654 20402,6679 20352,6693 20300,6693 20248,6693 20198,6679 20153,6654 20109,6628 20072,6591 20046,6546 20020,6502 20007,6451 20007,6400 20007,6348 20020,6297 20046,6253 20072,6208 20109,6171 20153,6145 20198,6120 20248,6106 20300,6106 20352,6106 20402,6120 20447,6145 20491,6171 20528,6208 20554,6253 20580,6297 20593,6348 20593,6400 L 20593,6400 Z"/>
          <path fill="rgb(89,123,161)" stroke="none" d="M 20582,6400 C 20582,6449 20569,6498 20544,6540 20519,6583 20484,6619 20441,6644 20398,6668 20349,6681 20300,6681 20251,6681 20202,6668 20159,6644 20116,6619 20081,6583 20056,6540 20031,6498 20018,6449 20018,6400 20018,6350 20031,6301 20056,6259 20081,6216 20116,6180 20159,6155 20202,6131 20251,6118 20300,6118 20349,6118 20398,6131 20441,6155 20484,6180 20519,6216 20544,6259 20569,6301 20582,6350 20582,6400 L 20582,6400 Z"/>
          <path fill="rgb(90,125,163)" stroke="none" d="M 20570,6400 C 20570,6447 20558,6493 20534,6535 20510,6576 20476,6610 20435,6633 20394,6657 20347,6670 20300,6670 20253,6670 20206,6657 20165,6633 20124,6610 20090,6576 20066,6535 20042,6493 20030,6447 20030,6400 20030,6352 20042,6306 20066,6264 20090,6223 20124,6189 20165,6166 20206,6142 20253,6129 20300,6129 20347,6129 20394,6142 20435,6166 20476,6189 20510,6223 20534,6264 20558,6306 20570,6352 20570,6400 L 20570,6400 Z"/>
          <path fill="rgb(91,127,165)" stroke="none" d="M 20558,6400 C 20558,6445 20546,6489 20524,6529 20501,6568 20468,6601 20429,6623 20390,6646 20345,6658 20300,6658 20255,6658 20210,6646 20171,6623 20132,6601 20099,6568 20076,6529 20054,6489 20042,6445 20042,6400 20042,6354 20054,6310 20076,6270 20099,6231 20132,6198 20171,6176 20210,6153 20255,6141 20300,6141 20345,6141 20390,6153 20429,6176 20468,6198 20501,6231 20524,6270 20546,6310 20558,6354 20558,6400 L 20558,6400 Z"/>
          <path fill="rgb(92,128,167)" stroke="none" d="M 20547,6400 C 20547,6443 20535,6485 20514,6523 20492,6560 20461,6591 20423,6613 20386,6635 20343,6646 20300,6646 20257,6646 20214,6635 20177,6613 20139,6591 20108,6560 20086,6523 20065,6485 20053,6443 20053,6400 20053,6356 20065,6314 20086,6276 20108,6239 20139,6208 20177,6186 20214,6164 20257,6153 20300,6153 20343,6153 20386,6164 20423,6186 20461,6208 20492,6239 20514,6276 20535,6314 20547,6356 20547,6400 L 20547,6400 Z"/>
          <path fill="rgb(93,130,169)" stroke="none" d="M 20535,6400 C 20535,6441 20524,6481 20503,6517 20483,6553 20453,6582 20417,6603 20382,6623 20341,6634 20300,6634 20259,6634 20218,6623 20183,6603 20147,6582 20117,6553 20097,6517 20076,6481 20065,6441 20065,6400 20065,6358 20076,6318 20097,6282 20117,6246 20147,6217 20183,6196 20218,6176 20259,6165 20300,6165 20341,6165 20382,6176 20417,6196 20453,6217 20483,6246 20503,6282 20524,6318 20535,6358 20535,6400 L 20535,6400 Z"/>
          <path fill="rgb(94,131,171)" stroke="none" d="M 20523,6400 C 20523,6439 20513,6477 20493,6511 20474,6545 20445,6573 20412,6593 20378,6612 20339,6623 20300,6623 20261,6623 20222,6612 20188,6593 20155,6573 20126,6545 20107,6511 20087,6477 20077,6439 20077,6400 20077,6360 20087,6322 20107,6288 20126,6254 20155,6226 20188,6206 20222,6187 20261,6176 20300,6176 20339,6176 20378,6187 20412,6206 20445,6226 20474,6254 20493,6288 20513,6322 20523,6360 20523,6400 L 20523,6400 Z"/>
          <path fill="rgb(95,133,173)" stroke="none" d="M 20511,6400 C 20511,6437 20502,6473 20483,6505 20464,6537 20438,6564 20406,6583 20374,6601 20337,6611 20300,6611 20263,6611 20226,6601 20194,6583 20162,6564 20136,6537 20117,6505 20098,6473 20089,6437 20089,6400 20089,6362 20098,6326 20117,6294 20136,6262 20162,6235 20194,6216 20226,6198 20263,6188 20300,6188 20337,6188 20374,6198 20406,6216 20438,6235 20464,6262 20483,6294 20502,6326 20511,6362 20511,6400 L 20511,6400 Z"/>
          <path fill="rgb(96,134,175)" stroke="none" d="M 20500,6400 C 20500,6435 20490,6469 20473,6499 20455,6530 20430,6555 20400,6572 20369,6590 20335,6599 20300,6599 20265,6599 20231,6590 20200,6572 20170,6555 20145,6530 20127,6499 20110,6469 20100,6435 20100,6400 20100,6364 20110,6330 20127,6300 20145,6269 20170,6244 20200,6227 20231,6209 20265,6200 20300,6200 20335,6200 20369,6209 20400,6227 20430,6244 20455,6269 20473,6300 20490,6330 20500,6364 20500,6400 L 20500,6400 Z"/>
          <path fill="rgb(97,136,177)" stroke="none" d="M 20488,6400 C 20488,6432 20479,6465 20463,6493 20446,6522 20422,6546 20394,6562 20365,6579 20333,6587 20300,6587 20267,6587 20235,6579 20206,6562 20178,6546 20154,6522 20137,6493 20121,6465 20112,6432 20112,6400 20112,6367 20121,6334 20137,6306 20154,6277 20178,6253 20206,6237 20235,6220 20267,6212 20300,6212 20333,6212 20365,6220 20394,6237 20422,6253 20446,6277 20463,6306 20479,6334 20488,6367 20488,6400 L 20488,6400 Z"/>
          <path fill="rgb(99,137,179)" stroke="none" d="M 20476,6400 C 20476,6430 20468,6461 20453,6488 20437,6514 20415,6537 20388,6552 20361,6567 20331,6576 20300,6576 20269,6576 20239,6567 20212,6552 20185,6537 20163,6514 20147,6488 20132,6461 20124,6430 20124,6400 20124,6369 20132,6338 20147,6311 20163,6285 20185,6262 20212,6247 20239,6232 20269,6223 20300,6223 20331,6223 20361,6232 20388,6247 20415,6262 20437,6285 20453,6311 20468,6338 20476,6369 20476,6400 L 20476,6400 Z"/>
          <path fill="rgb(100,139,181)" stroke="none" d="M 20464,6400 C 20464,6428 20457,6457 20442,6482 20428,6507 20407,6527 20382,6542 20357,6556 20329,6564 20300,6564 20271,6564 20243,6556 20218,6542 20193,6527 20172,6507 20158,6482 20143,6457 20136,6428 20136,6400 20136,6371 20143,6342 20158,6317 20172,6292 20193,6272 20218,6257 20243,6243 20271,6235 20300,6235 20329,6235 20357,6243 20382,6257 20407,6272 20428,6292 20442,6317 20457,6342 20464,6371 20464,6400 L 20464,6400 Z"/>
          <path fill="rgb(101,140,183)" stroke="none" d="M 20453,6400 C 20453,6426 20446,6453 20432,6476 20419,6499 20400,6518 20376,6532 20353,6545 20327,6552 20300,6552 20273,6552 20247,6545 20224,6532 20200,6518 20181,6499 20168,6476 20154,6453 20147,6426 20147,6400 20147,6373 20154,6346 20168,6323 20181,6300 20200,6281 20224,6267 20247,6254 20273,6247 20300,6247 20327,6247 20353,6254 20376,6267 20400,6281 20419,6300 20432,6323 20446,6346 20453,6373 20453,6400 L 20453,6400 Z"/>
          <path fill="rgb(102,142,185)" stroke="none" d="M 20441,6400 C 20441,6424 20434,6449 20422,6470 20410,6491 20392,6509 20370,6522 20349,6534 20325,6540 20300,6540 20275,6540 20251,6534 20230,6522 20208,6509 20190,6491 20178,6470 20166,6449 20159,6424 20159,6400 20159,6375 20166,6350 20178,6329 20190,6308 20208,6290 20230,6277 20251,6265 20275,6259 20300,6259 20325,6259 20349,6265 20370,6277 20392,6290 20410,6308 20422,6329 20434,6350 20441,6375 20441,6400 L 20441,6400 Z"/>
          <path fill="rgb(103,144,187)" stroke="none" d="M 20429,6400 C 20429,6422 20423,6444 20412,6464 20401,6484 20384,6500 20365,6511 20345,6523 20323,6529 20300,6529 20277,6529 20255,6523 20235,6511 20216,6500 20199,6484 20188,6464 20177,6444 20171,6422 20171,6400 20171,6377 20177,6355 20188,6335 20199,6315 20216,6299 20235,6288 20255,6276 20277,6270 20300,6270 20323,6270 20345,6276 20365,6288 20384,6299 20401,6315 20412,6335 20423,6355 20429,6377 20429,6400 L 20429,6400 Z"/>
          <path fill="rgb(104,145,189)" stroke="none" d="M 20417,6400 C 20417,6420 20412,6440 20402,6458 20391,6476 20377,6491 20359,6501 20341,6511 20321,6517 20300,6517 20279,6517 20259,6511 20241,6501 20223,6491 20209,6476 20198,6458 20188,6440 20183,6420 20183,6400 20183,6379 20188,6359 20198,6341 20209,6323 20223,6308 20241,6298 20259,6288 20279,6282 20300,6282 20321,6282 20341,6288 20359,6298 20377,6308 20391,6323 20402,6341 20412,6359 20417,6379 20417,6400 L 20417,6400 Z"/>
          <path fill="rgb(105,147,191)" stroke="none" d="M 20406,6400 C 20406,6418 20401,6436 20392,6452 20382,6468 20369,6482 20353,6491 20337,6500 20319,6505 20300,6505 20281,6505 20263,6500 20247,6491 20231,6482 20218,6468 20208,6452 20199,6436 20194,6418 20194,6400 20194,6381 20199,6363 20208,6347 20218,6331 20231,6317 20247,6308 20263,6299 20281,6294 20300,6294 20319,6294 20337,6299 20353,6308 20369,6317 20382,6331 20392,6347 20401,6363 20406,6381 20406,6400 L 20406,6400 Z"/>
          <path fill="rgb(106,148,193)" stroke="none" d="M 20394,6400 C 20394,6416 20390,6432 20381,6446 20373,6461 20361,6473 20347,6481 20333,6489 20316,6493 20300,6493 20284,6493 20267,6489 20253,6481 20239,6473 20227,6461 20219,6446 20210,6432 20206,6416 20206,6400 20206,6383 20210,6367 20219,6353 20227,6338 20239,6326 20253,6318 20267,6310 20284,6306 20300,6306 20316,6306 20333,6310 20347,6318 20361,6326 20373,6338 20381,6353 20390,6367 20394,6383 20394,6400 L 20394,6400 Z"/>
          <path fill="rgb(107,150,195)" stroke="none" d="M 20382,6400 C 20382,6414 20378,6428 20371,6441 20364,6453 20354,6463 20341,6471 20329,6478 20314,6482 20300,6482 20286,6482 20271,6478 20259,6471 20246,6463 20236,6453 20229,6441 20222,6428 20218,6414 20218,6400 20218,6385 20222,6371 20229,6358 20236,6346 20246,6336 20259,6328 20271,6321 20286,6317 20300,6317 20314,6317 20329,6321 20341,6328 20354,6336 20364,6346 20371,6358 20378,6371 20382,6385 20382,6400 L 20382,6400 Z"/>
          <path fill="rgb(108,151,197)" stroke="none" d="M 20370,6400 C 20370,6412 20367,6424 20361,6435 20355,6445 20346,6454 20335,6461 20325,6467 20312,6470 20300,6470 20288,6470 20275,6467 20265,6461 20254,6454 20245,6445 20239,6435 20233,6424 20230,6412 20230,6400 20230,6387 20233,6375 20239,6364 20245,6354 20254,6345 20265,6338 20275,6332 20288,6329 20300,6329 20312,6329 20325,6332 20335,6338 20346,6345 20355,6354 20361,6364 20367,6375 20370,6387 20370,6400 L 20370,6400 Z"/>
          <path fill="rgb(110,153,199)" stroke="none" d="M 20359,6400 C 20359,6410 20356,6420 20351,6429 20346,6438 20338,6445 20329,6450 20320,6455 20310,6458 20300,6458 20290,6458 20280,6455 20271,6450 20262,6445 20254,6438 20249,6429 20244,6420 20241,6410 20241,6400 20241,6389 20244,6379 20249,6370 20254,6361 20262,6354 20271,6349 20280,6344 20290,6341 20300,6341 20310,6341 20320,6344 20329,6349 20338,6354 20346,6361 20351,6370 20356,6379 20359,6389 20359,6400 L 20359,6400 Z"/>
          <path fill="rgb(111,154,201)" stroke="none" d="M 20347,6400 C 20347,6408 20345,6416 20341,6423 20337,6430 20331,6436 20323,6440 20316,6444 20308,6446 20300,6446 20292,6446 20284,6444 20277,6440 20269,6436 20263,6430 20259,6423 20255,6416 20253,6408 20253,6400 20253,6391 20255,6383 20259,6376 20263,6369 20269,6363 20277,6359 20284,6355 20292,6353 20300,6353 20308,6353 20316,6355 20323,6359 20331,6363 20337,6369 20341,6376 20345,6383 20347,6391 20347,6400 L 20347,6400 Z"/>
          <path fill="rgb(112,156,203)" stroke="none" d="M 20335,6400 C 20335,6406 20334,6412 20331,6417 20327,6422 20323,6427 20318,6430 20312,6433 20306,6435 20300,6435 20294,6435 20288,6433 20282,6430 20277,6427 20273,6422 20269,6417 20266,6412 20265,6406 20265,6400 20265,6393 20266,6387 20269,6382 20273,6377 20277,6372 20282,6369 20288,6366 20294,6364 20300,6364 20306,6364 20312,6366 20318,6369 20323,6372 20327,6377 20331,6382 20334,6387 20335,6393 20335,6400 L 20335,6400 Z"/>
          <path fill="rgb(113,157,205)" stroke="none" d="M 20323,6400 C 20323,6404 20322,6408 20320,6411 20318,6415 20315,6418 20312,6420 20308,6422 20304,6423 20300,6423 20296,6423 20292,6422 20288,6420 20285,6418 20282,6415 20280,6411 20278,6408 20277,6404 20277,6400 20277,6395 20278,6391 20280,6388 20282,6384 20285,6381 20288,6379 20292,6377 20296,6376 20300,6376 20304,6376 20308,6377 20312,6379 20315,6381 20318,6384 20320,6388 20322,6391 20323,6395 20323,6400 L 20323,6400 Z"/>
          <path fill="rgb(114,159,207)" stroke="none" d="M 20312,6400 C 20312,6402 20311,6404 20310,6405 20309,6407 20308,6409 20306,6410 20304,6411 20302,6411 20300,6411 20298,6411 20296,6411 20294,6410 20292,6409 20291,6407 20290,6405 20289,6404 20288,6402 20288,6400 20288,6397 20289,6395 20290,6394 20291,6392 20292,6390 20294,6389 20296,6388 20298,6388 20300,6388 20302,6388 20304,6388 20306,6389 20308,6390 20309,6392 20310,6394 20311,6395 20312,6397 20312,6400 L 20312,6400 Z"/>
         </g>
         <path fill="none" stroke="rgb(52,101,164)" d="M 20300,5698 C 19754,5698 19300,5777 19300,5873 L 19300,6924 C 19300,7020 19754,7100 20300,7100 20846,7100 21301,7020 21301,6924 L 21301,5873 C 21301,5777 20846,5698 20300,5698 Z"/>
         <defs>
          <clipPath id="clip_path_4" clipPathUnits="userSpaceOnUse">
           <path d="M 20300,5698 C 19754,5698 19300,5777 19300,5873 19300,5968 19754,6048 20300,6048 20846,6048 21301,5968 21301,5873 21301,5777 20846,5698 20300,5698 L 20300,5698 Z"/>
          </clipPath>
         </defs>
         <g clip-path="url(#clip_path_4)">
          <path fill="rgb(102,102,102)" stroke="none" d="M 19300,5698 L 21301,5698 21301,6048 19300,6048 19300,5698 Z"/>
          <path fill="rgb(103,104,104)" stroke="none" d="M 21501,6400 C 21501,6610 21446,6818 21340,7000 21235,7183 21083,7334 20901,7440 20718,7545 20511,7601 20300,7601 20089,7601 19882,7545 19699,7440 19517,7334 19365,7183 19260,7000 19154,6818 19099,6610 19099,6400 19099,6189 19154,5981 19260,5799 19365,5616 19517,5465 19699,5359 19882,5254 20089,5198 20300,5198 20511,5198 20718,5254 20901,5359 21083,5465 21235,5616 21340,5799 21446,5981 21501,6189 21501,6399 L 21501,6400 Z"/>
          <path fill="rgb(104,105,106)" stroke="none" d="M 21482,6400 C 21482,6607 21427,6811 21323,6990 21220,7170 21070,7319 20891,7423 20711,7526 20507,7581 20300,7581 20093,7581 19889,7526 19709,7423 19530,7319 19380,7170 19277,6990 19173,6811 19118,6607 19118,6400 19118,6192 19173,5988 19277,5809 19380,5629 19530,5480 19709,5376 19889,5273 20093,5218 20300,5218 20507,5218 20711,5273 20891,5376 21070,5480 21220,5629 21323,5809 21427,5988 21482,6192 21482,6399 L 21482,6400 Z"/>
          <path fill="rgb(105,107,108)" stroke="none" d="M 21462,6400 C 21462,6603 21408,6804 21306,6980 21204,7157 21058,7304 20881,7406 20704,7508 20504,7561 20300,7561 20096,7561 19896,7508 19719,7406 19542,7304 19396,7157 19294,6980 19192,6804 19138,6603 19138,6400 19138,6196 19192,5995 19294,5819 19396,5642 19542,5495 19719,5393 19896,5291 20096,5238 20300,5238 20504,5238 20704,5291 20881,5393 21058,5495 21204,5642 21306,5819 21408,5995 21462,6196 21462,6399 L 21462,6400 Z"/>
          <path fill="rgb(106,108,110)" stroke="none" d="M 21442,6400 C 21442,6600 21389,6797 21289,6971 21189,7144 21045,7288 20871,7389 20697,7489 20500,7542 20300,7542 20100,7542 19903,7489 19729,7389 19555,7288 19411,7144 19311,6971 19211,6797 19158,6600 19158,6400 19158,6199 19211,6002 19311,5828 19411,5655 19555,5511 19729,5410 19903,5310 20100,5257 20300,5257 20500,5257 20697,5310 20871,5410 21045,5511 21189,5655 21289,5828 21389,6002 21442,6199 21442,6399 L 21442,6400 Z"/>
          <path fill="rgb(107,110,112)" stroke="none" d="M 21422,6400 C 21422,6597 21371,6790 21272,6961 21174,7131 21032,7273 20861,7372 20691,7470 20497,7522 20300,7522 20103,7522 19909,7470 19739,7372 19568,7273 19426,7131 19328,6961 19229,6790 19178,6597 19178,6400 19178,6202 19229,6009 19328,5838 19426,5668 19568,5526 19739,5427 19909,5329 20103,5277 20300,5277 20497,5277 20691,5329 20861,5427 21032,5526 21174,5668 21272,5838 21371,6009 21422,6202 21422,6399 L 21422,6400 Z"/>
          <path fill="rgb(108,111,114)" stroke="none" d="M 21403,6400 C 21403,6593 21352,6783 21255,6951 21158,7119 21019,7258 20851,7355 20684,7451 20494,7502 20300,7502 20106,7502 19916,7451 19749,7355 19581,7258 19442,7119 19345,6951 19248,6783 19197,6593 19197,6400 19197,6206 19248,6016 19345,5848 19442,5680 19581,5541 19749,5444 19916,5348 20106,5297 20300,5297 20494,5297 20684,5348 20851,5444 21019,5541 21158,5680 21255,5848 21352,6016 21403,6206 21403,6399 L 21403,6400 Z"/>
          <path fill="rgb(109,113,116)" stroke="none" d="M 21383,6400 C 21383,6590 21333,6776 21238,6941 21143,7106 21006,7242 20842,7337 20677,7433 20490,7483 20300,7483 20110,7483 19923,7433 19758,7337 19594,7242 19457,7106 19362,6941 19267,6776 19217,6590 19217,6400 19217,6209 19267,6023 19362,5858 19457,5693 19594,5557 19758,5462 19923,5366 20110,5316 20300,5316 20490,5316 20677,5366 20842,5462 21006,5557 21143,5693 21238,5858 21333,6023 21383,6209 21383,6399 L 21383,6400 Z"/>
          <path fill="rgb(110,114,118)" stroke="none" d="M 21363,6400 C 21363,6586 21314,6770 21221,6931 21128,7093 20993,7227 20832,7320 20670,7414 20487,7463 20300,7463 20113,7463 19930,7414 19768,7320 19607,7227 19472,7093 19379,6931 19286,6770 19237,6586 19237,6400 19237,6213 19286,6029 19379,5868 19472,5706 19607,5572 19768,5479 19930,5385 20113,5336 20300,5336 20487,5336 20670,5385 20832,5479 20993,5572 21128,5706 21221,5868 21314,6029 21363,6213 21363,6399 L 21363,6400 Z"/>
          <path fill="rgb(111,116,120)" stroke="none" d="M 21344,6400 C 21344,6583 21295,6763 21204,6921 21112,7080 20981,7212 20822,7303 20663,7395 20483,7443 20300,7443 20117,7443 19937,7395 19778,7303 19619,7212 19488,7080 19396,6921 19305,6763 19256,6583 19256,6400 19256,6216 19305,6036 19396,5878 19488,5719 19619,5587 19778,5496 19937,5404 20117,5356 20300,5356 20483,5356 20663,5404 20822,5496 20981,5587 21112,5719 21204,5878 21295,6036 21344,6216 21344,6399 L 21344,6400 Z"/>
          <path fill="rgb(112,117,122)" stroke="none" d="M 21324,6400 C 21324,6579 21277,6756 21187,6912 21097,7067 20968,7196 20812,7286 20656,7376 20480,7424 20300,7424 20120,7424 19944,7376 19788,7286 19632,7196 19503,7067 19413,6912 19323,6756 19276,6579 19276,6400 19276,6220 19323,6043 19413,5887 19503,5732 19632,5603 19788,5513 19944,5423 20120,5375 20300,5375 20480,5375 20656,5423 20812,5513 20968,5603 21097,5732 21187,5887 21277,6043 21324,6220 21324,6399 L 21324,6400 Z"/>
          <path fill="rgb(113,119,124)" stroke="none" d="M 21304,6400 C 21304,6576 21258,6749 21170,6902 21082,7054 20955,7181 20802,7269 20649,7357 20476,7404 20300,7404 20124,7404 19951,7357 19798,7269 19645,7181 19518,7054 19430,6902 19342,6749 19296,6576 19296,6400 19296,6223 19342,6050 19430,5897 19518,5745 19645,5618 19798,5530 19951,5442 20124,5395 20300,5395 20476,5395 20649,5442 20802,5530 20955,5618 21082,5745 21170,5897 21258,6050 21304,6223 21304,6399 L 21304,6400 Z"/>
          <path fill="rgb(114,120,126)" stroke="none" d="M 21285,6400 C 21285,6572 21239,6742 21153,6892 21066,7041 20942,7166 20792,7252 20643,7339 20473,7384 20300,7384 20127,7384 19957,7339 19808,7252 19658,7166 19534,7041 19447,6892 19361,6742 19315,6572 19315,6400 19315,6227 19361,6057 19447,5907 19534,5758 19658,5633 19808,5547 19957,5460 20127,5415 20300,5415 20473,5415 20643,5460 20792,5547 20942,5633 21066,5758 21153,5907 21239,6057 21285,6227 21285,6399 L 21285,6400 Z"/>
          <path fill="rgb(115,122,128)" stroke="none" d="M 21265,6400 C 21265,6569 21220,6735 21136,6882 21051,7029 20929,7150 20782,7235 20636,7320 20469,7364 20300,7364 20131,7364 19964,7320 19818,7235 19671,7150 19549,7029 19464,6882 19380,6735 19335,6569 19335,6400 19335,6230 19380,6064 19464,5917 19549,5770 19671,5649 19818,5564 19964,5479 20131,5435 20300,5435 20469,5435 20636,5479 20782,5564 20929,5649 21051,5770 21136,5917 21220,6064 21265,6230 21265,6399 L 21265,6400 Z"/>
          <path fill="rgb(116,123,130)" stroke="none" d="M 21245,6400 C 21245,6565 21202,6728 21119,6872 21036,7016 20916,7135 20773,7218 20629,7301 20466,7345 20300,7345 20134,7345 19971,7301 19827,7218 19684,7135 19564,7016 19481,6872 19398,6728 19355,6565 19355,6400 19355,6234 19398,6071 19481,5927 19564,5783 19684,5664 19827,5581 19971,5498 20134,5454 20300,5454 20466,5454 20629,5498 20773,5581 20916,5664 21036,5783 21119,5927 21202,6071 21245,6234 21245,6399 L 21245,6400 Z"/>
          <path fill="rgb(117,125,132)" stroke="none" d="M 21226,6400 C 21226,6562 21183,6722 21102,6862 21020,7003 20903,7120 20763,7201 20622,7282 20462,7325 20300,7325 20138,7325 19978,7282 19837,7201 19697,7120 19580,7003 19498,6862 19417,6722 19374,6562 19374,6400 19374,6237 19417,6077 19498,5937 19580,5796 19697,5679 19837,5598 19978,5517 20138,5474 20300,5474 20462,5474 20622,5517 20763,5598 20903,5679 21020,5796 21102,5937 21183,6077 21226,6237 21226,6399 L 21226,6400 Z"/>
          <path fill="rgb(119,126,135)" stroke="none" d="M 21206,6400 C 21206,6559 21164,6715 21084,6852 21005,6990 20891,7104 20753,7184 20615,7264 20459,7305 20300,7305 20141,7305 19985,7264 19847,7184 19709,7104 19595,6990 19516,6852 19436,6715 19394,6559 19394,6400 19394,6240 19436,6084 19516,5947 19595,5809 19709,5695 19847,5615 19985,5535 20141,5494 20300,5494 20459,5494 20615,5535 20753,5615 20891,5695 21005,5809 21084,5947 21164,6084 21206,6240 21206,6399 L 21206,6400 Z"/>
          <path fill="rgb(120,128,137)" stroke="none" d="M 21186,6400 C 21186,6555 21145,6708 21067,6843 20990,6977 20878,7089 20743,7167 20608,7245 20456,7286 20300,7286 20144,7286 19992,7245 19857,7167 19722,7089 19610,6977 19533,6843 19455,6708 19414,6555 19414,6400 19414,6244 19455,6091 19533,5956 19610,5822 19722,5710 19857,5632 19992,5554 20144,5513 20300,5513 20456,5513 20608,5554 20743,5632 20878,5710 20990,5822 21067,5956 21145,6091 21186,6244 21186,6399 L 21186,6400 Z"/>
          <path fill="rgb(121,129,139)" stroke="none" d="M 21166,6400 C 21166,6552 21126,6701 21050,6833 20974,6964 20865,7074 20733,7150 20602,7226 20452,7266 20300,7266 20148,7266 19998,7226 19867,7150 19735,7074 19626,6964 19550,6833 19474,6701 19434,6552 19434,6400 19434,6247 19474,6098 19550,5966 19626,5835 19735,5725 19867,5649 19998,5573 20148,5533 20300,5533 20452,5533 20602,5573 20733,5649 20865,5725 20974,5835 21050,5966 21126,6098 21166,6247 21166,6399 L 21166,6400 Z"/>
          <path fill="rgb(122,131,141)" stroke="none" d="M 21147,6400 C 21147,6548 21108,6694 21033,6823 20959,6952 20852,7059 20723,7133 20595,7207 20449,7246 20300,7246 20151,7246 20005,7207 19877,7133 19748,7059 19641,6952 19567,6823 19492,6694 19453,6548 19453,6400 19453,6251 19492,6105 19567,5976 19641,5847 19748,5740 19877,5666 20005,5592 20151,5553 20300,5553 20449,5553 20595,5592 20723,5666 20852,5740 20959,5847 21033,5976 21108,6105 21147,6251 21147,6399 L 21147,6400 Z"/>
          <path fill="rgb(123,132,143)" stroke="none" d="M 21127,6400 C 21127,6545 21089,6687 21016,6813 20944,6939 20839,7043 20714,7116 20588,7188 20445,7227 20300,7227 20155,7227 20012,7188 19886,7116 19761,7043 19656,6939 19584,6813 19511,6687 19473,6545 19473,6400 19473,6254 19511,6112 19584,5986 19656,5860 19761,5756 19886,5683 20012,5611 20155,5572 20300,5572 20445,5572 20588,5611 20714,5683 20839,5756 20944,5860 21016,5986 21089,6112 21127,6254 21127,6399 L 21127,6400 Z"/>
          <path fill="rgb(124,134,145)" stroke="none" d="M 21107,6400 C 21107,6541 21070,6680 20999,6803 20928,6926 20826,7028 20704,7099 20581,7170 20442,7207 20300,7207 20158,7207 20019,7170 19896,7099 19774,7028 19672,6926 19601,6803 19530,6680 19493,6541 19493,6400 19493,6258 19530,6119 19601,5996 19672,5873 19774,5771 19896,5700 20019,5629 20158,5592 20300,5592 20442,5592 20581,5629 20704,5700 20826,5771 20928,5873 20999,5996 21070,6119 21107,6258 21107,6399 L 21107,6400 Z"/>
          <path fill="rgb(125,136,147)" stroke="none" d="M 21088,6400 C 21088,6538 21051,6674 20982,6793 20913,6913 20814,7013 20694,7082 20574,7151 20438,7187 20300,7187 20162,7187 20026,7151 19906,7082 19786,7013 19687,6913 19618,6793 19549,6674 19512,6538 19512,6400 19512,6261 19549,6125 19618,6006 19687,5886 19786,5786 19906,5717 20026,5648 20162,5612 20300,5612 20438,5612 20574,5648 20694,5717 20814,5786 20913,5886 20982,6006 21051,6125 21088,6261 21088,6399 L 21088,6400 Z"/>
          <path fill="rgb(126,137,149)" stroke="none" d="M 21068,6400 C 21068,6534 21033,6667 20965,6784 20898,6900 20801,6997 20684,7065 20567,7132 20435,7168 20300,7168 20165,7168 20033,7132 19916,7065 19799,6997 19702,6900 19635,6784 19567,6667 19532,6534 19532,6400 19532,6265 19567,6132 19635,6015 19702,5899 19799,5802 19916,5734 20033,5667 20165,5631 20300,5631 20435,5631 20567,5667 20684,5734 20801,5802 20898,5899 20965,6015 21033,6132 21068,6265 21068,6399 L 21068,6400 Z"/>
          <path fill="rgb(127,139,151)" stroke="none" d="M 21048,6400 C 21048,6531 21014,6660 20948,6774 20882,6887 20788,6982 20674,7048 20560,7113 20431,7148 20300,7148 20169,7148 20040,7113 19926,7048 19812,6982 19718,6887 19652,6774 19586,6660 19552,6531 19552,6400 19552,6268 19586,6139 19652,6025 19718,5912 19812,5817 19926,5751 20040,5686 20169,5651 20300,5651 20431,5651 20560,5686 20674,5751 20788,5817 20882,5912 20948,6025 21014,6139 21048,6268 21048,6399 L 21048,6400 Z"/>
          <path fill="rgb(128,140,153)" stroke="none" d="M 21029,6400 C 21029,6527 20995,6653 20931,6764 20867,6875 20775,6967 20664,7031 20554,7094 20428,7128 20300,7128 20172,7128 20046,7094 19936,7031 19825,6967 19733,6875 19669,6764 19605,6653 19571,6527 19571,6400 19571,6272 19605,6146 19669,6035 19733,5924 19825,5832 19936,5768 20046,5705 20172,5671 20300,5671 20428,5671 20554,5705 20664,5768 20775,5832 20867,5924 20931,6035 20995,6146 21029,6272 21029,6399 L 21029,6400 Z"/>
          <path fill="rgb(129,142,155)" stroke="none" d="M 21009,6400 C 21009,6524 20976,6646 20914,6754 20852,6862 20762,6951 20654,7013 20547,7076 20424,7108 20300,7108 20176,7108 20053,7076 19946,7013 19838,6951 19748,6862 19686,6754 19624,6646 19591,6524 19591,6400 19591,6275 19624,6153 19686,6045 19748,5937 19838,5848 19946,5786 20053,5723 20176,5691 20300,5691 20424,5691 20547,5723 20654,5786 20762,5848 20852,5937 20914,6045 20976,6153 21009,6275 21009,6399 L 21009,6400 Z"/>
          <path fill="rgb(130,143,157)" stroke="none" d="M 20989,6400 C 20989,6520 20957,6639 20897,6744 20836,6849 20749,6936 20645,6996 20540,7057 20421,7089 20300,7089 20179,7089 20060,7057 19955,6996 19851,6936 19764,6849 19703,6744 19643,6639 19611,6520 19611,6400 19611,6279 19643,6160 19703,6055 19764,5950 19851,5863 19955,5803 20060,5742 20179,5710 20300,5710 20421,5710 20540,5742 20645,5803 20749,5863 20836,5950 20897,6055 20957,6160 20989,6279 20989,6399 L 20989,6400 Z"/>
          <path fill="rgb(131,145,159)" stroke="none" d="M 20970,6400 C 20970,6517 20939,6632 20880,6734 20821,6836 20737,6921 20635,6979 20533,7038 20418,7069 20300,7069 20182,7069 20067,7038 19965,6979 19863,6921 19779,6836 19720,6734 19661,6632 19630,6517 19630,6400 19630,6282 19661,6167 19720,6065 19779,5963 19863,5878 19965,5820 20067,5761 20182,5730 20300,5730 20418,5730 20533,5761 20635,5820 20737,5878 20821,5963 20880,6065 20939,6167 20970,6282 20970,6399 L 20970,6400 Z"/>
          <path fill="rgb(132,146,161)" stroke="none" d="M 20950,6400 C 20950,6514 20920,6626 20863,6724 20806,6823 20724,6905 20625,6962 20526,7019 20414,7049 20300,7049 20186,7049 20074,7019 19975,6962 19876,6905 19794,6823 19737,6724 19680,6626 19650,6514 19650,6400 19650,6285 19680,6173 19737,6075 19794,5976 19876,5894 19975,5837 20074,5780 20186,5750 20300,5750 20414,5750 20526,5780 20625,5837 20724,5894 20806,5976 20863,6075 20920,6173 20950,6285 20950,6399 L 20950,6400 Z"/>
          <path fill="rgb(133,148,163)" stroke="none" d="M 20930,6400 C 20930,6510 20901,6619 20846,6715 20790,6810 20711,6890 20615,6945 20519,7001 20411,7030 20300,7030 20189,7030 20081,7001 19985,6945 19889,6890 19810,6810 19754,6715 19699,6619 19670,6510 19670,6400 19670,6289 19699,6180 19754,6084 19810,5989 19889,5909 19985,5854 20081,5798 20189,5769 20300,5769 20411,5769 20519,5798 20615,5854 20711,5909 20790,5989 20846,6084 20901,6180 20930,6289 20930,6399 L 20930,6400 Z"/>
          <path fill="rgb(134,149,165)" stroke="none" d="M 20910,6400 C 20910,6507 20882,6612 20829,6705 20775,6798 20698,6875 20605,6928 20512,6982 20407,7010 20300,7010 20193,7010 20088,6982 19995,6928 19902,6875 19825,6798 19771,6705 19718,6612 19690,6507 19690,6400 19690,6292 19718,6187 19771,6094 19825,6001 19902,5924 19995,5871 20088,5817 20193,5789 20300,5789 20407,5789 20512,5817 20605,5871 20698,5924 20775,6001 20829,6094 20882,6187 20910,6292 20910,6399 L 20910,6400 Z"/>
          <path fill="rgb(135,151,167)" stroke="none" d="M 20891,6400 C 20891,6503 20863,6605 20812,6695 20760,6785 20685,6859 20595,6911 20506,6963 20404,6990 20300,6990 20196,6990 20094,6963 20005,6911 19915,6859 19840,6785 19788,6695 19737,6605 19709,6503 19709,6400 19709,6296 19737,6194 19788,6104 19840,6014 19915,5940 20005,5888 20094,5836 20196,5809 20300,5809 20404,5809 20506,5836 20595,5888 20685,5940 20760,6014 20812,6104 20863,6194 20891,6296 20891,6399 L 20891,6400 Z"/>
          <path fill="rgb(136,152,169)" stroke="none" d="M 20871,6400 C 20871,6500 20845,6598 20795,6685 20744,6772 20672,6844 20586,6894 20499,6944 20400,6971 20300,6971 20200,6971 20101,6944 20014,6894 19928,6844 19856,6772 19805,6685 19755,6598 19729,6500 19729,6400 19729,6299 19755,6201 19805,6114 19856,6027 19928,5955 20014,5905 20101,5855 20200,5828 20300,5828 20400,5828 20499,5855 20586,5905 20672,5955 20744,6027 20795,6114 20845,6201 20871,6299 20871,6399 L 20871,6400 Z"/>
          <path fill="rgb(137,154,171)" stroke="none" d="M 20851,6400 C 20851,6496 20826,6591 20778,6675 20729,6759 20660,6829 20576,6877 20492,6925 20397,6951 20300,6951 20203,6951 20108,6925 20024,6877 19940,6829 19871,6759 19822,6675 19774,6591 19749,6496 19749,6400 19749,6303 19774,6208 19822,6124 19871,6040 19940,5970 20024,5922 20108,5874 20203,5848 20300,5848 20397,5848 20492,5874 20576,5922 20660,5970 20729,6040 20778,6124 20826,6208 20851,6303 20851,6399 L 20851,6400 Z"/>
          <path fill="rgb(138,155,173)" stroke="none" d="M 20832,6400 C 20832,6493 20807,6585 20760,6665 20714,6746 20647,6813 20566,6860 20485,6907 20393,6931 20300,6931 20207,6931 20115,6907 20034,6860 19953,6813 19886,6746 19840,6665 19793,6585 19768,6493 19768,6400 19768,6306 19793,6214 19840,6134 19886,6053 19953,5986 20034,5939 20115,5892 20207,5868 20300,5868 20393,5868 20485,5892 20566,5939 20647,5986 20714,6053 20760,6134 20807,6214 20832,6306 20832,6399 L 20832,6400 Z"/>
          <path fill="rgb(139,157,175)" stroke="none" d="M 20812,6400 C 20812,6489 20788,6578 20743,6656 20698,6733 20634,6798 20556,6843 20478,6888 20390,6912 20300,6912 20210,6912 20122,6888 20044,6843 19966,6798 19902,6733 19857,6656 19812,6578 19788,6489 19788,6400 19788,6310 19812,6221 19857,6143 19902,6066 19966,6001 20044,5956 20122,5911 20210,5887 20300,5887 20390,5887 20478,5911 20556,5956 20634,6001 20698,6066 20743,6143 20788,6221 20812,6310 20812,6399 L 20812,6400 Z"/>
          <path fill="rgb(140,158,177)" stroke="none" d="M 20792,6400 C 20792,6486 20770,6571 20726,6646 20683,6720 20621,6783 20546,6826 20471,6869 20386,6892 20300,6892 20214,6892 20129,6869 20054,6826 19979,6783 19917,6720 19874,6646 19830,6571 19808,6486 19808,6400 19808,6313 19830,6228 19874,6153 19917,6079 19979,6016 20054,5973 20129,5930 20214,5907 20300,5907 20386,5907 20471,5930 20546,5973 20621,6016 20683,6079 20726,6153 20770,6228 20792,6313 20792,6399 L 20792,6400 Z"/>
          <path fill="rgb(141,160,179)" stroke="none" d="M 20773,6400 C 20773,6482 20751,6564 20709,6636 20668,6708 20608,6767 20536,6809 20464,6850 20383,6872 20300,6872 20217,6872 20136,6850 20064,6809 19992,6767 19932,6708 19891,6636 19849,6564 19827,6482 19827,6400 19827,6317 19849,6235 19891,6163 19932,6091 19992,6032 20064,5990 20136,5949 20217,5927 20300,5927 20383,5927 20464,5949 20536,5990 20608,6032 20668,6091 20709,6163 20751,6235 20773,6317 20773,6399 L 20773,6400 Z"/>
          <path fill="rgb(142,161,181)" stroke="none" d="M 20753,6400 C 20753,6479 20732,6557 20692,6626 20652,6695 20595,6752 20526,6792 20458,6832 20380,6852 20300,6852 20220,6852 20142,6832 20074,6792 20005,6752 19948,6695 19908,6626 19868,6557 19847,6479 19847,6400 19847,6320 19868,6242 19908,6173 19948,6104 20005,6047 20074,6007 20142,5967 20220,5947 20300,5947 20380,5947 20458,5967 20526,6007 20595,6047 20652,6104 20692,6173 20732,6242 20753,6320 20753,6399 L 20753,6400 Z"/>
          <path fill="rgb(143,163,183)" stroke="none" d="M 20733,6400 C 20733,6476 20713,6550 20675,6616 20637,6682 20582,6737 20517,6775 20451,6813 20376,6833 20300,6833 20224,6833 20149,6813 20083,6775 20018,6737 19963,6682 19925,6616 19887,6550 19867,6476 19867,6400 19867,6323 19887,6249 19925,6183 19963,6117 20018,6062 20083,6024 20149,5986 20224,5966 20300,5966 20376,5966 20451,5986 20517,6024 20582,6062 20637,6117 20675,6183 20713,6249 20733,6323 20733,6399 L 20733,6400 Z"/>
          <path fill="rgb(144,165,185)" stroke="none" d="M 20714,6400 C 20714,6472 20694,6543 20658,6606 20622,6669 20570,6721 20507,6758 20444,6794 20373,6813 20300,6813 20227,6813 20156,6794 20093,6758 20030,6721 19978,6669 19942,6606 19906,6543 19886,6472 19886,6400 19886,6327 19906,6256 19942,6193 19978,6130 20030,6078 20093,6041 20156,6005 20227,5986 20300,5986 20373,5986 20444,6005 20507,6041 20570,6078 20622,6130 20658,6193 20694,6256 20714,6327 20714,6399 L 20714,6400 Z"/>
          <path fill="rgb(145,166,187)" stroke="none" d="M 20694,6400 C 20694,6469 20676,6537 20641,6596 20607,6656 20557,6706 20497,6741 20437,6775 20369,6793 20300,6793 20231,6793 20163,6775 20103,6741 20043,6706 19993,6656 19959,6596 19924,6537 19906,6469 19906,6400 19906,6330 19924,6262 19959,6203 19993,6143 20043,6093 20103,6058 20163,6024 20231,6006 20300,6006 20369,6006 20437,6024 20497,6058 20557,6093 20607,6143 20641,6203 20676,6262 20694,6330 20694,6400 L 20694,6400 Z"/>
          <path fill="rgb(146,168,189)" stroke="none" d="M 20674,6400 C 20674,6465 20657,6530 20624,6587 20591,6643 20544,6691 20487,6724 20430,6756 20366,6774 20300,6774 20234,6774 20170,6756 20113,6724 20056,6691 20009,6643 19976,6587 19943,6530 19926,6465 19926,6400 19926,6334 19943,6269 19976,6212 20009,6156 20056,6108 20113,6075 20170,6043 20234,6025 20300,6025 20366,6025 20430,6043 20487,6075 20544,6108 20591,6156 20624,6212 20657,6269 20674,6334 20674,6400 L 20674,6400 Z"/>
          <path fill="rgb(147,169,191)" stroke="none" d="M 20654,6400 C 20654,6462 20638,6523 20607,6577 20576,6631 20531,6675 20477,6706 20423,6738 20362,6754 20300,6754 20238,6754 20177,6738 20123,6706 20069,6675 20024,6631 19993,6577 19962,6523 19946,6462 19946,6400 19946,6337 19962,6276 19993,6222 20024,6168 20069,6124 20123,6093 20177,6061 20238,6045 20300,6045 20362,6045 20423,6061 20477,6093 20531,6124 20576,6168 20607,6222 20638,6276 20654,6337 20654,6400 L 20654,6400 Z"/>
          <path fill="rgb(148,171,193)" stroke="none" d="M 20635,6400 C 20635,6458 20619,6516 20590,6567 20561,6618 20518,6660 20467,6689 20416,6719 20359,6734 20300,6734 20241,6734 20184,6719 20133,6689 20082,6660 20039,6618 20010,6567 19981,6516 19965,6458 19965,6400 19965,6341 19981,6283 20010,6232 20039,6181 20082,6139 20133,6110 20184,6080 20241,6065 20300,6065 20359,6065 20416,6080 20467,6110 20518,6139 20561,6181 20590,6232 20619,6283 20635,6341 20635,6400 L 20635,6400 Z"/>
          <path fill="rgb(150,172,196)" stroke="none" d="M 20615,6400 C 20615,6455 20601,6509 20573,6557 20545,6605 20505,6645 20458,6672 20410,6700 20355,6715 20300,6715 20245,6715 20190,6700 20142,6672 20095,6645 20055,6605 20027,6557 19999,6509 19985,6455 19985,6400 19985,6344 19999,6290 20027,6242 20055,6194 20095,6154 20142,6127 20190,6099 20245,6084 20300,6084 20355,6084 20410,6099 20458,6127 20505,6154 20545,6194 20573,6242 20601,6290 20615,6344 20615,6400 L 20615,6400 Z"/>
          <path fill="rgb(151,174,198)" stroke="none" d="M 20595,6400 C 20595,6451 20582,6502 20556,6547 20530,6592 20493,6629 20448,6655 20403,6681 20352,6695 20300,6695 20248,6695 20197,6681 20152,6655 20107,6629 20070,6592 20044,6547 20018,6502 20005,6451 20005,6400 20005,6348 20018,6297 20044,6252 20070,6207 20107,6170 20152,6144 20197,6118 20248,6104 20300,6104 20352,6104 20403,6118 20448,6144 20493,6170 20530,6207 20556,6252 20582,6297 20595,6348 20595,6400 L 20595,6400 Z"/>
          <path fill="rgb(152,175,200)" stroke="none" d="M 20576,6400 C 20576,6448 20563,6495 20539,6537 20515,6579 20480,6614 20438,6638 20396,6662 20348,6675 20300,6675 20252,6675 20204,6662 20162,6638 20120,6614 20085,6579 20061,6537 20037,6495 20024,6448 20024,6400 20024,6351 20037,6304 20061,6262 20085,6220 20120,6185 20162,6161 20204,6137 20252,6124 20300,6124 20348,6124 20396,6137 20438,6161 20480,6185 20515,6220 20539,6262 20563,6304 20576,6351 20576,6400 L 20576,6400 Z"/>
          <path fill="rgb(153,177,202)" stroke="none" d="M 20556,6400 C 20556,6444 20544,6489 20522,6528 20499,6566 20467,6599 20428,6621 20389,6644 20345,6656 20300,6656 20255,6656 20211,6644 20172,6621 20133,6599 20101,6566 20078,6528 20056,6489 20044,6444 20044,6400 20044,6355 20056,6310 20078,6271 20101,6233 20133,6200 20172,6178 20211,6155 20255,6143 20300,6143 20345,6143 20389,6155 20428,6178 20467,6200 20499,6233 20522,6271 20544,6310 20556,6355 20556,6400 L 20556,6400 Z"/>
          <path fill="rgb(154,178,204)" stroke="none" d="M 20536,6400 C 20536,6441 20525,6482 20505,6518 20484,6554 20454,6583 20418,6604 20382,6625 20341,6636 20300,6636 20259,6636 20218,6625 20182,6604 20146,6583 20116,6554 20095,6518 20075,6482 20064,6441 20064,6400 20064,6358 20075,6317 20095,6281 20116,6245 20146,6216 20182,6195 20218,6174 20259,6163 20300,6163 20341,6163 20382,6174 20418,6195 20454,6216 20484,6245 20505,6281 20525,6317 20536,6358 20536,6400 L 20536,6400 Z"/>
          <path fill="rgb(155,180,206)" stroke="none" d="M 20517,6400 C 20517,6438 20507,6475 20488,6508 20469,6541 20441,6568 20408,6587 20375,6606 20338,6616 20300,6616 20262,6616 20225,6606 20192,6587 20159,6568 20131,6541 20112,6508 20093,6475 20083,6438 20083,6400 20083,6361 20093,6324 20112,6291 20131,6258 20159,6231 20192,6212 20225,6193 20262,6183 20300,6183 20338,6183 20375,6193 20408,6212 20441,6231 20469,6258 20488,6291 20507,6324 20517,6361 20517,6400 L 20517,6400 Z"/>
          <path fill="rgb(156,181,208)" stroke="none" d="M 20497,6400 C 20497,6434 20488,6468 20471,6498 20453,6528 20428,6553 20398,6570 20369,6587 20335,6596 20300,6596 20265,6596 20231,6587 20202,6570 20172,6553 20147,6528 20129,6498 20112,6468 20103,6434 20103,6400 20103,6365 20112,6331 20129,6301 20147,6271 20172,6246 20202,6229 20231,6212 20265,6203 20300,6203 20335,6203 20369,6212 20398,6229 20428,6246 20453,6271 20471,6301 20488,6331 20497,6365 20497,6400 L 20497,6400 Z"/>
          <path fill="rgb(157,183,210)" stroke="none" d="M 20477,6400 C 20477,6431 20469,6461 20453,6488 20438,6515 20416,6537 20389,6553 20362,6569 20331,6577 20300,6577 20269,6577 20238,6569 20211,6553 20184,6537 20162,6515 20147,6488 20131,6461 20123,6431 20123,6400 20123,6368 20131,6338 20147,6311 20162,6284 20184,6262 20211,6246 20238,6230 20269,6222 20300,6222 20331,6222 20362,6230 20389,6246 20416,6262 20438,6284 20453,6311 20469,6338 20477,6368 20477,6400 L 20477,6400 Z"/>
          <path fill="rgb(158,184,212)" stroke="none" d="M 20458,6400 C 20458,6427 20450,6454 20436,6478 20423,6502 20403,6522 20379,6536 20355,6550 20328,6557 20300,6557 20272,6557 20245,6550 20221,6536 20197,6522 20177,6502 20164,6478 20150,6454 20142,6427 20142,6400 20142,6372 20150,6345 20164,6321 20177,6297 20197,6277 20221,6263 20245,6249 20272,6242 20300,6242 20328,6242 20355,6249 20379,6263 20403,6277 20423,6297 20436,6321 20450,6345 20458,6372 20458,6400 L 20458,6400 Z"/>
          <path fill="rgb(159,186,214)" stroke="none" d="M 20438,6400 C 20438,6424 20431,6447 20419,6468 20407,6489 20390,6507 20369,6519 20348,6531 20324,6537 20300,6537 20276,6537 20252,6531 20231,6519 20210,6507 20193,6489 20181,6468 20169,6447 20162,6424 20162,6400 20162,6375 20169,6352 20181,6331 20193,6310 20210,6292 20231,6280 20252,6268 20276,6262 20300,6262 20324,6262 20348,6268 20369,6280 20390,6292 20407,6310 20419,6331 20431,6352 20438,6375 20438,6400 L 20438,6400 Z"/>
          <path fill="rgb(160,187,216)" stroke="none" d="M 20418,6400 C 20418,6420 20413,6441 20402,6459 20392,6477 20377,6491 20359,6502 20341,6512 20321,6518 20300,6518 20279,6518 20259,6512 20241,6502 20223,6491 20208,6477 20198,6459 20187,6441 20182,6420 20182,6400 20182,6379 20187,6358 20198,6340 20208,6322 20223,6308 20241,6297 20259,6287 20279,6281 20300,6281 20321,6281 20341,6287 20359,6297 20377,6308 20392,6322 20402,6340 20413,6358 20418,6379 20418,6400 L 20418,6400 Z"/>
          <path fill="rgb(161,189,218)" stroke="none" d="M 20398,6400 C 20398,6417 20394,6434 20385,6449 20377,6464 20364,6476 20349,6485 20334,6493 20317,6498 20300,6498 20283,6498 20266,6493 20251,6485 20236,6476 20223,6464 20215,6449 20206,6434 20202,6417 20202,6400 20202,6382 20206,6365 20215,6350 20223,6335 20236,6323 20251,6314 20266,6306 20283,6301 20300,6301 20317,6301 20334,6306 20349,6314 20364,6323 20377,6335 20385,6350 20394,6365 20398,6382 20398,6400 L 20398,6400 Z"/>
          <path fill="rgb(162,190,220)" stroke="none" d="M 20379,6400 C 20379,6413 20375,6427 20368,6439 20361,6451 20351,6461 20339,6468 20327,6475 20314,6478 20300,6478 20286,6478 20273,6475 20261,6468 20249,6461 20239,6451 20232,6439 20225,6427 20221,6413 20221,6400 20221,6386 20225,6372 20232,6360 20239,6348 20249,6338 20261,6331 20273,6324 20286,6321 20300,6321 20314,6321 20327,6324 20339,6331 20351,6338 20361,6348 20368,6360 20375,6372 20379,6386 20379,6400 L 20379,6400 Z"/>
          <path fill="rgb(163,192,222)" stroke="none" d="M 20359,6400 C 20359,6410 20356,6420 20351,6429 20346,6438 20339,6445 20330,6451 20321,6456 20310,6459 20300,6459 20290,6459 20279,6456 20270,6451 20261,6445 20254,6438 20249,6429 20244,6420 20241,6410 20241,6400 20241,6389 20244,6379 20249,6370 20254,6361 20261,6354 20270,6348 20279,6343 20290,6340 20300,6340 20310,6340 20321,6343 20330,6348 20339,6354 20346,6361 20351,6370 20356,6379 20359,6389 20359,6400 L 20359,6400 Z"/>
          <path fill="rgb(164,193,224)" stroke="none" d="M 20339,6400 C 20339,6406 20338,6413 20334,6419 20331,6425 20326,6430 20320,6434 20314,6437 20307,6439 20300,6439 20293,6439 20286,6437 20280,6434 20274,6430 20269,6425 20266,6419 20262,6413 20261,6406 20261,6400 20261,6393 20262,6386 20266,6380 20269,6374 20274,6369 20280,6365 20286,6362 20293,6360 20300,6360 20307,6360 20314,6362 20320,6365 20326,6369 20331,6374 20334,6380 20338,6386 20339,6393 20339,6400 L 20339,6400 Z"/>
          <path fill="rgb(165,195,226)" stroke="none" d="M 20320,6400 C 20320,6403 20319,6406 20317,6409 20315,6412 20313,6415 20310,6417 20307,6418 20303,6419 20300,6419 20297,6419 20293,6418 20290,6417 20287,6415 20285,6412 20283,6409 20281,6406 20280,6403 20280,6400 20280,6396 20281,6393 20283,6390 20285,6387 20287,6384 20290,6382 20293,6381 20297,6380 20300,6380 20303,6380 20307,6381 20310,6382 20313,6384 20315,6387 20317,6390 20319,6393 20320,6396 20320,6400 L 20320,6400 Z"/>
         </g>
         <path fill="none" stroke="rgb(52,101,164)" d="M 20300,5698 C 19754,5698 19300,5777 19300,5873 19300,5968 19754,6048 20300,6048 20846,6048 21301,5968 21301,5873 21301,5777 20846,5698 20300,5698 Z"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id58">
         <rect class="BoundingBox" stroke="none" fill="none" x="19299" y="5697" width="2004" height="373"/>
         <path fill="rgb(129,212,26)" stroke="none" d="M 21301,5883 C 21301,5915 21255,5947 21167,5976 21079,6004 20953,6027 20801,6043 20649,6059 20476,6068 20300,6068 20125,6068 19952,6059 19800,6043 19648,6027 19522,6004 19434,5976 19346,5947 19300,5915 19300,5883 19300,5851 19346,5819 19434,5791 19522,5762 19648,5739 19800,5723 19952,5707 20125,5698 20300,5698 20476,5698 20649,5707 20801,5723 20953,5739 21079,5762 21167,5791 21255,5819 21301,5851 21301,5883 L 21301,5883 Z"/>
         <path fill="none" stroke="rgb(52,101,164)" d="M 21301,5883 C 21301,5915 21255,5947 21167,5976 21079,6004 20953,6027 20801,6043 20649,6059 20476,6068 20300,6068 20125,6068 19952,6059 19800,6043 19648,6027 19522,6004 19434,5976 19346,5947 19300,5915 19300,5883 19300,5851 19346,5819 19434,5791 19522,5762 19648,5739 19800,5723 19952,5707 20125,5698 20300,5698 20476,5698 20649,5707 20801,5723 20953,5739 21079,5762 21167,5791 21255,5819 21301,5851 21301,5883 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="388px" font-weight="400"><tspan class="TextPosition" x="20031" y="6018"><tspan fill="rgb(0,0,0)" stroke="none">DB</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.ConnectorShape">
        <g id="id59">
         <rect class="BoundingBox" stroke="none" fill="none" x="19299" y="5883" width="3" height="924"/>
         <path fill="none" stroke="rgb(52,101,164)" d="M 19300,5884 L 19300,6805"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.ConnectorShape">
        <g id="id60">
         <rect class="BoundingBox" stroke="none" fill="none" x="21299" y="5883" width="3" height="924"/>
         <path fill="none" stroke="rgb(52,101,164)" d="M 21300,5884 L 21300,6805"/>
        </g>
       </g>
      </g>
      <g class="com.sun.star.drawing.ConnectorShape">
       <g id="id61">
        <rect class="BoundingBox" stroke="none" fill="none" x="19499" y="7100" width="952" height="3302"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 19500,10400 L 20300,10400 20300,7380"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 20150,7400 L 20300,7100 20450,7400 20150,7400 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id62">
        <rect class="BoundingBox" stroke="none" fill="none" x="19373" y="6218" width="1854" height="710"/>
        <path fill="rgb(255,255,255)" stroke="none" d="M 19400,6521 L 19465,6527 19520,6533 19529,6552 19555,6603 19595,6684 19658,6586 19688,6539 19736,6540 19788,6538 19807,6537 19784,6862 19765,6859 19715,6847 19698,6842 19713,6622 19649,6720 19619,6765 19562,6749 19549,6723 19486,6594 19480,6770 19400,6731 19400,6521 Z M 20022,6600 L 20018,6601 20016,6601 20015,6602 20012,6602 20008,6603 20005,6604 20002,6606 19999,6608 19996,6609 19994,6611 19990,6614 19988,6616 19985,6619 19983,6621 19981,6624 19976,6631 19971,6637 19968,6645 19965,6654 19963,6662 19960,6672 19958,6683 19956,6694 19956,6706 19955,6718 19955,6729 19955,6739 19957,6749 19958,6758 19960,6766 19962,6773 19966,6781 19970,6787 19973,6793 19976,6795 19978,6798 19981,6799 19983,6802 19986,6804 19989,6805 19992,6806 19995,6808 19998,6809 20001,6809 20002,6809 20004,6810 20008,6810 20012,6810 20016,6810 20019,6810 20022,6809 20025,6808 20028,6807 20031,6805 20034,6803 20037,6802 20040,6800 20042,6797 20045,6795 20048,6792 20050,6789 20054,6783 20059,6776 20062,6768 20065,6760 20068,6750 20070,6740 20072,6728 20074,6717 20075,6705 20075,6691 20075,6680 20075,6668 20073,6658 20072,6649 20070,6640 20068,6632 20064,6626 20061,6619 20059,6616 20057,6614 20054,6612 20052,6610 20049,6607 20047,6606 20044,6604 20041,6603 20038,6602 20035,6601 20032,6601 20029,6601 20026,6600 20022,6600 Z M 20027,6520 L 20036,6519 20044,6519 20053,6519 20061,6520 20068,6521 20076,6521 20083,6523 20090,6526 20096,6528 20103,6531 20109,6534 20115,6539 20117,6542 20119,6543 20125,6548 20130,6553 20135,6559 20137,6564 20143,6571 20150,6585 20156,6601 20160,6618 20164,6636 20166,6655 20166,6677 20166,6700 20164,6722 20161,6743 20157,6763 20151,6782 20145,6800 20137,6816 20127,6831 20121,6839 20117,6845 20112,6851 20106,6857 20100,6862 20098,6863 20094,6867 20088,6871 20082,6875 20074,6879 20068,6882 20060,6884 20053,6887 20045,6888 20037,6889 20029,6890 20021,6890 20012,6891 20003,6890 19997,6890 19994,6890 19986,6888 19978,6886 19969,6884 19962,6881 19954,6879 19947,6875 19941,6872 19934,6868 19927,6864 19922,6860 19916,6855 19911,6850 19907,6847 19905,6844 19900,6839 19896,6833 19889,6823 19887,6820 19880,6806 19874,6791 19870,6775 19866,6758 19864,6741 19864,6723 19864,6704 19867,6684 19869,6666 19873,6649 19880,6633 19886,6618 19894,6604 19903,6590 19905,6586 19913,6578 19919,6572 19924,6566 19926,6564 19931,6561 19936,6556 19943,6551 19949,6547 19956,6543 19964,6539 19970,6535 19977,6532 19986,6530 19993,6527 20001,6525 20010,6523 20018,6521 20027,6520 Z M 20505,6617 L 20496,6895 20465,6897 20407,6897 20409,6853 20415,6694 20416,6646 20417,6629 20416,6617 20416,6606 20415,6598 20415,6594 20414,6591 20413,6588 20413,6587 20412,6586 20412,6583 20410,6580 20409,6577 20407,6575 20405,6573 20403,6570 20401,6569 20399,6567 20397,6566 20396,6565 20395,6565 20394,6564 20392,6565 20390,6564 20388,6564 20385,6563 20383,6564 20380,6564 20377,6565 20373,6566 20370,6567 20367,6568 20367,6569 20364,6570 20361,6571 20359,6574 20356,6576 20353,6578 20350,6581 20348,6584 20345,6588 20343,6591 20341,6595 20336,6603 20332,6612 20328,6621 20326,6632 20323,6642 20321,6654 20319,6666 20317,6679 20317,6693 20307,6899 20241,6900 20218,6899 20240,6498 20262,6493 20327,6481 20324,6544 20329,6534 20334,6525 20339,6517 20346,6508 20351,6501 20356,6494 20363,6488 20368,6482 20371,6479 20373,6477 20379,6472 20386,6467 20392,6463 20398,6460 20404,6457 20410,6454 20417,6452 20423,6451 20428,6450 20434,6450 20439,6450 20444,6449 20449,6450 20453,6452 20458,6454 20461,6456 20465,6458 20469,6461 20473,6464 20476,6468 20480,6472 20480,6473 20483,6476 20485,6481 20491,6493 20495,6506 20499,6521 20501,6537 20504,6555 20505,6574 20505,6595 20505,6617 Z M 20765,6658 L 20760,6667 20756,6675 20751,6682 20746,6689 20741,6696 20735,6702 20730,6708 20725,6712 20720,6717 20714,6721 20708,6725 20702,6728 20696,6732 20690,6734 20683,6737 20676,6738 20671,6739 20670,6740 20664,6739 20658,6739 20652,6739 20647,6738 20641,6737 20636,6736 20631,6734 20626,6731 20621,6728 20617,6726 20616,6726 20612,6721 20607,6718 20603,6713 20595,6703 20588,6692 20582,6680 20577,6666 20572,6653 20572,6651 20570,6636 20567,6620 20567,6603 20566,6585 20568,6566 20569,6549 20573,6531 20576,6515 20576,6512 20582,6498 20587,6483 20594,6467 20602,6453 20610,6440 20614,6434 20619,6428 20623,6423 20624,6421 20628,6417 20633,6412 20638,6407 20643,6403 20648,6399 20654,6395 20659,6392 20665,6389 20671,6386 20677,6383 20678,6383 20683,6381 20690,6379 20697,6378 20703,6377 20709,6376 20714,6377 20720,6377 20726,6378 20731,6380 20736,6382 20741,6385 20746,6389 20750,6393 20755,6398 20760,6403 20764,6409 20769,6415 20769,6362 20783,6357 20854,6335 20850,6660 20849,6681 20847,6702 20844,6721 20840,6740 20837,6748 20833,6757 20829,6766 20826,6774 20822,6782 20818,6790 20813,6798 20808,6804 20803,6811 20797,6818 20792,6824 20785,6830 20779,6836 20777,6836 20773,6841 20765,6845 20757,6850 20742,6857 20726,6865 20708,6869 20688,6874 20675,6876 20668,6876 20663,6877 20657,6877 20651,6876 20646,6876 20639,6876 20633,6875 20627,6875 20621,6875 20615,6873 20613,6872 20609,6872 20603,6871 20598,6869 20592,6867 20594,6782 20605,6788 20615,6792 20616,6793 20621,6795 20627,6797 20632,6799 20638,6800 20643,6801 20649,6801 20654,6803 20659,6803 20664,6803 20669,6802 20671,6802 20676,6802 20682,6801 20692,6799 20702,6796 20710,6792 20714,6790 20718,6787 20722,6785 20725,6782 20729,6779 20732,6777 20735,6774 20738,6771 20740,6768 20744,6765 20746,6761 20749,6757 20751,6753 20753,6748 20754,6744 20756,6739 20759,6730 20761,6719 20763,6707 20765,6696 20765,6683 20765,6658 Z M 20713,6452 L 20710,6453 20706,6454 20703,6456 20700,6457 20697,6459 20694,6461 20692,6464 20689,6466 20686,6468 20684,6470 20682,6473 20679,6476 20677,6479 20676,6479 20675,6483 20673,6485 20671,6489 20669,6493 20668,6496 20665,6505 20662,6514 20659,6523 20658,6533 20657,6543 20656,6553 20655,6565 20655,6577 20656,6587 20657,6597 20658,6606 20659,6614 20662,6622 20665,6629 20668,6634 20670,6637 20672,6640 20673,6641 20674,6642 20676,6643 20678,6645 20680,6647 20683,6648 20685,6650 20688,6650 20691,6650 20694,6651 20696,6651 20699,6650 20702,6651 20706,6650 20709,6649 20712,6648 20715,6648 20718,6646 20721,6645 20725,6643 20728,6641 20731,6638 20733,6637 20736,6634 20738,6632 20740,6630 20743,6627 20745,6623 20747,6620 20749,6617 20751,6613 20755,6605 20758,6597 20760,6588 20762,6578 20764,6569 20766,6558 20767,6548 20767,6536 20767,6524 20766,6513 20765,6503 20764,6494 20762,6486 20760,6478 20757,6471 20753,6466 20751,6463 20749,6461 20747,6459 20745,6457 20742,6456 20741,6454 20739,6452 20736,6452 20734,6452 20731,6450 20728,6450 20725,6450 20722,6451 20719,6451 20716,6452 20713,6452 Z M 21056,6367 L 21052,6369 21050,6371 21047,6372 21044,6374 21041,6376 21038,6380 21036,6380 21035,6383 21032,6386 21030,6389 21027,6394 21025,6398 21022,6402 21020,6406 21018,6412 21015,6422 21011,6432 21008,6445 21006,6458 21004,6471 21002,6486 21001,6502 20999,6519 20999,6537 20999,6554 21000,6569 21001,6584 21003,6598 21005,6609 21007,6621 21010,6630 21014,6639 21017,6647 21021,6654 21024,6656 21026,6659 21029,6660 21031,6663 21034,6664 21035,6665 21037,6666 21040,6666 21043,6667 21046,6667 21049,6666 21052,6666 21055,6665 21059,6664 21062,6661 21065,6660 21068,6658 21071,6656 21074,6653 21077,6649 21080,6646 21082,6643 21085,6639 21087,6635 21090,6630 21092,6626 21093,6621 21097,6610 21101,6600 21104,6587 21106,6575 21108,6561 21110,6547 21111,6530 21112,6514 21112,6497 21112,6479 21111,6463 21110,6447 21108,6433 21106,6421 21105,6410 21102,6399 21098,6392 21094,6384 21092,6380 21090,6377 21087,6375 21085,6372 21082,6370 21080,6368 21078,6367 21075,6366 21072,6365 21069,6365 21066,6365 21063,6366 21060,6366 21056,6367 Z M 21057,6253 L 21065,6250 21073,6248 21081,6247 21089,6246 21095,6246 21103,6245 21110,6246 21116,6248 21122,6250 21129,6252 21135,6256 21141,6261 21145,6266 21151,6270 21156,6277 21161,6284 21170,6299 21177,6317 21184,6336 21189,6358 21194,6382 21197,6407 21198,6435 21199,6466 21198,6496 21197,6524 21194,6551 21189,6578 21184,6604 21177,6628 21169,6651 21161,6673 21156,6682 21151,6692 21145,6702 21140,6711 21134,6718 21128,6726 21121,6734 21116,6741 21109,6747 21102,6753 21094,6758 21087,6763 21080,6768 21072,6772 21064,6776 21055,6779 21046,6782 21039,6783 21035,6783 21031,6784 21023,6785 21016,6784 21008,6785 21001,6782 20995,6781 20988,6778 20981,6775 20976,6771 20970,6767 20965,6762 20959,6756 20954,6749 20949,6743 20941,6728 20933,6710 20926,6691 20921,6669 20917,6646 20914,6621 20913,6595 20913,6566 20914,6536 20915,6507 20918,6481 20923,6454 20928,6429 20935,6405 20943,6382 20952,6361 20957,6351 20962,6341 20968,6332 20972,6323 20978,6315 20984,6307 20991,6300 20998,6293 21004,6286 21010,6280 21018,6275 21025,6270 21033,6265 21036,6262 21040,6261 21048,6257 21057,6253 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 19400,6521 L 19465,6527 19520,6533 19529,6552 19555,6603 19595,6684 19658,6586 19688,6539 19736,6540 19788,6538 19807,6537 19784,6862 19765,6859 19715,6847 19698,6842 19713,6622 19649,6720 19619,6765 19562,6749 19549,6723 19486,6594 19480,6770 19400,6731 19400,6521 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 20022,6600 L 20018,6601 20016,6601 20015,6602 20012,6602 20008,6603 20005,6604 20002,6606 19999,6608 19996,6609 19994,6611 19990,6614 19988,6616 19985,6619 19983,6621 19981,6624 19976,6631 19971,6637 19968,6645 19965,6654 19963,6662 19960,6672 19958,6683 19956,6694 19956,6706 19955,6718 19955,6729 19955,6739 19957,6749 19958,6758 19960,6766 19962,6773 19966,6781 19970,6787 19973,6793 19976,6795 19978,6798 19981,6799 19983,6802 19986,6804 19989,6805 19992,6806 19995,6808 19998,6809 20001,6809 20002,6809 20004,6810 20008,6810 20012,6810 20016,6810 20019,6810 20022,6809 20025,6808 20028,6807 20031,6805 20034,6803 20037,6802 20040,6800 20042,6797 20045,6795 20048,6792 20050,6789 20054,6783 20059,6776 20062,6768 20065,6760 20068,6750 20070,6740 20072,6728 20074,6717 20075,6705 20075,6691 20075,6680 20075,6668 20073,6658 20072,6649 20070,6640 20068,6632 20064,6626 20061,6619 20059,6616 20057,6614 20054,6612 20052,6610 20049,6607 20047,6606 20044,6604 20041,6603 20038,6602 20035,6601 20032,6601 20029,6601 20026,6600 20022,6600 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 20027,6520 L 20036,6519 20044,6519 20053,6519 20061,6520 20068,6521 20076,6521 20083,6523 20090,6526 20096,6528 20103,6531 20109,6534 20115,6539 20117,6542 20119,6543 20125,6548 20130,6553 20135,6559 20137,6564 20143,6571 20150,6585 20156,6601 20160,6618 20164,6636 20166,6655 20166,6677 20166,6700 20164,6722 20161,6743 20157,6763 20151,6782 20145,6800 20137,6816 20127,6831 20121,6839 20117,6845 20112,6851 20106,6857 20100,6862 20098,6863 20094,6867 20088,6871 20082,6875 20074,6879 20068,6882 20060,6884 20053,6887 20045,6888 20037,6889 20029,6890 20021,6890 20012,6891 20003,6890 19997,6890 19994,6890 19986,6888 19978,6886 19969,6884 19962,6881 19954,6879 19947,6875 19941,6872 19934,6868 19927,6864 19922,6860 19916,6855 19911,6850 19907,6847 19905,6844 19900,6839 19896,6833 19889,6823 19887,6820 19880,6806 19874,6791 19870,6775 19866,6758 19864,6741 19864,6723 19864,6704 19867,6684 19869,6666 19873,6649 19880,6633 19886,6618 19894,6604 19903,6590 19905,6586 19913,6578 19919,6572 19924,6566 19926,6564 19931,6561 19936,6556 19943,6551 19949,6547 19956,6543 19964,6539 19970,6535 19977,6532 19986,6530 19993,6527 20001,6525 20010,6523 20018,6521 20027,6520 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 20505,6617 L 20496,6895 20465,6897 20407,6897 20409,6853 20415,6694 20416,6646 20417,6629 20416,6617 20416,6606 20415,6598 20415,6594 20414,6591 20413,6588 20413,6587 20412,6586 20412,6583 20410,6580 20409,6577 20407,6575 20405,6573 20403,6570 20401,6569 20399,6567 20397,6566 20396,6565 20395,6565 20394,6564 20392,6565 20390,6564 20388,6564 20385,6563 20383,6564 20380,6564 20377,6565 20373,6566 20370,6567 20367,6568 20367,6569 20364,6570 20361,6571 20359,6574 20356,6576 20353,6578 20350,6581 20348,6584 20345,6588 20343,6591 20341,6595 20336,6603 20332,6612 20328,6621 20326,6632 20323,6642 20321,6654 20319,6666 20317,6679 20317,6693 20307,6899 20241,6900 20218,6899 20240,6498 20262,6493 20327,6481 20324,6544 20329,6534 20334,6525 20339,6517 20346,6508 20351,6501 20356,6494 20363,6488 20368,6482 20371,6479 20373,6477 20379,6472 20386,6467 20392,6463 20398,6460 20404,6457 20410,6454 20417,6452 20423,6451 20428,6450 20434,6450 20439,6450 20444,6449 20449,6450 20453,6452 20458,6454 20461,6456 20465,6458 20469,6461 20473,6464 20476,6468 20480,6472 20480,6473 20483,6476 20485,6481 20491,6493 20495,6506 20499,6521 20501,6537 20504,6555 20505,6574 20505,6595 20505,6617 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 20765,6658 L 20760,6667 20756,6675 20751,6682 20746,6689 20741,6696 20735,6702 20730,6708 20725,6712 20720,6717 20714,6721 20708,6725 20702,6728 20696,6732 20690,6734 20683,6737 20676,6738 20671,6739 20670,6740 20664,6739 20658,6739 20652,6739 20647,6738 20641,6737 20636,6736 20631,6734 20626,6731 20621,6728 20617,6726 20616,6726 20612,6721 20607,6718 20603,6713 20595,6703 20588,6692 20582,6680 20577,6666 20572,6653 20572,6651 20570,6636 20567,6620 20567,6603 20566,6585 20568,6566 20569,6549 20573,6531 20576,6515 20576,6512 20582,6498 20587,6483 20594,6467 20602,6453 20610,6440 20614,6434 20619,6428 20623,6423 20624,6421 20628,6417 20633,6412 20638,6407 20643,6403 20648,6399 20654,6395 20659,6392 20665,6389 20671,6386 20677,6383 20678,6383 20683,6381 20690,6379 20697,6378 20703,6377 20709,6376 20714,6377 20720,6377 20726,6378 20731,6380 20736,6382 20741,6385 20746,6389 20750,6393 20755,6398 20760,6403 20764,6409 20769,6415 20769,6362 20783,6357 20854,6335 20850,6660 20849,6681 20847,6702 20844,6721 20840,6740 20837,6748 20833,6757 20829,6766 20826,6774 20822,6782 20818,6790 20813,6798 20808,6804 20803,6811 20797,6818 20792,6824 20785,6830 20779,6836 20777,6836 20773,6841 20765,6845 20757,6850 20742,6857 20726,6865 20708,6869 20688,6874 20675,6876 20668,6876 20663,6877 20657,6877 20651,6876 20646,6876 20639,6876 20633,6875 20627,6875 20621,6875 20615,6873 20613,6872 20609,6872 20603,6871 20598,6869 20592,6867 20594,6782 20605,6788 20615,6792 20616,6793 20621,6795 20627,6797 20632,6799 20638,6800 20643,6801 20649,6801 20654,6803 20659,6803 20664,6803 20669,6802 20671,6802 20676,6802 20682,6801 20692,6799 20702,6796 20710,6792 20714,6790 20718,6787 20722,6785 20725,6782 20729,6779 20732,6777 20735,6774 20738,6771 20740,6768 20744,6765 20746,6761 20749,6757 20751,6753 20753,6748 20754,6744 20756,6739 20759,6730 20761,6719 20763,6707 20765,6696 20765,6683 20765,6658 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 20713,6452 L 20710,6453 20706,6454 20703,6456 20700,6457 20697,6459 20694,6461 20692,6464 20689,6466 20686,6468 20684,6470 20682,6473 20679,6476 20677,6479 20676,6479 20675,6483 20673,6485 20671,6489 20669,6493 20668,6496 20665,6505 20662,6514 20659,6523 20658,6533 20657,6543 20656,6553 20655,6565 20655,6577 20656,6587 20657,6597 20658,6606 20659,6614 20662,6622 20665,6629 20668,6634 20670,6637 20672,6640 20673,6641 20674,6642 20676,6643 20678,6645 20680,6647 20683,6648 20685,6650 20688,6650 20691,6650 20694,6651 20696,6651 20699,6650 20702,6651 20706,6650 20709,6649 20712,6648 20715,6648 20718,6646 20721,6645 20725,6643 20728,6641 20731,6638 20733,6637 20736,6634 20738,6632 20740,6630 20743,6627 20745,6623 20747,6620 20749,6617 20751,6613 20755,6605 20758,6597 20760,6588 20762,6578 20764,6569 20766,6558 20767,6548 20767,6536 20767,6524 20766,6513 20765,6503 20764,6494 20762,6486 20760,6478 20757,6471 20753,6466 20751,6463 20749,6461 20747,6459 20745,6457 20742,6456 20741,6454 20739,6452 20736,6452 20734,6452 20731,6450 20728,6450 20725,6450 20722,6451 20719,6451 20716,6452 20713,6452 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 21056,6367 L 21052,6369 21050,6371 21047,6372 21044,6374 21041,6376 21038,6380 21036,6380 21035,6383 21032,6386 21030,6389 21027,6394 21025,6398 21022,6402 21020,6406 21018,6412 21015,6422 21011,6432 21008,6445 21006,6458 21004,6471 21002,6486 21001,6502 20999,6519 20999,6537 20999,6554 21000,6569 21001,6584 21003,6598 21005,6609 21007,6621 21010,6630 21014,6639 21017,6647 21021,6654 21024,6656 21026,6659 21029,6660 21031,6663 21034,6664 21035,6665 21037,6666 21040,6666 21043,6667 21046,6667 21049,6666 21052,6666 21055,6665 21059,6664 21062,6661 21065,6660 21068,6658 21071,6656 21074,6653 21077,6649 21080,6646 21082,6643 21085,6639 21087,6635 21090,6630 21092,6626 21093,6621 21097,6610 21101,6600 21104,6587 21106,6575 21108,6561 21110,6547 21111,6530 21112,6514 21112,6497 21112,6479 21111,6463 21110,6447 21108,6433 21106,6421 21105,6410 21102,6399 21098,6392 21094,6384 21092,6380 21090,6377 21087,6375 21085,6372 21082,6370 21080,6368 21078,6367 21075,6366 21072,6365 21069,6365 21066,6365 21063,6366 21060,6366 21056,6367 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 21057,6253 L 21065,6250 21073,6248 21081,6247 21089,6246 21095,6246 21103,6245 21110,6246 21116,6248 21122,6250 21129,6252 21135,6256 21141,6261 21145,6266 21151,6270 21156,6277 21161,6284 21170,6299 21177,6317 21184,6336 21189,6358 21194,6382 21197,6407 21198,6435 21199,6466 21198,6496 21197,6524 21194,6551 21189,6578 21184,6604 21177,6628 21169,6651 21161,6673 21156,6682 21151,6692 21145,6702 21140,6711 21134,6718 21128,6726 21121,6734 21116,6741 21109,6747 21102,6753 21094,6758 21087,6763 21080,6768 21072,6772 21064,6776 21055,6779 21046,6782 21039,6783 21035,6783 21031,6784 21023,6785 21016,6784 21008,6785 21001,6782 20995,6781 20988,6778 20981,6775 20976,6771 20970,6767 20965,6762 20959,6756 20954,6749 20949,6743 20941,6728 20933,6710 20926,6691 20921,6669 20917,6646 20914,6621 20913,6595 20913,6566 20914,6536 20915,6507 20918,6481 20923,6454 20928,6429 20935,6405 20943,6382 20952,6361 20957,6351 20962,6341 20968,6332 20972,6323 20978,6315 20984,6307 20991,6300 20998,6293 21004,6286 21010,6280 21018,6275 21025,6270 21033,6265 21036,6262 21040,6261 21048,6257 21057,6253 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id63">
        <rect class="BoundingBox" stroke="none" fill="none" x="19973" y="12844" width="3855" height="1883"/>
        <path fill="rgb(255,255,255)" stroke="none" d="M 20000,13670 L 20146,13688 20254,13702 20281,13706 20290,13708 20307,13712 20330,13720 20337,13723 20341,13724 20352,13728 20363,13732 20373,13738 20382,13743 20391,13749 20400,13755 20409,13763 20415,13770 20423,13778 20430,13787 20430,13787 20436,13796 20442,13805 20447,13815 20451,13825 20456,13836 20460,13847 20463,13858 20468,13882 20470,13908 20471,13935 20470,13965 20466,13993 20461,14019 20456,14044 20448,14066 20437,14086 20432,14095 20426,14104 20419,14112 20413,14120 20405,14126 20405,14127 20398,14133 20389,14139 20382,14144 20373,14148 20363,14151 20354,14154 20345,14157 20335,14159 20324,14159 20313,14160 20310,14158 20303,14159 20280,14156 20265,14152 20256,14150 20230,14141 20137,14105 20128,14325 20000,14242 20000,13670 Z M 20148,13808 L 20141,13986 20222,14011 20232,14014 20241,14015 20246,14016 20251,14016 20255,14016 20259,14016 20263,14015 20267,14015 20271,14014 20273,14012 20275,14012 20278,14010 20282,14010 20285,14007 20288,14005 20291,14002 20294,14000 20297,13997 20299,13994 20301,13990 20303,13986 20308,13979 20310,13970 20313,13961 20315,13950 20315,13939 20316,13928 20316,13917 20314,13906 20313,13896 20309,13887 20308,13882 20306,13878 20304,13874 20302,13870 20300,13865 20297,13862 20294,13859 20291,13855 20287,13852 20284,13849 20282,13847 20280,13846 20276,13843 20273,13841 20269,13838 20265,13835 20261,13834 20256,13832 20251,13830 20242,13826 20231,13824 20148,13808 Z M 20788,13905 L 20782,13905 20777,13906 20771,13907 20766,13908 20761,13911 20756,13914 20750,13916 20746,13920 20740,13924 20736,13928 20731,13933 20727,13938 20723,13944 20719,13950 20711,13964 20704,13979 20698,13996 20692,14016 20687,14036 20682,14056 20682,14058 20679,14082 20675,14108 20672,14135 20670,14163 20670,14188 20669,14212 20669,14213 20670,14236 20671,14257 20675,14277 20677,14295 20682,14313 20686,14328 20690,14335 20692,14342 20696,14347 20699,14354 20703,14359 20708,14365 20711,14369 20716,14372 20721,14377 20726,14380 20730,14382 20735,14385 20740,14387 20746,14388 20752,14390 20757,14390 20763,14390 20768,14390 20774,14389 20779,14386 20783,14385 20788,14382 20792,14378 20793,14379 20797,14375 20802,14369 20806,14365 20810,14359 20814,14353 20822,14339 20829,14322 20836,14304 20842,14285 20847,14263 20852,14238 20856,14213 20860,14186 20862,14156 20865,14127 20866,14098 20867,14072 20866,14048 20865,14026 20862,14005 20859,13986 20854,13969 20849,13954 20846,13948 20843,13941 20840,13936 20836,13931 20832,13926 20831,13925 20828,13922 20824,13918 20820,13915 20815,13912 20810,13909 20805,13908 20799,13907 20794,13905 20788,13905 Z M 20804,13720 L 20818,13719 20832,13720 20845,13721 20849,13720 20858,13723 20870,13727 20882,13731 20894,13737 20905,13743 20915,13750 20925,13757 20934,13768 20943,13777 20952,13788 20959,13801 20967,13814 20974,13828 20987,13860 20997,13895 21004,13932 21010,13973 21013,14016 21014,14063 21013,14114 21009,14167 21004,14220 20996,14269 20987,14315 20976,14357 20964,14397 20950,14433 20934,14465 20916,14494 20907,14507 20897,14518 20887,14530 20876,14540 20866,14549 20855,14557 20844,14564 20833,14569 20821,14574 20808,14578 20796,14580 20783,14582 20774,14582 20770,14581 20757,14580 20744,14578 20730,14574 20716,14570 20704,14563 20691,14558 20678,14551 20667,14543 20656,14535 20644,14526 20642,14524 20634,14516 20624,14505 20614,14495 20605,14483 20597,14470 20588,14457 20581,14443 20573,14428 20567,14413 20560,14397 20554,14381 20543,14349 20535,14314 20530,14286 20529,14277 20525,14238 20523,14197 20524,14155 20526,14110 20531,14065 20537,14024 20546,13984 20556,13949 20558,13940 20568,13915 20581,13884 20597,13854 20615,13828 20624,13816 20634,13804 20644,13793 20655,13784 20665,13775 20676,13767 20687,13758 20699,13752 20708,13746 20711,13746 20723,13740 20736,13735 20749,13730 20763,13726 20776,13724 20790,13721 20804,13720 Z M 21495,13699 L 21477,13939 21456,13921 21434,13907 21414,13893 21404,13888 21394,13883 21384,13879 21373,13876 21363,13874 21353,13872 21344,13872 21334,13872 21327,13871 21325,13871 21315,13872 21305,13873 21296,13875 21288,13877 21279,13881 21272,13884 21269,13886 21265,13889 21262,13890 21259,13893 21257,13896 21253,13899 21251,13902 21248,13904 21245,13909 21244,13911 21242,13915 21240,13919 21238,13923 21237,13928 21235,13932 21234,13936 21231,13945 21230,13954 21229,13965 21228,13974 21228,13982 21229,13989 21229,13997 21230,14000 21230,14004 21231,14006 21233,14010 21234,14013 21236,14015 21236,14018 21238,14020 21240,14023 21242,14025 21244,14026 21247,14029 21251,14033 21257,14035 21264,14039 21272,14041 21280,14043 21289,14046 21312,14053 21314,14054 21340,14060 21363,14069 21383,14078 21402,14088 21418,14101 21425,14108 21432,14114 21438,14121 21444,14129 21448,14137 21453,14145 21457,14155 21460,14164 21464,14175 21466,14186 21471,14210 21474,14236 21476,14266 21477,14298 21475,14331 21473,14369 21469,14408 21464,14443 21458,14477 21449,14509 21440,14536 21435,14550 21428,14562 21422,14575 21416,14586 21409,14596 21402,14606 21394,14615 21387,14623 21379,14630 21370,14638 21361,14644 21352,14651 21343,14656 21332,14660 21321,14665 21311,14668 21289,14672 21265,14674 21262,14674 21239,14672 21228,14670 21217,14668 21206,14665 21194,14662 21172,14653 21149,14644 21127,14633 21103,14619 21080,14605 21057,14589 21076,14369 21085,14380 21096,14391 21105,14400 21116,14410 21125,14418 21136,14427 21146,14434 21157,14440 21168,14446 21179,14451 21190,14456 21201,14459 21212,14463 21223,14466 21234,14469 21245,14469 21255,14470 21266,14470 21274,14468 21278,14465 21283,14466 21287,14464 21291,14462 21294,14459 21298,14458 21301,14455 21304,14453 21308,14449 21311,14446 21313,14443 21317,14439 21319,14437 21321,14433 21323,14429 21325,14425 21327,14421 21329,14417 21330,14411 21332,14406 21334,14396 21336,14385 21337,14373 21338,14364 21338,14354 21338,14345 21336,14337 21335,14328 21334,14326 21333,14322 21332,14319 21331,14316 21330,14313 21328,14311 21326,14308 21324,14305 21322,14304 21319,14301 21315,14296 21308,14292 21301,14288 21293,14285 21292,14285 21283,14282 21273,14279 21248,14272 21226,14264 21205,14255 21187,14244 21170,14234 21156,14222 21150,14215 21143,14209 21137,14201 21132,14194 21127,14186 21123,14178 21120,14169 21115,14160 21112,14152 21110,14141 21106,14120 21102,14096 21100,14070 21099,14042 21101,14012 21102,13979 21106,13945 21111,13912 21118,13883 21125,13854 21134,13828 21139,13817 21144,13805 21150,13794 21156,13783 21162,13772 21169,13762 21176,13753 21183,13744 21191,13735 21199,13728 21207,13720 21216,13714 21225,13706 21234,13701 21244,13696 21254,13690 21275,13681 21298,13675 21323,13670 21333,13668 21343,13668 21343,13668 21363,13668 21384,13667 21405,13670 21426,13673 21448,13680 21472,13689 21495,13699 Z M 21787,13580 L 21770,13829 21833,13818 21915,13802 21902,14006 21820,14019 21757,14027 21733,14395 21732,14410 21732,14423 21732,14435 21732,14446 21734,14456 21735,14459 21735,14463 21736,14468 21737,14471 21739,14474 21740,14477 21741,14480 21742,14481 21744,14484 21747,14485 21749,14488 21751,14490 21754,14491 21757,14493 21763,14496 21771,14497 21778,14498 21787,14498 21789,14498 21860,14494 21848,14698 21776,14699 21725,14698 21704,14696 21686,14692 21670,14688 21662,14683 21654,14680 21647,14675 21641,14670 21634,14664 21629,14658 21624,14652 21618,14644 21614,14637 21610,14628 21607,14620 21603,14609 21600,14599 21597,14589 21593,14565 21590,14539 21588,14508 21587,14475 21589,14441 21590,14402 21616,14046 21546,14055 21560,13867 21630,13854 21647,13614 21787,13580 Z M 22275,14190 L 22270,14199 22267,14211 22258,14229 22250,14246 22241,14262 22233,14277 22224,14289 22215,14302 22206,14313 22196,14322 22187,14329 22176,14337 22167,14343 22155,14349 22145,14353 22134,14356 22123,14357 22112,14358 22103,14357 22093,14355 22084,14353 22075,14349 22066,14345 22059,14340 22051,14334 22042,14325 22036,14318 22028,14308 22021,14299 22014,14288 22010,14282 22008,14276 21996,14249 21986,14219 21976,14187 21969,14154 21964,14117 21960,14079 21959,14040 21959,13996 21961,13951 21964,13906 21969,13862 21975,13821 21984,13781 21993,13742 22004,13706 22017,13671 22031,13637 22046,13606 22049,13597 22053,13592 22062,13578 22069,13565 22078,13553 22085,13541 22095,13531 22103,13522 22111,13513 22120,13505 22129,13499 22138,13493 22148,13487 22157,13482 22167,13479 22178,13475 22188,13474 22198,13474 22209,13473 22217,13475 22227,13479 22235,13484 22244,13490 22252,13497 22259,13504 22267,13513 22274,13524 22281,13537 22288,13552 22295,13566 22297,13575 22301,13584 22306,13453 22444,13409 22414,14229 22411,14282 22406,14333 22399,14380 22390,14424 22384,14445 22378,14466 22373,14486 22366,14503 22358,14521 22350,14539 22342,14555 22334,14571 22325,14586 22315,14600 22304,14613 22294,14624 22283,14635 22271,14646 22260,14656 22250,14660 22247,14663 22221,14677 22192,14686 22163,14691 22131,14694 22111,14692 22090,14691 22070,14687 22051,14682 22041,14679 22031,14676 22012,14669 21993,14658 21989,14655 21974,14647 21986,14442 21995,14451 22000,14457 22003,14460 22012,14467 22021,14474 22038,14487 22055,14497 22064,14501 22072,14504 22081,14507 22090,14509 22099,14510 22109,14511 22117,14512 22126,14512 22143,14509 22159,14507 22173,14501 22181,14497 22187,14493 22193,14488 22200,14484 22206,14479 22211,14472 22217,14467 22222,14460 22227,14453 22231,14444 22236,14436 22240,14427 22243,14418 22247,14408 22250,14398 22254,14387 22259,14365 22264,14340 22265,14330 22267,14313 22271,14284 22272,14252 22275,14190 Z M 22208,13663 L 22203,13664 22197,13667 22192,13668 22188,13671 22183,13676 22178,13679 22174,13683 22170,13689 22166,13693 22162,13699 22157,13705 22153,13713 22150,13720 22145,13727 22142,13735 22139,13744 22135,13752 22132,13761 22127,13780 22121,13800 22117,13822 22113,13845 22111,13871 22107,13897 22106,13925 22104,13953 22104,13979 22105,14004 22106,14026 22108,14046 22111,14067 22114,14084 22117,14091 22120,14099 22122,14106 22125,14112 22128,14118 22131,14123 22134,14129 22138,14133 22142,14137 22145,14140 22150,14144 22154,14146 22159,14147 22164,14150 22169,14151 22174,14150 22179,14151 22185,14150 22190,14149 22196,14147 22201,14146 22205,14142 22211,14140 22216,14136 22220,14132 22224,14128 22228,14122 22233,14116 22237,14111 22241,14105 22245,14098 22249,14091 22256,14075 22262,14057 22268,14038 22273,14015 22277,13993 22280,13971 22281,13969 22284,13943 22286,13915 22288,13886 22289,13858 22289,13831 22288,13805 22287,13802 22286,13782 22284,13761 22281,13742 22277,13725 22274,13717 22272,13709 22269,13702 22266,13696 22263,13690 22260,13684 22256,13679 22253,13675 22249,13671 22245,13669 22241,13665 22238,13663 22233,13662 22228,13660 22224,13660 22219,13661 22213,13661 22208,13663 Z M 22876,13618 L 22873,13612 22868,13608 22864,13604 22859,13600 22856,13598 22851,13594 22847,13592 22842,13590 22839,13588 22834,13588 22830,13587 22825,13587 22821,13587 22816,13587 22813,13588 22808,13590 22801,13593 22795,13597 22789,13600 22783,13606 22777,13612 22772,13618 22767,13625 22762,13632 22756,13641 22752,13652 22747,13661 22741,13672 22737,13684 22733,13696 22725,13724 22717,13753 22711,13786 22705,13822 22700,13859 22696,13898 22695,13906 22693,13942 22690,13986 22689,14034 22674,14640 22546,14660 22533,14662 22574,13372 22587,13368 22707,13320 22702,13540 22705,13522 22709,13506 22717,13473 22724,13444 22732,13417 22740,13391 22749,13368 22757,13347 22766,13327 22775,13309 22779,13302 22784,13295 22788,13287 22793,13280 22798,13274 22803,13269 22814,13257 22824,13249 22835,13241 22846,13237 22861,13231 22866,13229 22868,13228 22870,13227 22873,13228 22877,13226 22880,13227 22884,13227 22876,13618 Z M 23355,13717 L 23354,13840 23167,13920 23159,13923 23044,13964 23045,14000 23046,14033 23049,14064 23052,14090 23057,14116 23062,14139 23068,14157 23075,14175 23078,14183 23082,14191 23086,14197 23091,14203 23095,14209 23099,14213 23104,14217 23109,14221 23114,14225 23120,14227 23125,14229 23131,14228 23137,14228 23143,14228 23149,14228 23156,14226 23156,14226 23163,14223 23166,14222 23178,14214 23188,14206 23199,14198 23209,14188 23221,14175 23232,14164 23242,14150 23254,14134 23264,14118 23276,14099 23287,14081 23299,14059 23311,14037 23322,14014 23334,13988 23331,14321 23320,14340 23307,14358 23295,14374 23284,14390 23260,14418 23235,14445 23224,14457 23211,14467 23200,14477 23188,14487 23176,14496 23164,14502 23160,14504 23152,14506 23152,14508 23140,14512 23126,14517 23112,14517 23098,14520 23086,14518 23073,14515 23061,14511 23049,14506 23038,14498 23026,14491 23017,14479 23006,14468 22997,14454 22987,14441 22978,14423 22970,14406 22962,14386 22949,14343 22936,14296 22926,14242 22918,14183 22913,14129 22912,14120 22909,14052 22907,13977 22907,13898 22910,13819 22914,13744 22920,13672 22921,13661 22928,13605 22937,13539 22949,13479 22962,13423 22977,13369 22986,13344 22994,13318 23003,13294 23012,13274 23022,13252 23032,13233 23043,13216 23053,13199 23064,13183 23075,13170 23086,13158 23099,13145 23111,13135 23124,13128 23136,13119 23150,13114 23162,13108 23169,13108 23174,13107 23176,13106 23185,13104 23196,13104 23206,13106 23216,13109 23226,13113 23235,13120 23245,13129 23254,13138 23262,13149 23271,13163 23278,13176 23287,13193 23294,13212 23301,13231 23314,13276 23325,13325 23334,13379 23342,13436 23349,13499 23352,13567 23354,13640 23355,13717 Z M 23221,13633 L 23221,13603 23220,13576 23219,13550 23217,13527 23214,13504 23210,13483 23207,13464 23201,13446 23196,13432 23193,13426 23190,13420 23187,13414 23184,13409 23180,13406 23178,13403 23174,13399 23173,13398 23170,13397 23166,13397 23165,13396 23163,13395 23159,13394 23154,13396 23150,13396 23145,13398 23141,13400 23136,13403 23131,13405 23127,13409 23122,13414 23118,13418 23114,13423 23110,13428 23107,13435 23103,13442 23099,13449 23095,13456 23092,13463 23088,13472 23082,13491 23076,13512 23071,13534 23066,13556 23060,13582 23057,13609 23053,13639 23051,13669 23048,13702 23221,13633 Z M 23773,12889 L 23772,13219 23752,13202 23731,13189 23712,13177 23703,13172 23692,13169 23683,13166 23673,13165 23663,13166 23654,13166 23646,13168 23636,13171 23628,13173 23620,13177 23610,13181 23602,13187 23594,13193 23587,13200 23580,13207 23578,13210 23575,13215 23572,13219 23569,13224 23567,13228 23565,13234 23563,13238 23560,13243 23558,13250 23557,13254 23555,13261 23553,13268 23552,13274 23551,13280 23550,13286 23549,13292 23548,13306 23547,13320 23547,13336 23547,13349 23547,13360 23548,13371 23549,13382 23550,13385 23551,13391 23552,13394 23554,13399 23555,13402 23557,13405 23558,13409 23559,13411 23561,13414 23563,13417 23565,13418 23568,13421 23572,13424 23578,13426 23585,13428 23592,13429 23599,13429 23608,13429 23631,13431 23656,13431 23677,13435 23697,13441 23714,13448 23730,13460 23737,13466 23744,13473 23750,13480 23756,13488 23760,13498 23765,13507 23770,13518 23773,13530 23777,13544 23780,13558 23786,13588 23791,13622 23795,13661 23798,13703 23799,13749 23800,13801 23799,13855 23797,13904 23793,13952 23787,13998 23781,14040 23777,14061 23772,14080 23767,14099 23763,14117 23757,14135 23751,14151 23745,14167 23738,14181 23732,14196 23724,14211 23716,14224 23709,14236 23700,14248 23691,14260 23681,14271 23672,14281 23652,14298 23630,14313 23607,14325 23596,14330 23586,14332 23575,14335 23565,14338 23544,14339 23523,14339 23501,14337 23478,14332 23457,14324 23455,14323 23434,14314 23435,13983 23445,13995 23455,14006 23456,14005 23465,14015 23475,14023 23484,14031 23495,14037 23505,14042 23515,14045 23525,14048 23536,14049 23546,14050 23557,14050 23567,14049 23577,14048 23588,14045 23598,14041 23607,14036 23617,14030 23624,14023 23632,14016 23636,14012 23639,14007 23642,14002 23645,13999 23648,13993 23651,13988 23654,13981 23656,13976 23658,13972 23661,13965 23663,13960 23665,13953 23666,13947 23668,13941 23670,13934 23671,13928 23672,13920 23673,13912 23674,13897 23675,13882 23675,13864 23675,13851 23675,13838 23674,13825 23672,13814 23670,13804 23669,13800 23668,13795 23667,13792 23665,13789 23664,13785 23662,13782 23661,13779 23659,13776 23657,13775 23654,13773 23649,13767 23643,13764 23636,13762 23628,13762 23619,13762 23610,13762 23586,13763 23566,13761 23546,13759 23528,13752 23512,13744 23498,13733 23492,13727 23485,13720 23480,13711 23474,13702 23470,13693 23465,13684 23461,13672 23458,13663 23457,13661 23453,13649 23450,13635 23445,13606 23439,13572 23436,13534 23433,13493 23432,13448 23432,13399 23433,13347 23435,13297 23439,13251 23444,13207 23449,13167 23453,13148 23457,13129 23460,13118 23462,13111 23467,13094 23471,13077 23477,13061 23483,13044 23489,13030 23496,13015 23502,13003 23509,12990 23517,12978 23525,12965 23533,12955 23541,12946 23551,12935 23569,12917 23590,12903 23612,12890 23621,12886 23631,12883 23649,12878 23668,12873 23687,12871 23708,12871 23728,12874 23750,12880 23773,12889 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 20000,13670 L 20146,13688 20254,13702 20281,13706 20290,13708 20307,13712 20330,13720 20337,13723 20341,13724 20352,13728 20363,13732 20373,13738 20382,13743 20391,13749 20400,13755 20409,13763 20415,13770 20423,13778 20430,13787 20430,13787 20436,13796 20442,13805 20447,13815 20451,13825 20456,13836 20460,13847 20463,13858 20468,13882 20470,13908 20471,13935 20470,13965 20466,13993 20461,14019 20456,14044 20448,14066 20437,14086 20432,14095 20426,14104 20419,14112 20413,14120 20405,14126 20405,14127 20398,14133 20389,14139 20382,14144 20373,14148 20363,14151 20354,14154 20345,14157 20335,14159 20324,14159 20313,14160 20310,14158 20303,14159 20280,14156 20265,14152 20256,14150 20230,14141 20137,14105 20128,14325 20000,14242 20000,13670 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 20148,13808 L 20141,13986 20222,14011 20232,14014 20241,14015 20246,14016 20251,14016 20255,14016 20259,14016 20263,14015 20267,14015 20271,14014 20273,14012 20275,14012 20278,14010 20282,14010 20285,14007 20288,14005 20291,14002 20294,14000 20297,13997 20299,13994 20301,13990 20303,13986 20308,13979 20310,13970 20313,13961 20315,13950 20315,13939 20316,13928 20316,13917 20314,13906 20313,13896 20309,13887 20308,13882 20306,13878 20304,13874 20302,13870 20300,13865 20297,13862 20294,13859 20291,13855 20287,13852 20284,13849 20282,13847 20280,13846 20276,13843 20273,13841 20269,13838 20265,13835 20261,13834 20256,13832 20251,13830 20242,13826 20231,13824 20148,13808 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 20788,13905 L 20782,13905 20777,13906 20771,13907 20766,13908 20761,13911 20756,13914 20750,13916 20746,13920 20740,13924 20736,13928 20731,13933 20727,13938 20723,13944 20719,13950 20711,13964 20704,13979 20698,13996 20692,14016 20687,14036 20682,14056 20682,14058 20679,14082 20675,14108 20672,14135 20670,14163 20670,14188 20669,14212 20669,14213 20670,14236 20671,14257 20675,14277 20677,14295 20682,14313 20686,14328 20690,14335 20692,14342 20696,14347 20699,14354 20703,14359 20708,14365 20711,14369 20716,14372 20721,14377 20726,14380 20730,14382 20735,14385 20740,14387 20746,14388 20752,14390 20757,14390 20763,14390 20768,14390 20774,14389 20779,14386 20783,14385 20788,14382 20792,14378 20793,14379 20797,14375 20802,14369 20806,14365 20810,14359 20814,14353 20822,14339 20829,14322 20836,14304 20842,14285 20847,14263 20852,14238 20856,14213 20860,14186 20862,14156 20865,14127 20866,14098 20867,14072 20866,14048 20865,14026 20862,14005 20859,13986 20854,13969 20849,13954 20846,13948 20843,13941 20840,13936 20836,13931 20832,13926 20831,13925 20828,13922 20824,13918 20820,13915 20815,13912 20810,13909 20805,13908 20799,13907 20794,13905 20788,13905 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 20804,13720 L 20818,13719 20832,13720 20845,13721 20849,13720 20858,13723 20870,13727 20882,13731 20894,13737 20905,13743 20915,13750 20925,13757 20934,13768 20943,13777 20952,13788 20959,13801 20967,13814 20974,13828 20987,13860 20997,13895 21004,13932 21010,13973 21013,14016 21014,14063 21013,14114 21009,14167 21004,14220 20996,14269 20987,14315 20976,14357 20964,14397 20950,14433 20934,14465 20916,14494 20907,14507 20897,14518 20887,14530 20876,14540 20866,14549 20855,14557 20844,14564 20833,14569 20821,14574 20808,14578 20796,14580 20783,14582 20774,14582 20770,14581 20757,14580 20744,14578 20730,14574 20716,14570 20704,14563 20691,14558 20678,14551 20667,14543 20656,14535 20644,14526 20642,14524 20634,14516 20624,14505 20614,14495 20605,14483 20597,14470 20588,14457 20581,14443 20573,14428 20567,14413 20560,14397 20554,14381 20543,14349 20535,14314 20530,14286 20529,14277 20525,14238 20523,14197 20524,14155 20526,14110 20531,14065 20537,14024 20546,13984 20556,13949 20558,13940 20568,13915 20581,13884 20597,13854 20615,13828 20624,13816 20634,13804 20644,13793 20655,13784 20665,13775 20676,13767 20687,13758 20699,13752 20708,13746 20711,13746 20723,13740 20736,13735 20749,13730 20763,13726 20776,13724 20790,13721 20804,13720 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 21495,13699 L 21477,13939 21456,13921 21434,13907 21414,13893 21404,13888 21394,13883 21384,13879 21373,13876 21363,13874 21353,13872 21344,13872 21334,13872 21327,13871 21325,13871 21315,13872 21305,13873 21296,13875 21288,13877 21279,13881 21272,13884 21269,13886 21265,13889 21262,13890 21259,13893 21257,13896 21253,13899 21251,13902 21248,13904 21245,13909 21244,13911 21242,13915 21240,13919 21238,13923 21237,13928 21235,13932 21234,13936 21231,13945 21230,13954 21229,13965 21228,13974 21228,13982 21229,13989 21229,13997 21230,14000 21230,14004 21231,14006 21233,14010 21234,14013 21236,14015 21236,14018 21238,14020 21240,14023 21242,14025 21244,14026 21247,14029 21251,14033 21257,14035 21264,14039 21272,14041 21280,14043 21289,14046 21312,14053 21314,14054 21340,14060 21363,14069 21383,14078 21402,14088 21418,14101 21425,14108 21432,14114 21438,14121 21444,14129 21448,14137 21453,14145 21457,14155 21460,14164 21464,14175 21466,14186 21471,14210 21474,14236 21476,14266 21477,14298 21475,14331 21473,14369 21469,14408 21464,14443 21458,14477 21449,14509 21440,14536 21435,14550 21428,14562 21422,14575 21416,14586 21409,14596 21402,14606 21394,14615 21387,14623 21379,14630 21370,14638 21361,14644 21352,14651 21343,14656 21332,14660 21321,14665 21311,14668 21289,14672 21265,14674 21262,14674 21239,14672 21228,14670 21217,14668 21206,14665 21194,14662 21172,14653 21149,14644 21127,14633 21103,14619 21080,14605 21057,14589 21076,14369 21085,14380 21096,14391 21105,14400 21116,14410 21125,14418 21136,14427 21146,14434 21157,14440 21168,14446 21179,14451 21190,14456 21201,14459 21212,14463 21223,14466 21234,14469 21245,14469 21255,14470 21266,14470 21274,14468 21278,14465 21283,14466 21287,14464 21291,14462 21294,14459 21298,14458 21301,14455 21304,14453 21308,14449 21311,14446 21313,14443 21317,14439 21319,14437 21321,14433 21323,14429 21325,14425 21327,14421 21329,14417 21330,14411 21332,14406 21334,14396 21336,14385 21337,14373 21338,14364 21338,14354 21338,14345 21336,14337 21335,14328 21334,14326 21333,14322 21332,14319 21331,14316 21330,14313 21328,14311 21326,14308 21324,14305 21322,14304 21319,14301 21315,14296 21308,14292 21301,14288 21293,14285 21292,14285 21283,14282 21273,14279 21248,14272 21226,14264 21205,14255 21187,14244 21170,14234 21156,14222 21150,14215 21143,14209 21137,14201 21132,14194 21127,14186 21123,14178 21120,14169 21115,14160 21112,14152 21110,14141 21106,14120 21102,14096 21100,14070 21099,14042 21101,14012 21102,13979 21106,13945 21111,13912 21118,13883 21125,13854 21134,13828 21139,13817 21144,13805 21150,13794 21156,13783 21162,13772 21169,13762 21176,13753 21183,13744 21191,13735 21199,13728 21207,13720 21216,13714 21225,13706 21234,13701 21244,13696 21254,13690 21275,13681 21298,13675 21323,13670 21333,13668 21343,13668 21343,13668 21363,13668 21384,13667 21405,13670 21426,13673 21448,13680 21472,13689 21495,13699 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 21787,13580 L 21770,13829 21833,13818 21915,13802 21902,14006 21820,14019 21757,14027 21733,14395 21732,14410 21732,14423 21732,14435 21732,14446 21734,14456 21735,14459 21735,14463 21736,14468 21737,14471 21739,14474 21740,14477 21741,14480 21742,14481 21744,14484 21747,14485 21749,14488 21751,14490 21754,14491 21757,14493 21763,14496 21771,14497 21778,14498 21787,14498 21789,14498 21860,14494 21848,14698 21776,14699 21725,14698 21704,14696 21686,14692 21670,14688 21662,14683 21654,14680 21647,14675 21641,14670 21634,14664 21629,14658 21624,14652 21618,14644 21614,14637 21610,14628 21607,14620 21603,14609 21600,14599 21597,14589 21593,14565 21590,14539 21588,14508 21587,14475 21589,14441 21590,14402 21616,14046 21546,14055 21560,13867 21630,13854 21647,13614 21787,13580 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 22275,14190 L 22270,14199 22267,14211 22258,14229 22250,14246 22241,14262 22233,14277 22224,14289 22215,14302 22206,14313 22196,14322 22187,14329 22176,14337 22167,14343 22155,14349 22145,14353 22134,14356 22123,14357 22112,14358 22103,14357 22093,14355 22084,14353 22075,14349 22066,14345 22059,14340 22051,14334 22042,14325 22036,14318 22028,14308 22021,14299 22014,14288 22010,14282 22008,14276 21996,14249 21986,14219 21976,14187 21969,14154 21964,14117 21960,14079 21959,14040 21959,13996 21961,13951 21964,13906 21969,13862 21975,13821 21984,13781 21993,13742 22004,13706 22017,13671 22031,13637 22046,13606 22049,13597 22053,13592 22062,13578 22069,13565 22078,13553 22085,13541 22095,13531 22103,13522 22111,13513 22120,13505 22129,13499 22138,13493 22148,13487 22157,13482 22167,13479 22178,13475 22188,13474 22198,13474 22209,13473 22217,13475 22227,13479 22235,13484 22244,13490 22252,13497 22259,13504 22267,13513 22274,13524 22281,13537 22288,13552 22295,13566 22297,13575 22301,13584 22306,13453 22444,13409 22414,14229 22411,14282 22406,14333 22399,14380 22390,14424 22384,14445 22378,14466 22373,14486 22366,14503 22358,14521 22350,14539 22342,14555 22334,14571 22325,14586 22315,14600 22304,14613 22294,14624 22283,14635 22271,14646 22260,14656 22250,14660 22247,14663 22221,14677 22192,14686 22163,14691 22131,14694 22111,14692 22090,14691 22070,14687 22051,14682 22041,14679 22031,14676 22012,14669 21993,14658 21989,14655 21974,14647 21986,14442 21995,14451 22000,14457 22003,14460 22012,14467 22021,14474 22038,14487 22055,14497 22064,14501 22072,14504 22081,14507 22090,14509 22099,14510 22109,14511 22117,14512 22126,14512 22143,14509 22159,14507 22173,14501 22181,14497 22187,14493 22193,14488 22200,14484 22206,14479 22211,14472 22217,14467 22222,14460 22227,14453 22231,14444 22236,14436 22240,14427 22243,14418 22247,14408 22250,14398 22254,14387 22259,14365 22264,14340 22265,14330 22267,14313 22271,14284 22272,14252 22275,14190 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 22208,13663 L 22203,13664 22197,13667 22192,13668 22188,13671 22183,13676 22178,13679 22174,13683 22170,13689 22166,13693 22162,13699 22157,13705 22153,13713 22150,13720 22145,13727 22142,13735 22139,13744 22135,13752 22132,13761 22127,13780 22121,13800 22117,13822 22113,13845 22111,13871 22107,13897 22106,13925 22104,13953 22104,13979 22105,14004 22106,14026 22108,14046 22111,14067 22114,14084 22117,14091 22120,14099 22122,14106 22125,14112 22128,14118 22131,14123 22134,14129 22138,14133 22142,14137 22145,14140 22150,14144 22154,14146 22159,14147 22164,14150 22169,14151 22174,14150 22179,14151 22185,14150 22190,14149 22196,14147 22201,14146 22205,14142 22211,14140 22216,14136 22220,14132 22224,14128 22228,14122 22233,14116 22237,14111 22241,14105 22245,14098 22249,14091 22256,14075 22262,14057 22268,14038 22273,14015 22277,13993 22280,13971 22281,13969 22284,13943 22286,13915 22288,13886 22289,13858 22289,13831 22288,13805 22287,13802 22286,13782 22284,13761 22281,13742 22277,13725 22274,13717 22272,13709 22269,13702 22266,13696 22263,13690 22260,13684 22256,13679 22253,13675 22249,13671 22245,13669 22241,13665 22238,13663 22233,13662 22228,13660 22224,13660 22219,13661 22213,13661 22208,13663 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 22876,13618 L 22873,13612 22868,13608 22864,13604 22859,13600 22856,13598 22851,13594 22847,13592 22842,13590 22839,13588 22834,13588 22830,13587 22825,13587 22821,13587 22816,13587 22813,13588 22808,13590 22801,13593 22795,13597 22789,13600 22783,13606 22777,13612 22772,13618 22767,13625 22762,13632 22756,13641 22752,13652 22747,13661 22741,13672 22737,13684 22733,13696 22725,13724 22717,13753 22711,13786 22705,13822 22700,13859 22696,13898 22695,13906 22693,13942 22690,13986 22689,14034 22674,14640 22546,14660 22533,14662 22574,13372 22587,13368 22707,13320 22702,13540 22705,13522 22709,13506 22717,13473 22724,13444 22732,13417 22740,13391 22749,13368 22757,13347 22766,13327 22775,13309 22779,13302 22784,13295 22788,13287 22793,13280 22798,13274 22803,13269 22814,13257 22824,13249 22835,13241 22846,13237 22861,13231 22866,13229 22868,13228 22870,13227 22873,13228 22877,13226 22880,13227 22884,13227 22876,13618 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 23355,13717 L 23354,13840 23167,13920 23159,13923 23044,13964 23045,14000 23046,14033 23049,14064 23052,14090 23057,14116 23062,14139 23068,14157 23075,14175 23078,14183 23082,14191 23086,14197 23091,14203 23095,14209 23099,14213 23104,14217 23109,14221 23114,14225 23120,14227 23125,14229 23131,14228 23137,14228 23143,14228 23149,14228 23156,14226 23156,14226 23163,14223 23166,14222 23178,14214 23188,14206 23199,14198 23209,14188 23221,14175 23232,14164 23242,14150 23254,14134 23264,14118 23276,14099 23287,14081 23299,14059 23311,14037 23322,14014 23334,13988 23331,14321 23320,14340 23307,14358 23295,14374 23284,14390 23260,14418 23235,14445 23224,14457 23211,14467 23200,14477 23188,14487 23176,14496 23164,14502 23160,14504 23152,14506 23152,14508 23140,14512 23126,14517 23112,14517 23098,14520 23086,14518 23073,14515 23061,14511 23049,14506 23038,14498 23026,14491 23017,14479 23006,14468 22997,14454 22987,14441 22978,14423 22970,14406 22962,14386 22949,14343 22936,14296 22926,14242 22918,14183 22913,14129 22912,14120 22909,14052 22907,13977 22907,13898 22910,13819 22914,13744 22920,13672 22921,13661 22928,13605 22937,13539 22949,13479 22962,13423 22977,13369 22986,13344 22994,13318 23003,13294 23012,13274 23022,13252 23032,13233 23043,13216 23053,13199 23064,13183 23075,13170 23086,13158 23099,13145 23111,13135 23124,13128 23136,13119 23150,13114 23162,13108 23169,13108 23174,13107 23176,13106 23185,13104 23196,13104 23206,13106 23216,13109 23226,13113 23235,13120 23245,13129 23254,13138 23262,13149 23271,13163 23278,13176 23287,13193 23294,13212 23301,13231 23314,13276 23325,13325 23334,13379 23342,13436 23349,13499 23352,13567 23354,13640 23355,13717 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 23221,13633 L 23221,13603 23220,13576 23219,13550 23217,13527 23214,13504 23210,13483 23207,13464 23201,13446 23196,13432 23193,13426 23190,13420 23187,13414 23184,13409 23180,13406 23178,13403 23174,13399 23173,13398 23170,13397 23166,13397 23165,13396 23163,13395 23159,13394 23154,13396 23150,13396 23145,13398 23141,13400 23136,13403 23131,13405 23127,13409 23122,13414 23118,13418 23114,13423 23110,13428 23107,13435 23103,13442 23099,13449 23095,13456 23092,13463 23088,13472 23082,13491 23076,13512 23071,13534 23066,13556 23060,13582 23057,13609 23053,13639 23051,13669 23048,13702 23221,13633 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" stroke-width="53" stroke-linejoin="miter" d="M 23773,12889 L 23772,13219 23752,13202 23731,13189 23712,13177 23703,13172 23692,13169 23683,13166 23673,13165 23663,13166 23654,13166 23646,13168 23636,13171 23628,13173 23620,13177 23610,13181 23602,13187 23594,13193 23587,13200 23580,13207 23578,13210 23575,13215 23572,13219 23569,13224 23567,13228 23565,13234 23563,13238 23560,13243 23558,13250 23557,13254 23555,13261 23553,13268 23552,13274 23551,13280 23550,13286 23549,13292 23548,13306 23547,13320 23547,13336 23547,13349 23547,13360 23548,13371 23549,13382 23550,13385 23551,13391 23552,13394 23554,13399 23555,13402 23557,13405 23558,13409 23559,13411 23561,13414 23563,13417 23565,13418 23568,13421 23572,13424 23578,13426 23585,13428 23592,13429 23599,13429 23608,13429 23631,13431 23656,13431 23677,13435 23697,13441 23714,13448 23730,13460 23737,13466 23744,13473 23750,13480 23756,13488 23760,13498 23765,13507 23770,13518 23773,13530 23777,13544 23780,13558 23786,13588 23791,13622 23795,13661 23798,13703 23799,13749 23800,13801 23799,13855 23797,13904 23793,13952 23787,13998 23781,14040 23777,14061 23772,14080 23767,14099 23763,14117 23757,14135 23751,14151 23745,14167 23738,14181 23732,14196 23724,14211 23716,14224 23709,14236 23700,14248 23691,14260 23681,14271 23672,14281 23652,14298 23630,14313 23607,14325 23596,14330 23586,14332 23575,14335 23565,14338 23544,14339 23523,14339 23501,14337 23478,14332 23457,14324 23455,14323 23434,14314 23435,13983 23445,13995 23455,14006 23456,14005 23465,14015 23475,14023 23484,14031 23495,14037 23505,14042 23515,14045 23525,14048 23536,14049 23546,14050 23557,14050 23567,14049 23577,14048 23588,14045 23598,14041 23607,14036 23617,14030 23624,14023 23632,14016 23636,14012 23639,14007 23642,14002 23645,13999 23648,13993 23651,13988 23654,13981 23656,13976 23658,13972 23661,13965 23663,13960 23665,13953 23666,13947 23668,13941 23670,13934 23671,13928 23672,13920 23673,13912 23674,13897 23675,13882 23675,13864 23675,13851 23675,13838 23674,13825 23672,13814 23670,13804 23669,13800 23668,13795 23667,13792 23665,13789 23664,13785 23662,13782 23661,13779 23659,13776 23657,13775 23654,13773 23649,13767 23643,13764 23636,13762 23628,13762 23619,13762 23610,13762 23586,13763 23566,13761 23546,13759 23528,13752 23512,13744 23498,13733 23492,13727 23485,13720 23480,13711 23474,13702 23470,13693 23465,13684 23461,13672 23458,13663 23457,13661 23453,13649 23450,13635 23445,13606 23439,13572 23436,13534 23433,13493 23432,13448 23432,13399 23433,13347 23435,13297 23439,13251 23444,13207 23449,13167 23453,13148 23457,13129 23460,13118 23462,13111 23467,13094 23471,13077 23477,13061 23483,13044 23489,13030 23496,13015 23502,13003 23509,12990 23517,12978 23525,12965 23533,12955 23541,12946 23551,12935 23569,12917 23590,12903 23612,12890 23621,12886 23631,12883 23649,12878 23668,12873 23687,12871 23708,12871 23728,12874 23750,12880 23773,12889 Z"/>
       </g>
      </g>
      <g class="Group">
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id64">
         <rect class="BoundingBox" stroke="none" fill="none" x="22199" y="7698" width="2204" height="2004"/>
         <path fill="rgb(222,230,239)" stroke="none" d="M 22200,9700 L 22200,8055 23300,7699 24401,8055 24401,9700 23300,9345 22200,9700 Z"/>
         <path fill="none" stroke="rgb(52,101,164)" d="M 22200,9700 L 22200,8055 23300,7699 24401,8055 24401,9700 23300,9345 22200,9700 Z"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id65">
         <rect class="BoundingBox" stroke="none" fill="none" x="22200" y="7800" width="2201" height="1401"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="22711" y="8281"><tspan fill="rgb(0,0,0)" stroke="none">‘</tspan><tspan fill="rgb(0,0,0)" stroke="none">MAIL’ or </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="22385" y="8599"><tspan fill="rgb(0,0,0)" stroke="none">‘</tspan><tspan fill="rgb(0,0,0)" stroke="none">DOCUMENT’ </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="22779" y="8917"><tspan fill="rgb(0,0,0)" stroke="none">MERGE</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.LineShape">
        <g id="id66">
         <rect class="BoundingBox" stroke="none" fill="none" x="22199" y="9299" width="2203" height="3"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 22200,9300 L 22362,9300"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 22443,9300 L 22470,9300"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 22550,9300 L 22712,9300"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 22793,9300 L 22820,9300"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 22901,9300 L 23062,9300"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 23143,9300 L 23170,9300"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 23251,9300 L 23413,9300"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 23494,9300 L 23521,9300"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 23601,9300 L 23763,9300"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 23844,9300 L 23871,9300"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 23952,9300 L 24113,9300"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 24194,9300 L 24221,9300"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 24302,9300 L 24400,9300"/>
        </g>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id67">
        <rect class="BoundingBox" stroke="none" fill="none" x="11148" y="4899" width="1654" height="1504"/>
        <path fill="rgb(222,230,239)" stroke="none" d="M 12800,4900 L 12800,6132 11975,6401 11149,6132 11149,4900 11975,5168 12800,4900 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 12800,4900 L 12800,6132 11975,6401 11149,6132 11149,4900 11975,5168 12800,4900 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id68">
        <rect class="BoundingBox" stroke="none" fill="none" x="11150" y="4975" width="1651" height="1051"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="11461" y="5648"><tspan fill="rgb(0,0,0)" stroke="none">XSLT</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id69">
        <rect class="BoundingBox" stroke="none" fill="none" x="11149" y="5999" width="1653" height="3"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 12800,6000 L 12638,6000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 12557,6000 L 12531,6000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 12450,6000 L 12288,6000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 12207,6000 L 12180,6000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 12099,6000 L 11938,6000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 11857,6000 L 11830,6000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 11749,6000 L 11587,6000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 11506,6000 L 11479,6000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 11399,6000 L 11237,6000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 11156,6000 L 11150,6000"/>
       </g>
      </g>
      <g class="Group">
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id70">
         <rect class="BoundingBox" stroke="none" fill="none" x="19000" y="7646" width="2608" height="2372"/>
         <path fill="rgb(222,230,239)" stroke="none" d="M 19001,10016 L 19001,8073 20303,7647 21606,8073 21606,10016 20303,9591 19001,10016 Z"/>
         <path fill="none" stroke="rgb(52,101,164)" d="M 19001,10016 L 19001,8073 20303,7647 21606,8073 21606,10016 20303,9591 19001,10016 Z"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id71">
         <rect class="BoundingBox" stroke="none" fill="none" x="19001" y="7766" width="2605" height="1670"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="19397" y="8422"><tspan fill="rgb(0,0,0)" stroke="none">MONGODB – </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="19262" y="8740"><tspan fill="rgb(0,0,0)" stroke="none">JSON database </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="19529" y="9058"><tspan fill="rgb(0,0,0)" stroke="none">initialization/</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="282px" font-weight="400"><tspan class="TextPosition" x="19846" y="9376"><tspan fill="rgb(0,0,0)" stroke="none">staging</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.LineShape">
        <g id="id72">
         <rect class="BoundingBox" stroke="none" fill="none" x="18999" y="9542" width="2608" height="3"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 19000,9543 L 19162,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 19243,9543 L 19270,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 19350,9543 L 19512,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 19593,9543 L 19620,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 19701,9543 L 19862,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 19943,9543 L 19970,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 20051,9543 L 20213,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 20294,9543 L 20321,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 20401,9543 L 20563,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 20644,9543 L 20671,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 20752,9543 L 20913,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 20994,9543 L 21021,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 21102,9543 L 21264,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 21345,9543 L 21372,9543"/>
         <path fill="none" stroke="rgb(214,46,78)" d="M 21452,9543 L 21605,9543"/>
        </g>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id73">
        <rect class="BoundingBox" stroke="none" fill="none" x="899" y="7999" width="1803" height="1403"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 1800,9400 L 1638,9400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 1557,9400 L 1531,9400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 1450,9400 L 1288,9400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 1207,9400 L 1180,9400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 1099,9400 L 938,9400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 900,9357 L 900,9330"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 900,9249 L 900,9087"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 900,9006 L 900,8979"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 900,8899 L 900,8737"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 900,8656 L 900,8629"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 900,8548 L 900,8387"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 900,8306 L 900,8279"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 900,8198 L 900,8036"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 945,8000 L 972,8000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 1052,8000 L 1214,8000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 1295,8000 L 1322,8000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 1403,8000 L 1565,8000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 1645,8000 L 1672,8000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 1753,8000 L 1915,8000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 1996,8000 L 2023,8000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2104,8000 L 2265,8000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2346,8000 L 2373,8000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2454,8000 L 2616,8000"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2696,8000 L 2700,8000 2700,8023"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2700,8104 L 2700,8266"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2700,8347 L 2700,8374"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2700,8455 L 2700,8616"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2700,8697 L 2700,8724"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2700,8805 L 2700,8967"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2700,9047 L 2700,9074"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2700,9155 L 2700,9317"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2700,9398 L 2700,9400 2675,9400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2594,9400 L 2433,9400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2352,9400 L 2325,9400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2244,9400 L 2082,9400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 2001,9400 L 1975,9400"/>
        <path fill="none" stroke="rgb(214,46,78)" d="M 1894,9400 L 1800,9400"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="353px" font-weight="400"><tspan class="TextPosition" x="1457" y="8427"><tspan fill="rgb(0,0,0)" stroke="none">GIT-</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="353px" font-weight="400"><tspan class="TextPosition" x="1184" y="8821"><tspan fill="rgb(0,0,0)" stroke="none">version </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="353px" font-weight="400"><tspan class="TextPosition" x="1069" y="9215"><tspan fill="rgb(0,0,0)" stroke="none">managed</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id74">
        <rect class="BoundingBox" stroke="none" fill="none" x="984" y="9699" width="1818" height="2403"/>
        <path fill="rgb(128,128,128)" stroke="none" d="M 2000,12100 L 1200,12100 1200,9900 2800,9900 2800,12100 2000,12100 Z"/>
        <path fill="none" stroke="rgb(128,128,128)" d="M 2000,12100 L 1200,12100 1200,9900 2800,9900 2800,12100 2000,12100 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="1185" y="10346"><tspan fill="rgb(128,128,128)" stroke="none"> </tspan><tspan fill="rgb(128,128,128)" stroke="none">Document </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Noto Sans CJK JP, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="1880" y="10782"><tspan fill="rgb(128,128,128)" stroke="none">– </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="1609" y="11163"><tspan fill="rgb(128,128,128)" stroke="none">input/</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="1511" y="11519"><tspan fill="rgb(128,128,128)" stroke="none">output </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="1520" y="11875"><tspan fill="rgb(128,128,128)" stroke="none">artifact</tspan></tspan></tspan></text>
        <path fill="rgb(221,221,221)" stroke="none" d="M 1800,11900 L 1000,11900 1000,9700 2600,9700 2600,11900 1800,11900 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 1800,11900 L 1000,11900 1000,9700 2600,9700 2600,11900 1800,11900 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="985" y="10146"><tspan fill="rgb(0,0,0)" stroke="none"> </tspan><tspan fill="rgb(0,0,0)" stroke="none">Document </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Noto Sans CJK JP, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="1680" y="10582"><tspan fill="rgb(0,0,0)" stroke="none">– </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="1409" y="10963"><tspan fill="rgb(0,0,0)" stroke="none">input/</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="1311" y="11319"><tspan fill="rgb(0,0,0)" stroke="none">output </tspan></tspan></tspan><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="1320" y="11675"><tspan fill="rgb(0,0,0)" stroke="none">artifact</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id75">
        <rect class="BoundingBox" stroke="none" fill="none" x="433" y="12304" width="2669" height="1204"/>
        <path fill="rgb(222,230,239)" stroke="none" d="M 434,12305 L 2700,12305 3100,12905 2700,13506 434,13506 833,12905 434,12305 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 434,12305 L 2700,12305 3100,12905 2700,13506 434,13506 833,12905 434,12305 Z"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="388px" font-weight="400"><tspan class="TextPosition" x="1086" y="13041"><tspan fill="rgb(0,0,0)" stroke="none">process</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id76">
        <rect class="BoundingBox" stroke="none" fill="none" x="299" y="7799" width="3003" height="5803"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 1800,13600 L 300,13600 300,7800 3300,7800 3300,13600 1800,13600 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id77">
        <rect class="BoundingBox" stroke="none" fill="none" x="21300" y="6350" width="5701" height="501"/>
        <path fill="none" stroke="rgb(52,101,164)" stroke-width="200" stroke-linejoin="round" d="M 22267,6600 L 26033,6600"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 22300,6850 L 21300,6600 22300,6350 22300,6850 Z"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 26000,6350 L 27000,6600 26000,6850 26000,6350 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id78">
        <rect class="BoundingBox" stroke="none" fill="none" x="23900" y="13550" width="3101" height="501"/>
        <path fill="none" stroke="rgb(52,101,164)" stroke-width="200" stroke-linejoin="round" d="M 24867,13800 L 26033,13800"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 24900,14050 L 23900,13800 24900,13550 24900,14050 Z"/>
        <path fill="rgb(52,101,164)" stroke="none" d="M 26000,13550 L 27000,13800 26000,14050 26000,13550 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.LineShape">
       <g id="id79">
        <rect class="BoundingBox" stroke="none" fill="none" x="26999" y="-1" width="3" height="15753"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 27000,0 L 27000,15750"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id80">
        <rect class="BoundingBox" stroke="none" fill="none" x="26999" y="-1" width="1003" height="15753"/>
        <path fill="rgb(222,230,239)" stroke="none" d="M 27000,7875 L 27000,0 28000,0 28000,15750 27000,15750 27000,7875 Z"/>
        <path fill="none" stroke="rgb(52,101,164)" d="M 27000,7875 L 27000,0 28000,0 28000,15750 27000,15750 27000,7875 Z"/>
        <text class="TextShape" transform="rotate(89.9 27341 1843)"><tspan class="TextParagraph" font-family="Liberation Sans, sans-serif" font-size="459px" font-weight="400"><tspan class="TextPosition" x="27341" y="1843"><tspan fill="rgb(0,0,0)" stroke="none">WEB INTERFACE BROKERING STRUCTURED QUERIES</tspan></tspan></tspan></text>
       </g>
      </g>
     </g>
    </g>
   </g>
  </g>
 </g>
 <script type="text/ecmascript"><![CDATA[


(function(window, document, exportName, undefined) {
'use strict';

var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
var TEST_ELEMENT = document.createElement('div');

var TYPE_FUNCTION = 'function';

var round = Math.round;
var abs = Math.abs;
var now = Date.now;

function setTimeoutContext(fn, timeout, context) {
return setTimeout(bindFn(fn, context), timeout);
}

function invokeArrayArg(arg, fn, context) {
if (Array.isArray(arg)) {
each(arg, context[fn], context);
return true;
}
return false;
}

function each(obj, iterator, context) {
var i;

if (!obj) {
return;
}

if (obj.forEach) {
obj.forEach(iterator, context);
} else if (obj.length !== undefined) {
i = 0;
while (i < obj.length) {
iterator.call(context, obj[i], i, obj);
i++;
}
} else {
for (i in obj) {
obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
}
}
}

function deprecate(method, name, message) {
var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
return function() {
var e = new Error('get-stack-trace');
var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
.replace(/^\s+at\s+/gm, '')
.replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

var log = window.console && (window.console.warn || window.console.log);
if (log) {
log.call(window.console, deprecationMessage, stack);
}
return method.apply(this, arguments);
};
}

var assign;
if (typeof Object.assign !== 'function') {
assign = function assign(target) {
if (target === undefined || target === null) {
throw new TypeError('Cannot convert undefined or null to object');
}

var output = Object(target);
for (var index = 1; index < arguments.length; index++) {
var source = arguments[index];
if (source !== undefined && source !== null) {
for (var nextKey in source) {
if (source.hasOwnProperty(nextKey)) {
output[nextKey] = source[nextKey];
}
}
}
}
return output;
};
} else {
assign = Object.assign;
}

var extend = deprecate(function extend(dest, src, merge) {
var keys = Object.keys(src);
var i = 0;
while (i < keys.length) {
if (!merge || (merge && dest[keys[i]] === undefined)) {
dest[keys[i]] = src[keys[i]];
}
i++;
}
return dest;
}, 'extend', 'Use `assign`.');

var merge = deprecate(function merge(dest, src) {
return extend(dest, src, true);
}, 'merge', 'Use `assign`.');

function inherit(child, base, properties) {
var baseP = base.prototype,
childP;

childP = child.prototype = Object.create(baseP);
childP.constructor = child;
childP._super = baseP;

if (properties) {
assign(childP, properties);
}
}

function bindFn(fn, context) {
return function boundFn() {
return fn.apply(context, arguments);
};
}

function boolOrFn(val, args) {
if (typeof val == TYPE_FUNCTION) {
return val.apply(args ? args[0] || undefined : undefined, args);
}
return val;
}

function ifUndefined(val1, val2) {
return (val1 === undefined) ? val2 : val1;
}

function addEventListeners(target, types, handler) {
each(splitStr(types), function(type) {
target.addEventListener(type, handler, false);
});
}

function removeEventListeners(target, types, handler) {
each(splitStr(types), function(type) {
target.removeEventListener(type, handler, false);
});
}

function hasParent(node, parent) {
while (node) {
if (node == parent) {
return true;
}
node = node.parentNode;
}
return false;
}

function inStr(str, find) {
return str.indexOf(find) > -1;
}

function splitStr(str) {
return str.trim().split(/\s+/g);
}

function inArray(src, find, findByKey) {
if (src.indexOf && !findByKey) {
return src.indexOf(find);
} else {
var i = 0;
while (i < src.length) {
if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
return i;
}
i++;
}
return -1;
}
}

function toArray(obj) {
return Array.prototype.slice.call(obj, 0);
}

function uniqueArray(src, key, sort) {
var results = [];
var values = [];
var i = 0;

while (i < src.length) {
var val = key ? src[i][key] : src[i];
if (inArray(values, val) < 0) {
results.push(src[i]);
}
values[i] = val;
i++;
}

if (sort) {
if (!key) {
results = results.sort();
} else {
results = results.sort(function sortUniqueArray(a, b) {
return a[key] > b[key];
});
}
}

return results;
}

function prefixed(obj, property) {
if (obj === undefined) {
return undefined;
}

var prefix, prop;
var camelProp = property[0].toUpperCase() + property.slice(1);

var i = 0;
while (i < VENDOR_PREFIXES.length) {
prefix = VENDOR_PREFIXES[i];
prop = (prefix) ? prefix + camelProp : property;

if (prop in obj) {
return prop;
}
i++;
}
return undefined;
}

var _uniqueId = 1;
function uniqueId() {
return _uniqueId++;
}

function getWindowForElement(element) {
var doc = element.ownerDocument || element;
return (doc.defaultView || doc.parentWindow || window);
}

var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

var SUPPORT_TOUCH = ('ontouchstart' in window);
var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

var INPUT_TYPE_TOUCH = 'touch';
var INPUT_TYPE_PEN = 'pen';
var INPUT_TYPE_MOUSE = 'mouse';
var INPUT_TYPE_KINECT = 'kinect';

var COMPUTE_INTERVAL = 25;

var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;

var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;

var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

var PROPS_XY = ['x', 'y'];
var PROPS_CLIENT_XY = ['clientX', 'clientY'];

function Input(manager, callback) {
var self = this;
this.manager = manager;
this.callback = callback;
this.element = manager.element;
this.target = manager.options.inputTarget;

this.domHandler = function(ev) {
if (boolOrFn(manager.options.enable, [manager])) {
self.handler(ev);
}
};

this.init();

}

Input.prototype = {
handler: function() { },

init: function() {
this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
},

destroy: function() {
this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
}
};

function createInputInstance(manager) {
var Type;
var inputClass = manager.options.inputClass;

if (inputClass) {
Type = inputClass;
} else if (!SUPPORT_TOUCH && SUPPORT_POINTER_EVENTS) {
Type = PointerEventInput;
} else if (SUPPORT_ONLY_TOUCH) {
Type = TouchInput;
} else if (!SUPPORT_TOUCH) {
Type = MouseInput;
} else {
Type = TouchMouseInput;
}
return new (Type)(manager, inputHandler);
}

function inputHandler(manager, eventType, input) {
var pointersLen = input.pointers.length;
var changedPointersLen = input.changedPointers.length;
var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

input.isFirst = !!isFirst;
input.isFinal = !!isFinal;

if (isFirst) {
manager.session = {};
}

input.eventType = eventType;

computeInputData(manager, input);

manager.emit('hammer.input', input);

manager.recognize(input);
manager.session.prevInput = input;
}

function computeInputData(manager, input) {
var session = manager.session;
var pointers = input.pointers;
var pointersLength = pointers.length;

if (!session.firstInput) {
session.firstInput = simpleCloneInputData(input);
}

if (pointersLength > 1 && !session.firstMultiple) {
session.firstMultiple = simpleCloneInputData(input);
} else if (pointersLength === 1) {
session.firstMultiple = false;
}

var firstInput = session.firstInput;
var firstMultiple = session.firstMultiple;
var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

var center = input.center = getCenter(pointers);
input.timeStamp = now();
input.deltaTime = input.timeStamp - firstInput.timeStamp;

input.angle = getAngle(offsetCenter, center);
input.distance = getDistance(offsetCenter, center);

computeDeltaXY(session, input);
input.offsetDirection = getDirection(input.deltaX, input.deltaY);

var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
input.overallVelocityX = overallVelocity.x;
input.overallVelocityY = overallVelocity.y;
input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

computeIntervalInputData(session, input);

var target = manager.element;
if (hasParent(input.srcEvent.target, target)) {
target = input.srcEvent.target;
}
input.target = target;
}

function computeDeltaXY(session, input) {
var center = input.center;
var offset = session.offsetDelta || {};
var prevDelta = session.prevDelta || {};
var prevInput = session.prevInput || {};

if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
prevDelta = session.prevDelta = {
x: prevInput.deltaX || 0,
y: prevInput.deltaY || 0
};

offset = session.offsetDelta = {
x: center.x,
y: center.y
};
}

input.deltaX = prevDelta.x + (center.x - offset.x);
input.deltaY = prevDelta.y + (center.y - offset.y);
}

function computeIntervalInputData(session, input) {
var last = session.lastInterval || input,
deltaTime = input.timeStamp - last.timeStamp,
velocity, velocityX, velocityY, direction;

if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
var deltaX = input.deltaX - last.deltaX;
var deltaY = input.deltaY - last.deltaY;

var v = getVelocity(deltaTime, deltaX, deltaY);
velocityX = v.x;
velocityY = v.y;
velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
direction = getDirection(deltaX, deltaY);

session.lastInterval = input;
} else {
velocity = last.velocity;
velocityX = last.velocityX;
velocityY = last.velocityY;
direction = last.direction;
}

input.velocity = velocity;
input.velocityX = velocityX;
input.velocityY = velocityY;
input.direction = direction;
}

function simpleCloneInputData(input) {
var pointers = [];
var i = 0;
while (i < input.pointers.length) {
pointers[i] = {
clientX: round(input.pointers[i].clientX),
clientY: round(input.pointers[i].clientY)
};
i++;
}

return {
timeStamp: now(),
pointers: pointers,
center: getCenter(pointers),
deltaX: input.deltaX,
deltaY: input.deltaY
};
}

function getCenter(pointers) {
var pointersLength = pointers.length;

if (pointersLength === 1) {
return {
x: round(pointers[0].clientX),
y: round(pointers[0].clientY)
};
}

var x = 0, y = 0, i = 0;
while (i < pointersLength) {
x += pointers[i].clientX;
y += pointers[i].clientY;
i++;
}

return {
x: round(x / pointersLength),
y: round(y / pointersLength)
};
}

function getVelocity(deltaTime, x, y) {
return {
x: x / deltaTime || 0,
y: y / deltaTime || 0
};
}

function getDirection(x, y) {
if (x === y) {
return DIRECTION_NONE;
}

if (abs(x) >= abs(y)) {
return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
}
return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}

function getDistance(p1, p2, props) {
if (!props) {
props = PROPS_XY;
}
var x = p2[props[0]] - p1[props[0]],
y = p2[props[1]] - p1[props[1]];

return Math.sqrt((x * x) + (y * y));
}

function getAngle(p1, p2, props) {
if (!props) {
props = PROPS_XY;
}
var x = p2[props[0]] - p1[props[0]],
y = p2[props[1]] - p1[props[1]];
return Math.atan2(y, x) * 180 / Math.PI;
}

function getRotation(start, end) {
return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}

function getScale(start, end) {
return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}

var MOUSE_INPUT_MAP = {
mousedown: INPUT_START,
mousemove: INPUT_MOVE,
mouseup: INPUT_END
};

var MOUSE_ELEMENT_EVENTS = 'mousedown';
var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

function MouseInput() {
this.evEl = MOUSE_ELEMENT_EVENTS;
this.evWin = MOUSE_WINDOW_EVENTS;

this.pressed = false; // mousedown state

Input.apply(this, arguments);
}

inherit(MouseInput, Input, {
handler: function MEhandler(ev) {
var eventType = MOUSE_INPUT_MAP[ev.type];

if (eventType & INPUT_START && ev.button === 0) {
this.pressed = true;
}

if (eventType & INPUT_MOVE && ev.which !== 1) {
eventType = INPUT_END;
}

if (!this.pressed) {
return;
}

if (eventType & INPUT_END) {
this.pressed = false;
}

this.callback(this.manager, eventType, {
pointers: [ev],
changedPointers: [ev],
pointerType: INPUT_TYPE_MOUSE,
srcEvent: ev
});
}
});

var POINTER_INPUT_MAP = {
pointerdown: INPUT_START,
pointermove: INPUT_MOVE,
pointerup: INPUT_END,
pointercancel: INPUT_CANCEL,
pointerout: INPUT_CANCEL
};

var IE10_POINTER_TYPE_ENUM = {
2: INPUT_TYPE_TOUCH,
3: INPUT_TYPE_PEN,
4: INPUT_TYPE_MOUSE,
5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
};

var POINTER_ELEMENT_EVENTS = 'pointerdown';
var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

if (window.MSPointerEvent && !window.PointerEvent) {
POINTER_ELEMENT_EVENTS = 'MSPointerDown';
POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
}

function PointerEventInput() {
this.evEl = POINTER_ELEMENT_EVENTS;
this.evWin = POINTER_WINDOW_EVENTS;

Input.apply(this, arguments);

this.store = (this.manager.session.pointerEvents = []);
}

inherit(PointerEventInput, Input, {
handler: function PEhandler(ev) {
var store = this.store;
var removePointer = false;

var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

var isTouch = (pointerType == INPUT_TYPE_TOUCH);

var storeIndex = inArray(store, ev.pointerId, 'pointerId');

if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
if (storeIndex < 0) {
store.push(ev);
storeIndex = store.length - 1;
}
} else if (eventType & (INPUT_END | INPUT_CANCEL)) {
removePointer = true;
}

if (storeIndex < 0) {
return;
}

store[storeIndex] = ev;

this.callback(this.manager, eventType, {
pointers: store,
changedPointers: [ev],
pointerType: pointerType,
srcEvent: ev
});

if (removePointer) {
store.splice(storeIndex, 1);
}
}
});

var SINGLE_TOUCH_INPUT_MAP = {
touchstart: INPUT_START,
touchmove: INPUT_MOVE,
touchend: INPUT_END,
touchcancel: INPUT_CANCEL
};

var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

function SingleTouchInput() {
this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
this.started = false;

Input.apply(this, arguments);
}

inherit(SingleTouchInput, Input, {
handler: function TEhandler(ev) {
var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

if (type === INPUT_START) {
this.started = true;
}

if (!this.started) {
return;
}

var touches = normalizeSingleTouches.call(this, ev, type);

if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
this.started = false;
}

this.callback(this.manager, type, {
pointers: touches[0],
changedPointers: touches[1],
pointerType: INPUT_TYPE_TOUCH,
srcEvent: ev
});
}
});

function normalizeSingleTouches(ev, type) {
var all = toArray(ev.touches);
var changed = toArray(ev.changedTouches);

if (type & (INPUT_END | INPUT_CANCEL)) {
all = uniqueArray(all.concat(changed), 'identifier', true);
}

return [all, changed];
}

var TOUCH_INPUT_MAP = {
touchstart: INPUT_START,
touchmove: INPUT_MOVE,
touchend: INPUT_END,
touchcancel: INPUT_CANCEL
};

var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

function TouchInput() {
this.evTarget = TOUCH_TARGET_EVENTS;
this.targetIds = {};

Input.apply(this, arguments);
}

inherit(TouchInput, Input, {
handler: function MTEhandler(ev) {
var type = TOUCH_INPUT_MAP[ev.type];
var touches = getTouches.call(this, ev, type);
if (!touches) {
return;
}

this.callback(this.manager, type, {
pointers: touches[0],
changedPointers: touches[1],
pointerType: INPUT_TYPE_TOUCH,
srcEvent: ev
});
}
});

function getTouches(ev, type) {
var allTouches = toArray(ev.touches);
var targetIds = this.targetIds;

if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
targetIds[allTouches[0].identifier] = true;
return [allTouches, allTouches];
}

var i,
targetTouches,
changedTouches = toArray(ev.changedTouches),
changedTargetTouches = [],
target = this.target;

targetTouches = allTouches.filter(function(touch) {
return hasParent(touch.target, target);
});

if (type === INPUT_START) {
i = 0;
while (i < targetTouches.length) {
targetIds[targetTouches[i].identifier] = true;
i++;
}
}

i = 0;
while (i < changedTouches.length) {
if (targetIds[changedTouches[i].identifier]) {
changedTargetTouches.push(changedTouches[i]);
}

if (type & (INPUT_END | INPUT_CANCEL)) {
delete targetIds[changedTouches[i].identifier];
}
i++;
}

if (!changedTargetTouches.length) {
return;
}

return [
uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
changedTargetTouches
];
}


var DEDUP_TIMEOUT = 2500;
var DEDUP_DISTANCE = 25;

function TouchMouseInput() {
Input.apply(this, arguments);

var handler = bindFn(this.handler, this);
this.touch = new TouchInput(this.manager, handler);
this.mouse = new MouseInput(this.manager, handler);

this.primaryTouch = null;
this.lastTouches = [];
}

inherit(TouchMouseInput, Input, {
handler: function TMEhandler(manager, inputEvent, inputData) {
var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
return;
}

if (isTouch) {
recordTouches.call(this, inputEvent, inputData);
} else if (isMouse && isSyntheticEvent.call(this, inputData)) {
return;
}

this.callback(manager, inputEvent, inputData);
},

destroy: function destroy() {
this.touch.destroy();
this.mouse.destroy();
}
});

function recordTouches(eventType, eventData) {
if (eventType & INPUT_START) {
this.primaryTouch = eventData.changedPointers[0].identifier;
setLastTouch.call(this, eventData);
} else if (eventType & (INPUT_END | INPUT_CANCEL)) {
setLastTouch.call(this, eventData);
}
}

function setLastTouch(eventData) {
var touch = eventData.changedPointers[0];

if (touch.identifier === this.primaryTouch) {
var lastTouch = {x: touch.clientX, y: touch.clientY};
this.lastTouches.push(lastTouch);
var lts = this.lastTouches;
var removeLastTouch = function() {
var i = lts.indexOf(lastTouch);
if (i > -1) {
lts.splice(i, 1);
}
};
setTimeout(removeLastTouch, DEDUP_TIMEOUT);
}
}

function isSyntheticEvent(eventData) {
var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
for (var i = 0; i < this.lastTouches.length; i++) {
var t = this.lastTouches[i];
var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
return true;
}
}
return false;
}

var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

var TOUCH_ACTION_COMPUTE = 'compute';
var TOUCH_ACTION_AUTO = 'auto';
var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
var TOUCH_ACTION_NONE = 'none';
var TOUCH_ACTION_PAN_X = 'pan-x';
var TOUCH_ACTION_PAN_Y = 'pan-y';
var TOUCH_ACTION_MAP = getTouchActionProps();

function TouchAction(manager, value) {
this.manager = manager;
this.set(value);
}

TouchAction.prototype = {
set: function(value) {
if (value == TOUCH_ACTION_COMPUTE) {
value = this.compute();
}

if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
}
this.actions = value.toLowerCase().trim();
},

update: function() {
this.set(this.manager.options.touchAction);
},

compute: function() {
var actions = [];
each(this.manager.recognizers, function(recognizer) {
if (boolOrFn(recognizer.options.enable, [recognizer])) {
actions = actions.concat(recognizer.getTouchAction());
}
});
return cleanTouchActions(actions.join(' '));
},

preventDefaults: function(input) {
var srcEvent = input.srcEvent;
var direction = input.offsetDirection;

if (this.manager.session.prevented) {
srcEvent.preventDefault();
return;
}

var actions = this.actions;
var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

if (hasNone) {

var isTapPointer = input.pointers.length === 1;
var isTapMovement = input.distance < 2;
var isTapTouchTime = input.deltaTime < 250;

if (isTapPointer && isTapMovement && isTapTouchTime) {
return;
}
}

if (hasPanX && hasPanY) {
return;
}

if (hasNone ||
(hasPanY && direction & DIRECTION_HORIZONTAL) ||
(hasPanX && direction & DIRECTION_VERTICAL)) {
return this.preventSrc(srcEvent);
}
},

preventSrc: function(srcEvent) {
this.manager.session.prevented = true;
srcEvent.preventDefault();
}
};

function cleanTouchActions(actions) {
if (inStr(actions, TOUCH_ACTION_NONE)) {
return TOUCH_ACTION_NONE;
}

var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

if (hasPanX && hasPanY) {
return TOUCH_ACTION_NONE;
}

if (hasPanX || hasPanY) {
return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
}

if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
return TOUCH_ACTION_MANIPULATION;
}

return TOUCH_ACTION_AUTO;
}

function getTouchActionProps() {
if (!NATIVE_TOUCH_ACTION) {
return false;
}
var touchMap = {};
var cssSupports = window.CSS && window.CSS.supports;
['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
});
return touchMap;
}

var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;

function Recognizer(options) {
this.options = assign({}, this.defaults, options || {});

this.id = uniqueId();

this.manager = null;

this.options.enable = ifUndefined(this.options.enable, true);

this.state = STATE_POSSIBLE;

this.simultaneous = {};
this.requireFail = [];
}

Recognizer.prototype = {
defaults: {},

set: function(options) {
assign(this.options, options);

this.manager && this.manager.touchAction.update();
return this;
},

recognizeWith: function(otherRecognizer) {
if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
return this;
}

var simultaneous = this.simultaneous;
otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
if (!simultaneous[otherRecognizer.id]) {
simultaneous[otherRecognizer.id] = otherRecognizer;
otherRecognizer.recognizeWith(this);
}
return this;
},

dropRecognizeWith: function(otherRecognizer) {
if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
return this;
}

otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
delete this.simultaneous[otherRecognizer.id];
return this;
},

requireFailure: function(otherRecognizer) {
if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
return this;
}

var requireFail = this.requireFail;
otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
if (inArray(requireFail, otherRecognizer) === -1) {
requireFail.push(otherRecognizer);
otherRecognizer.requireFailure(this);
}
return this;
},

dropRequireFailure: function(otherRecognizer) {
if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
return this;
}

otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
var index = inArray(this.requireFail, otherRecognizer);
if (index > -1) {
this.requireFail.splice(index, 1);
}
return this;
},

hasRequireFailures: function() {
return this.requireFail.length > 0;
},

canRecognizeWith: function(otherRecognizer) {
return !!this.simultaneous[otherRecognizer.id];
},

emit: function(input) {
var self = this;
var state = this.state;

function emit(event) {
self.manager.emit(event, input);
}

if (state < STATE_ENDED) {
emit(self.options.event + stateStr(state));
}

emit(self.options.event); // simple 'eventName' events

if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
emit(input.additionalEvent);
}

if (state >= STATE_ENDED) {
emit(self.options.event + stateStr(state));
}
},

tryEmit: function(input) {
if (this.canEmit()) {
return this.emit(input);
}
this.state = STATE_FAILED;
},

canEmit: function() {
var i = 0;
while (i < this.requireFail.length) {
if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
return false;
}
i++;
}
return true;
},

recognize: function(inputData) {
var inputDataClone = assign({}, inputData);

if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
this.reset();
this.state = STATE_FAILED;
return;
}

if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
this.state = STATE_POSSIBLE;
}

this.state = this.process(inputDataClone);

if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
this.tryEmit(inputDataClone);
}
},

process: function(inputData) { }, // jshint ignore:line

getTouchAction: function() { },

reset: function() { }
};

function stateStr(state) {
if (state & STATE_CANCELLED) {
return 'cancel';
} else if (state & STATE_ENDED) {
return 'end';
} else if (state & STATE_CHANGED) {
return 'move';
} else if (state & STATE_BEGAN) {
return 'start';
}
return '';
}

function directionStr(direction) {
if (direction == DIRECTION_DOWN) {
return 'down';
} else if (direction == DIRECTION_UP) {
return 'up';
} else if (direction == DIRECTION_LEFT) {
return 'left';
} else if (direction == DIRECTION_RIGHT) {
return 'right';
}
return '';
}

function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
var manager = recognizer.manager;
if (manager) {
return manager.get(otherRecognizer);
}
return otherRecognizer;
}

function AttrRecognizer() {
Recognizer.apply(this, arguments);
}

inherit(AttrRecognizer, Recognizer, {
defaults: {
pointers: 1
},

attrTest: function(input) {
var optionPointers = this.options.pointers;
return optionPointers === 0 || input.pointers.length === optionPointers;
},

process: function(input) {
var state = this.state;
var eventType = input.eventType;

var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
var isValid = this.attrTest(input);

if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
return state | STATE_CANCELLED;
} else if (isRecognized || isValid) {
if (eventType & INPUT_END) {
return state | STATE_ENDED;
} else if (!(state & STATE_BEGAN)) {
return STATE_BEGAN;
}
return state | STATE_CHANGED;
}
return STATE_FAILED;
}
});

function PanRecognizer() {
AttrRecognizer.apply(this, arguments);

this.pX = null;
this.pY = null;
}

inherit(PanRecognizer, AttrRecognizer, {
defaults: {
event: 'pan',
threshold: 10,
pointers: 1,
direction: DIRECTION_ALL
},

getTouchAction: function() {
var direction = this.options.direction;
var actions = [];
if (direction & DIRECTION_HORIZONTAL) {
actions.push(TOUCH_ACTION_PAN_Y);
}
if (direction & DIRECTION_VERTICAL) {
actions.push(TOUCH_ACTION_PAN_X);
}
return actions;
},

directionTest: function(input) {
var options = this.options;
var hasMoved = true;
var distance = input.distance;
var direction = input.direction;
var x = input.deltaX;
var y = input.deltaY;

if (!(direction & options.direction)) {
if (options.direction & DIRECTION_HORIZONTAL) {
direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
hasMoved = x != this.pX;
distance = Math.abs(input.deltaX);
} else {
direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
hasMoved = y != this.pY;
distance = Math.abs(input.deltaY);
}
}
input.direction = direction;
return hasMoved && distance > options.threshold && direction & options.direction;
},

attrTest: function(input) {
return AttrRecognizer.prototype.attrTest.call(this, input) &&
(this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
},

emit: function(input) {

this.pX = input.deltaX;
this.pY = input.deltaY;

var direction = directionStr(input.direction);

if (direction) {
input.additionalEvent = this.options.event + direction;
}
this._super.emit.call(this, input);
}
});

function PinchRecognizer() {
AttrRecognizer.apply(this, arguments);
}

inherit(PinchRecognizer, AttrRecognizer, {
defaults: {
event: 'pinch',
threshold: 0,
pointers: 2
},

getTouchAction: function() {
return [TOUCH_ACTION_NONE];
},

attrTest: function(input) {
return this._super.attrTest.call(this, input) &&
(Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
},

emit: function(input) {
if (input.scale !== 1) {
var inOut = input.scale < 1 ? 'in' : 'out';
input.additionalEvent = this.options.event + inOut;
}
this._super.emit.call(this, input);
}
});

function PressRecognizer() {
Recognizer.apply(this, arguments);

this._timer = null;
this._input = null;
}

inherit(PressRecognizer, Recognizer, {
defaults: {
event: 'press',
pointers: 1,
time: 251, // minimal time of the pointer to be pressed
threshold: 9 // a minimal movement is ok, but keep it low
},

getTouchAction: function() {
return [TOUCH_ACTION_AUTO];
},

process: function(input) {
var options = this.options;
var validPointers = input.pointers.length === options.pointers;
var validMovement = input.distance < options.threshold;
var validTime = input.deltaTime > options.time;

this._input = input;

if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
this.reset();
} else if (input.eventType & INPUT_START) {
this.reset();
this._timer = setTimeoutContext(function() {
this.state = STATE_RECOGNIZED;
this.tryEmit();
}, options.time, this);
} else if (input.eventType & INPUT_END) {
return STATE_RECOGNIZED;
}
return STATE_FAILED;
},

reset: function() {
clearTimeout(this._timer);
},

emit: function(input) {
if (this.state !== STATE_RECOGNIZED) {
return;
}

if (input && (input.eventType & INPUT_END)) {
this.manager.emit(this.options.event + 'up', input);
} else {
this._input.timeStamp = now();
this.manager.emit(this.options.event, this._input);
}
}
});

function RotateRecognizer() {
AttrRecognizer.apply(this, arguments);
}

inherit(RotateRecognizer, AttrRecognizer, {
defaults: {
event: 'rotate',
threshold: 0,
pointers: 2
},

getTouchAction: function() {
return [TOUCH_ACTION_NONE];
},

attrTest: function(input) {
return this._super.attrTest.call(this, input) &&
(Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
}
});

function SwipeRecognizer() {
AttrRecognizer.apply(this, arguments);
}

inherit(SwipeRecognizer, AttrRecognizer, {
defaults: {
event: 'swipe',
threshold: 10,
velocity: 0.3,
direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
pointers: 1
},

getTouchAction: function() {
return PanRecognizer.prototype.getTouchAction.call(this);
},

attrTest: function(input) {
var direction = this.options.direction;
var velocity;

if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
velocity = input.overallVelocity;
} else if (direction & DIRECTION_HORIZONTAL) {
velocity = input.overallVelocityX;
} else if (direction & DIRECTION_VERTICAL) {
velocity = input.overallVelocityY;
}

return this._super.attrTest.call(this, input) &&
direction & input.offsetDirection &&
input.distance > this.options.threshold &&
input.maxPointers == this.options.pointers &&
abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
},

emit: function(input) {
var direction = directionStr(input.offsetDirection);
if (direction) {
this.manager.emit(this.options.event + direction, input);
}

this.manager.emit(this.options.event, input);
}
});

function TapRecognizer() {
Recognizer.apply(this, arguments);

this.pTime = false;
this.pCenter = false;

this._timer = null;
this._input = null;
this.count = 0;
}

inherit(TapRecognizer, Recognizer, {
defaults: {
event: 'tap',
pointers: 1,
taps: 1,
interval: 300, // max time between the multi-tap taps
time: 250, // max time of the pointer to be down (like finger on the screen)
threshold: 9, // a minimal movement is ok, but keep it low
posThreshold: 10 // a multi-tap can be a bit off the initial position
},

getTouchAction: function() {
return [TOUCH_ACTION_MANIPULATION];
},

process: function(input) {
var options = this.options;

var validPointers = input.pointers.length === options.pointers;
var validMovement = input.distance < options.threshold;
var validTouchTime = input.deltaTime < options.time;

this.reset();

if ((input.eventType & INPUT_START) && (this.count === 0)) {
return this.failTimeout();
}

if (validMovement && validTouchTime && validPointers) {
if (input.eventType != INPUT_END) {
return this.failTimeout();
}

var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

this.pTime = input.timeStamp;
this.pCenter = input.center;

if (!validMultiTap || !validInterval) {
this.count = 1;
} else {
this.count += 1;
}

this._input = input;

var tapCount = this.count % options.taps;
if (tapCount === 0) {
if (!this.hasRequireFailures()) {
return STATE_RECOGNIZED;
} else {
this._timer = setTimeoutContext(function() {
this.state = STATE_RECOGNIZED;
this.tryEmit();
}, options.interval, this);
return STATE_BEGAN;
}
}
}
return STATE_FAILED;
},

failTimeout: function() {
this._timer = setTimeoutContext(function() {
this.state = STATE_FAILED;
}, this.options.interval, this);
return STATE_FAILED;
},

reset: function() {
clearTimeout(this._timer);
},

emit: function() {
if (this.state == STATE_RECOGNIZED) {
this._input.tapCount = this.count;
this.manager.emit(this.options.event, this._input);
}
}
});

function Hammer(element, options) {
options = options || {};
options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
return new Manager(element, options);
}

Hammer.VERSION = '2.0.7';

Hammer.defaults = {
domEvents: false,

touchAction: TOUCH_ACTION_COMPUTE,

enable: true,

inputTarget: null,

inputClass: null,

preset: [
[RotateRecognizer, {enable: false}],
[PinchRecognizer, {enable: false}, ['rotate']],
[SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
[PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
[TapRecognizer],
[TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
[PressRecognizer]
],

cssProps: {
userSelect: 'none',

touchSelect: 'none',

touchCallout: 'none',

contentZooming: 'none',

userDrag: 'none',

tapHighlightColor: 'rgba(0,0,0,0)'
}
};

var STOP = 1;
var FORCED_STOP = 2;

function Manager(element, options) {
this.options = assign({}, Hammer.defaults, options || {});

this.options.inputTarget = this.options.inputTarget || element;

this.handlers = {};
this.session = {};
this.recognizers = [];
this.oldCssProps = {};

this.element = element;
this.input = createInputInstance(this);
this.touchAction = new TouchAction(this, this.options.touchAction);

toggleCssProps(this, true);

each(this.options.recognizers, function(item) {
var recognizer = this.add(new (item[0])(item[1]));
item[2] && recognizer.recognizeWith(item[2]);
item[3] && recognizer.requireFailure(item[3]);
}, this);
}

Manager.prototype = {
set: function(options) {
assign(this.options, options);

if (options.touchAction) {
this.touchAction.update();
}
if (options.inputTarget) {
this.input.destroy();
this.input.target = options.inputTarget;
this.input.init();
}
return this;
},

stop: function(force) {
this.session.stopped = force ? FORCED_STOP : STOP;
},

recognize: function(inputData) {
var session = this.session;
if (session.stopped) {
return;
}

this.touchAction.preventDefaults(inputData);

var recognizer;
var recognizers = this.recognizers;

var curRecognizer = session.curRecognizer;

if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
curRecognizer = session.curRecognizer = null;
}

var i = 0;
while (i < recognizers.length) {
recognizer = recognizers[i];

if (session.stopped !== FORCED_STOP && ( // 1
!curRecognizer || recognizer == curRecognizer || // 2
recognizer.canRecognizeWith(curRecognizer))) { // 3
recognizer.recognize(inputData);
} else {
recognizer.reset();
}

if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
curRecognizer = session.curRecognizer = recognizer;
}
i++;
}
},

get: function(recognizer) {
if (recognizer instanceof Recognizer) {
return recognizer;
}

var recognizers = this.recognizers;
for (var i = 0; i < recognizers.length; i++) {
if (recognizers[i].options.event == recognizer) {
return recognizers[i];
}
}
return null;
},

add: function(recognizer) {
if (invokeArrayArg(recognizer, 'add', this)) {
return this;
}

var existing = this.get(recognizer.options.event);
if (existing) {
this.remove(existing);
}

this.recognizers.push(recognizer);
recognizer.manager = this;

this.touchAction.update();
return recognizer;
},

remove: function(recognizer) {
if (invokeArrayArg(recognizer, 'remove', this)) {
return this;
}

recognizer = this.get(recognizer);

if (recognizer) {
var recognizers = this.recognizers;
var index = inArray(recognizers, recognizer);

if (index !== -1) {
recognizers.splice(index, 1);
this.touchAction.update();
}
}

return this;
},

on: function(events, handler) {
if (events === undefined) {
return;
}
if (handler === undefined) {
return;
}

var handlers = this.handlers;
each(splitStr(events), function(event) {
handlers[event] = handlers[event] || [];
handlers[event].push(handler);
});
return this;
},

off: function(events, handler) {
if (events === undefined) {
return;
}

var handlers = this.handlers;
each(splitStr(events), function(event) {
if (!handler) {
delete handlers[event];
} else {
handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
}
});
return this;
},

emit: function(event, data) {
if (this.options.domEvents) {
triggerDomEvent(event, data);
}

var handlers = this.handlers[event] && this.handlers[event].slice();
if (!handlers || !handlers.length) {
return;
}

data.type = event;
data.preventDefault = function() {
data.srcEvent.preventDefault();
};

var i = 0;
while (i < handlers.length) {
handlers[i](data);
i++;
}
},

destroy: function() {
this.element && toggleCssProps(this, false);

this.handlers = {};
this.session = {};
this.input.destroy();
this.element = null;
}
};

function toggleCssProps(manager, add) {
var element = manager.element;
if (!element.style) {
return;
}
var prop;
each(manager.options.cssProps, function(value, name) {
prop = prefixed(element.style, name);
if (add) {
manager.oldCssProps[prop] = element.style[prop];
element.style[prop] = value;
} else {
element.style[prop] = manager.oldCssProps[prop] || '';
}
});
if (!add) {
manager.oldCssProps = {};
}
}

function triggerDomEvent(event, data) {
var gestureEvent = document.createEvent('Event');
gestureEvent.initEvent(event, true, true);
gestureEvent.gesture = data;
data.target.dispatchEvent(gestureEvent);
}

assign(Hammer, {
INPUT_START: INPUT_START,
INPUT_MOVE: INPUT_MOVE,
INPUT_END: INPUT_END,
INPUT_CANCEL: INPUT_CANCEL,

STATE_POSSIBLE: STATE_POSSIBLE,
STATE_BEGAN: STATE_BEGAN,
STATE_CHANGED: STATE_CHANGED,
STATE_ENDED: STATE_ENDED,
STATE_RECOGNIZED: STATE_RECOGNIZED,
STATE_CANCELLED: STATE_CANCELLED,
STATE_FAILED: STATE_FAILED,

DIRECTION_NONE: DIRECTION_NONE,
DIRECTION_LEFT: DIRECTION_LEFT,
DIRECTION_RIGHT: DIRECTION_RIGHT,
DIRECTION_UP: DIRECTION_UP,
DIRECTION_DOWN: DIRECTION_DOWN,
DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
DIRECTION_VERTICAL: DIRECTION_VERTICAL,
DIRECTION_ALL: DIRECTION_ALL,

Manager: Manager,
Input: Input,
TouchAction: TouchAction,

TouchInput: TouchInput,
MouseInput: MouseInput,
PointerEventInput: PointerEventInput,
TouchMouseInput: TouchMouseInput,
SingleTouchInput: SingleTouchInput,

Recognizer: Recognizer,
AttrRecognizer: AttrRecognizer,
Tap: TapRecognizer,
Pan: PanRecognizer,
Swipe: SwipeRecognizer,
Pinch: PinchRecognizer,
Rotate: RotateRecognizer,
Press: PressRecognizer,

on: addEventListeners,
off: removeEventListeners,
each: each,
merge: merge,
extend: extend,
assign: assign,
inherit: inherit,
bindFn: bindFn,
prefixed: prefixed
});

var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
freeGlobal.Hammer = Hammer;

if (typeof define === 'function' && define.amd) {
define(function() {
return Hammer;
});
} else if (typeof module != 'undefined' && module.exports) {
module.exports = Hammer;
} else {
window[exportName] = Hammer;
}

})(window, document, 'Hammer');

/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* page included between the '@jessyinkstart' and the '@jessyinkend' notes.
*/

/*****  ******************************************************************
*
* Copyright 2008-2013 Hannes Hochreiner
*
* The JavaScript code included between the start note '@jessyinkstart'
* and the end note '@jessyinkend' is subject to the terms of the Mozilla
* Public License, v. 2.0. If a copy of the MPL was not distributed with
* this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Alternatively, you can redistribute and/or that part of this file
* under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see http://www.gnu.org/licenses/.
*/

/*****
*  You can find the complete source code of the JessyInk project at:
*  @source http://code.google.com/p/jessyink/
*/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* page included between the '@jessyinkstart' and the '@jessyinkend' notes.
*/


/*****
* @jessyinkstart
*
*  The following code is a derivative work of some parts of the JessyInk
*  project.
*  @source http://code.google.com/p/jessyink/
*/

function getElementsByProperty( node, name )
{
var elements = [];

if( node.getAttribute( name ) )
elements.push( node );

for( var counter = 0; counter < node.childNodes.length; ++counter )
{
if( node.childNodes[counter].nodeType == 1 )
{
var subElements = getElementsByProperty( node.childNodes[counter], name );
elements = elements.concat( subElements );
}
}
return elements;
}

function onKeyDown( aEvt )
{
if ( !aEvt )
aEvt = window.event;

var code = aEvt.keyCode || aEvt.charCode;


if (code == 0 && aEvt.key != undefined) {
switch (aEvt.key) {
case 'UIKeyInputLeftArrow':
code = LEFT_KEY;
break;
case 'UIKeyInputUpArrow':
code = UP_KEY;
break;
case 'UIKeyInputRightArrow':
code = RIGHT_KEY;
break;
case 'UIKeyInputDownArrow':
code = DOWN_KEY;
break;
}

}

if( !processingEffect && keyCodeDictionary[currentMode] && keyCodeDictionary[currentMode][code] )
{
return keyCodeDictionary[currentMode][code]();
}
else
{
document.onkeypress = onKeyPress;
return null;
}
}
document.onkeydown = onKeyDown;

function onKeyPress( aEvt )
{
document.onkeypress = null;

if ( !aEvt )
aEvt = window.event;

var str = String.fromCharCode( aEvt.keyCode || aEvt.charCode );

if ( !processingEffect && charCodeDictionary[currentMode] && charCodeDictionary[currentMode][str] )
return charCodeDictionary[currentMode][str]();

return null;
}

function getDefaultKeyCodeDictionary()
{
var keyCodeDict = {};

keyCodeDict[SLIDE_MODE] = {};
keyCodeDict[INDEX_MODE] = {};

keyCodeDict[SLIDE_MODE][LEFT_KEY]
= function() { return aSlideShow.rewindEffect(); };
keyCodeDict[SLIDE_MODE][RIGHT_KEY]
= function() { return dispatchEffects(1); };
keyCodeDict[SLIDE_MODE][UP_KEY]
= function() { return aSlideShow.rewindEffect(); };
keyCodeDict[SLIDE_MODE][DOWN_KEY]
= function() { return skipEffects(1); };
keyCodeDict[SLIDE_MODE][PAGE_UP_KEY]
= function() { return aSlideShow.rewindAllEffects(); };
keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY]
= function() { return skipAllEffects(); };
keyCodeDict[SLIDE_MODE][HOME_KEY]
= function() { return aSlideShow.displaySlide( 0, true ); };
keyCodeDict[SLIDE_MODE][END_KEY]
= function() { return aSlideShow.displaySlide( theMetaDoc.nNumberOfSlides - 1, true ); };
keyCodeDict[SLIDE_MODE][SPACE_KEY]
= function() { return dispatchEffects(1); };
keyCodeDict[SLIDE_MODE][ESCAPE_KEY]
= function() { return aSlideShow.exitSlideShowInApp(); };
keyCodeDict[SLIDE_MODE][Q_KEY]
= function() { return aSlideShow.exitSlideShowInApp(); };

keyCodeDict[INDEX_MODE][LEFT_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - 1 ); };
keyCodeDict[INDEX_MODE][RIGHT_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + 1 ); };
keyCodeDict[INDEX_MODE][UP_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - theSlideIndexPage.indexColumns ); };
keyCodeDict[INDEX_MODE][DOWN_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + theSlideIndexPage.indexColumns ); };
keyCodeDict[INDEX_MODE][PAGE_UP_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - theSlideIndexPage.getTotalThumbnails() ); };
keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + theSlideIndexPage.getTotalThumbnails() ); };
keyCodeDict[INDEX_MODE][HOME_KEY]
= function() { return indexSetPageSlide( 0 ); };
keyCodeDict[INDEX_MODE][END_KEY]
= function() { return indexSetPageSlide( theMetaDoc.nNumberOfSlides - 1 ); };
keyCodeDict[INDEX_MODE][ENTER_KEY]
= function() { return toggleSlideIndex(); };
keyCodeDict[INDEX_MODE][SPACE_KEY]
= function() { return toggleSlideIndex(); };
keyCodeDict[INDEX_MODE][ESCAPE_KEY]
= function() { return abandonIndexMode(); };

return keyCodeDict;
}

function getDefaultCharCodeDictionary()
{
var charCodeDict = {};

charCodeDict[SLIDE_MODE] = {};
charCodeDict[INDEX_MODE] = {};

charCodeDict[SLIDE_MODE]['i']
= function () { return toggleSlideIndex(); };

charCodeDict[INDEX_MODE]['i']
= function () { return toggleSlideIndex(); };
charCodeDict[INDEX_MODE]['-']
= function () { return theSlideIndexPage.decreaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['=']
= function () { return theSlideIndexPage.increaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['+']
= function () { return theSlideIndexPage.increaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['0']
= function () { return theSlideIndexPage.resetNumberOfColumns(); };

return charCodeDict;
}


function slideOnMouseUp( aEvt )
{
if (!aEvt)
aEvt = window.event;

var nOffset = 0;

if( aEvt.button == 0 )
nOffset = 1;
else if( aEvt.button == 2 )
nOffset = -1;

if( 0 != nOffset )
dispatchEffects( nOffset );
return true; // the click has been handled
}

document.handleClick = slideOnMouseUp;


function slideOnMouseWheel(aEvt)
{
var delta = 0;

if (!aEvt)
aEvt = window.event;

if (aEvt.wheelDelta)
{ // IE Opera
delta = aEvt.wheelDelta/120;
}
else if (aEvt.detail)
{ // MOZ
delta = -aEvt.detail/3;
}

if (delta > 0)
skipEffects(-1);
else if (delta < 0)
skipEffects(1);

if (aEvt.preventDefault)
aEvt.preventDefault();

aEvt.returnValue = false;
}

if( window.addEventListener )
{
window.addEventListener( 'DOMMouseScroll', function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_WHEEL ); }, false );
}

window.onmousewheel
= function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_WHEEL ); };

function mouseHandlerDispatch( aEvt, anAction )
{
if( !aEvt )
aEvt = window.event;

var retVal = true;

if ( mouseHandlerDictionary[currentMode] && mouseHandlerDictionary[currentMode][anAction] )
{
var subRetVal = mouseHandlerDictionary[currentMode][anAction]( aEvt );

if( subRetVal != null && subRetVal != undefined )
retVal = subRetVal;
}

if( aEvt.preventDefault && !retVal )
aEvt.preventDefault();

aEvt.returnValue = retVal;

return retVal;
}

document.onmouseup = function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_UP ); };


function mouseClickHelper( aEvt )
{
if( !Detect.isMozilla )
{
var aWindowObject = document.defaultView;
if( aWindowObject )
{
var aTextSelection = aWindowObject.getSelection();
var sSelectedText =  aTextSelection.toString();
if( sSelectedText )
{
DBGLOG( 'text selection: ' + sSelectedText );
if( sLastSelectedText !== sSelectedText )
{
bTextHasBeenSelected = true;
sLastSelectedText = sSelectedText;
}
else
{
bTextHasBeenSelected = false;
}
return null;
}
else if( bTextHasBeenSelected )
{
bTextHasBeenSelected = false;
sLastSelectedText = '';
return null;
}
}
else
{
log( 'error: HyperlinkElement.handleClick: invalid window object.' );
}
}

var aSlideAnimationsHandler = theMetaDoc.aMetaSlideSet[nCurSlide].aSlideAnimationsHandler;
if( aSlideAnimationsHandler )
{
var aCurrentEventMultiplexer = aSlideAnimationsHandler.aEventMultiplexer;
if( aCurrentEventMultiplexer )
{
if( aCurrentEventMultiplexer.hasRegisteredMouseClickHandlers() )
{
return aCurrentEventMultiplexer.notifyMouseClick( aEvt );
}
}
}
return slideOnMouseUp( aEvt );
}


function getDefaultMouseHandlerDictionary()
{
var mouseHandlerDict = {};

mouseHandlerDict[SLIDE_MODE] = {};
mouseHandlerDict[INDEX_MODE] = {};

mouseHandlerDict[SLIDE_MODE][MOUSE_UP]
= mouseClickHelper;

mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL]
= function( aEvt ) { return slideOnMouseWheel( aEvt ); };

mouseHandlerDict[INDEX_MODE][MOUSE_UP]
= function( ) { return toggleSlideIndex(); };

return mouseHandlerDict;
}

function indexSetPageSlide( nIndex )
{
var aMetaSlideSet = theMetaDoc.aMetaSlideSet;
nIndex = getSafeIndex( nIndex, 0, aMetaSlideSet.length - 1 );

var nSelectedThumbnailIndex = nIndex % theSlideIndexPage.getTotalThumbnails();
var offset = nIndex - nSelectedThumbnailIndex;

if( offset < 0 )
offset = 0;

if( offset != INDEX_OFFSET )
{
INDEX_OFFSET = offset;
displayIndex( INDEX_OFFSET );
}

theSlideIndexPage.setSelection( nSelectedThumbnailIndex );
}


/*****
* @jessyinkend
*
*  The above code is a derivative work of some parts of the JessyInk project.
*  @source http://code.google.com/p/jessyink/
*/


/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* page included between the '@dojostart' and the '@dojoend' notes.
*/

/*****  **********************************************************************
*
*  The 'New' BSD License:
*  **********************
*  Copyright (c) 2005-2012, The Dojo Foundation
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions are met:
*
*    * Redistributions of source code must retain the above copyright notice,
*      this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above copyright notice,
*      this list of conditions and the following disclaimer in the documentation
*      and/or other materials provided with the distribution.
*    * Neither the name of the Dojo Foundation nor the names of its contributors
*      may be used to endorse or promote products derived from this software
*      without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
****************************************************************************/


/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* page included between the '@dojostart' and the '@dojoend' notes.
*/


/*****
* @dojostart
*
*  The following code is a derivative work of some part of the dojox.gfx library.
*  @source http://svn.dojotoolkit.org/src/dojox/trunk/_base/sniff.js
*/

function has( name )
{
return has.cache[name];
}

has.cache = {};

has.add = function( name, test )
{
has.cache[name] = test;
};

function configureDetectionTools()
{
if( !navigator )
{
log( 'error: configureDetectionTools: configuration failed' );
return null;
}

var n = navigator,
dua = n.userAgent,
dav = n.appVersion,
tv = parseFloat(dav);

has.add('air', dua.indexOf('AdobeAIR') >= 0);
has.add('khtml', dav.indexOf('Konqueror') >= 0 ? tv : undefined);
has.add('webkit', parseFloat(dua.split('WebKit/')[1]) || undefined);
has.add('chrome', parseFloat(dua.split('Chrome/')[1]) || undefined);
has.add('safari', dav.indexOf('Safari')>=0 && !has('chrome') ? parseFloat(dav.split('Version/')[1]) : undefined);
has.add('mac', dav.indexOf('Macintosh') >= 0);
has.add('quirks', document.compatMode == 'BackCompat');
has.add('ios', /iPhone|iPod|iPad/.test(dua));
has.add('android', parseFloat(dua.split('Android ')[1]) || undefined);

if(!has('webkit')){
if(dua.indexOf('Opera') >= 0){
has.add('opera', tv >= 9.8 ? parseFloat(dua.split('Version/')[1]) || tv : tv);
}

if(dua.indexOf('Gecko') >= 0 && !has('khtml') && !has('webkit')){
has.add('mozilla', tv);
}
if(has('mozilla')){
has.add('ff', parseFloat(dua.split('Firefox/')[1] || dua.split('Minefield/')[1]) || undefined);
}

if(document.all && !has('opera')){
var isIE = parseFloat(dav.split('MSIE ')[1]) || undefined;

var mode = document.documentMode;
if(mode && mode != 5 && Math.floor(isIE) != mode){
isIE = mode;
}

has.add('ie', isIE);
}

has.add('wii', typeof opera != 'undefined' && opera.wiiremote);
}

var detect =
{
isFF: has('ff'),

isIE: has('ie'),

isKhtml: has('khtml'),

isWebKit: has('webkit'),

isMozilla: has('mozilla'),
isMoz: has('mozilla'),

isOpera: has('opera'),

isSafari: has('safari'),

isChrome: has('chrome'),

isMac: has('mac'),

isIos: has('ios'),

isAndroid: has('android'),

isWii: has('wii'),

isQuirks: has('quirks'),

isAir: has('air')
};
return detect;
}

/*****
* @dojoend
*
*  The above code is a derivative work of some part of the dojox.gfx library.
*  @source http://svn.dojotoolkit.org/src/dojox/trunk/_base/sniff.js
*/

/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* file included between the '@svgpathstart' and the '@svgpathend' notes.
*/

/*****  **********************************************************************
*
*   Copyright 2015 The Chromium Authors. All rights reserved.
*
*   The Chromium Authors can be found at
*   http://src.chromium.org/svn/trunk/src/AUTHORS
*
*   Redistribution and use in source and binary forms, with or without
*   modification, are permitted provided that the following conditions are
*   met:
*
*   * Redistributions of source code must retain the above copyright
*   notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*   copyright notice, this list of conditions and the following disclaimer
*   in the documentation and/or other materials provided with the
*   distribution.
*   * Neither the name of Google Inc. nor the names of its
*   contributors may be used to endorse or promote products derived from
*   this software without specific prior written permission.
*
*   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*   'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
*   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
*   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
*   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
*   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
*   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
*   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
****************************************************************************/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* file included between the '@svgpathstart' and the '@svgpathend' notes.
*/


/*****
* @svgpathstart
*
*  The following code is a derivative work of some part of the SVGPathSeg API.
*
*  This API is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
*  SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
*  changes which were implemented in Firefox 43 and Chrome 46.
*
*  @source https://github.com/progers/pathseg
*/

(function() { 'use strict';
if (!('SVGPathSeg' in window)) {
window.SVGPathSeg = function(type, typeAsLetter, owningPathSegList) {
this.pathSegType = type;
this.pathSegTypeAsLetter = typeAsLetter;
this._owningPathSegList = owningPathSegList;
}

window.SVGPathSeg.prototype.classname = 'SVGPathSeg';

window.SVGPathSeg.PATHSEG_UNKNOWN = 0;
window.SVGPathSeg.PATHSEG_CLOSEPATH = 1;
window.SVGPathSeg.PATHSEG_MOVETO_ABS = 2;
window.SVGPathSeg.PATHSEG_MOVETO_REL = 3;
window.SVGPathSeg.PATHSEG_LINETO_ABS = 4;
window.SVGPathSeg.PATHSEG_LINETO_REL = 5;
window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;
window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;
window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;
window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;
window.SVGPathSeg.PATHSEG_ARC_ABS = 10;
window.SVGPathSeg.PATHSEG_ARC_REL = 11;
window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;
window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;
window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;
window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;
window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;
window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;
window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;
window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;

window.SVGPathSeg.prototype._segmentChanged = function() {
if (this._owningPathSegList)
this._owningPathSegList.segmentChanged(this);
}

window.SVGPathSegClosePath = function(owningPathSegList) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CLOSEPATH, 'z', owningPathSegList);
}
window.SVGPathSegClosePath.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegClosePath.prototype.toString = function() { return '[object SVGPathSegClosePath]'; }
window.SVGPathSegClosePath.prototype._asPathString = function() { return this.pathSegTypeAsLetter; }
window.SVGPathSegClosePath.prototype.clone = function() { return new window.SVGPathSegClosePath(undefined); }

window.SVGPathSegMovetoAbs = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_ABS, 'M', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegMovetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegMovetoAbs.prototype.toString = function() { return '[object SVGPathSegMovetoAbs]'; }
window.SVGPathSegMovetoAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegMovetoAbs.prototype.clone = function() { return new window.SVGPathSegMovetoAbs(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegMovetoRel = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_REL, 'm', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegMovetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegMovetoRel.prototype.toString = function() { return '[object SVGPathSegMovetoRel]'; }
window.SVGPathSegMovetoRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegMovetoRel.prototype.clone = function() { return new window.SVGPathSegMovetoRel(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegMovetoRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegMovetoRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoAbs = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_ABS, 'L', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegLinetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoAbs.prototype.toString = function() { return '[object SVGPathSegLinetoAbs]'; }
window.SVGPathSegLinetoAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegLinetoAbs.prototype.clone = function() { return new window.SVGPathSegLinetoAbs(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoRel = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_REL, 'l', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegLinetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoRel.prototype.toString = function() { return '[object SVGPathSegLinetoRel]'; }
window.SVGPathSegLinetoRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegLinetoRel.prototype.clone = function() { return new window.SVGPathSegLinetoRel(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegLinetoRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegLinetoRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicAbs = function(owningPathSegList, x, y, x1, y1, x2, y2) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, 'C', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
this._x2 = x2;
this._y2 = y2;
}
window.SVGPathSegCurvetoCubicAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoCubicAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicAbs]'; }
window.SVGPathSegCurvetoCubicAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoCubicAbs.prototype.clone = function() { return new window.SVGPathSegCurvetoCubicAbs(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2); }
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicRel = function(owningPathSegList, x, y, x1, y1, x2, y2) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, 'c', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
this._x2 = x2;
this._y2 = y2;
}
window.SVGPathSegCurvetoCubicRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoCubicRel.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicRel]'; }
window.SVGPathSegCurvetoCubicRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoCubicRel.prototype.clone = function() { return new window.SVGPathSegCurvetoCubicRel(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2); }
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticAbs = function(owningPathSegList, x, y, x1, y1) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, 'Q', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
}
window.SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoQuadraticAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticAbs]'; }
window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoQuadraticAbs.prototype.clone = function() { return new window.SVGPathSegCurvetoQuadraticAbs(undefined, this._x, this._y, this._x1, this._y1); }
Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticRel = function(owningPathSegList, x, y, x1, y1) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, 'q', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
}
window.SVGPathSegCurvetoQuadraticRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoQuadraticRel.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticRel]'; }
window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoQuadraticRel.prototype.clone = function() { return new window.SVGPathSegCurvetoQuadraticRel(undefined, this._x, this._y, this._x1, this._y1); }
Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegArcAbs = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_ABS, 'A', owningPathSegList);
this._x = x;
this._y = y;
this._r1 = r1;
this._r2 = r2;
this._angle = angle;
this._largeArcFlag = largeArcFlag;
this._sweepFlag = sweepFlag;
}
window.SVGPathSegArcAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegArcAbs.prototype.toString = function() { return '[object SVGPathSegArcAbs]'; }
window.SVGPathSegArcAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._r1 + ' ' + this._r2 + ' ' + this._angle + ' ' + (this._largeArcFlag ? '1' : '0') + ' ' + (this._sweepFlag ? '1' : '0') + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegArcAbs.prototype.clone = function() { return new window.SVGPathSegArcAbs(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag); }
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'r1', { get: function() { return this._r1; }, set: function(r1) { this._r1 = r1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'r2', { get: function() { return this._r2; }, set: function(r2) { this._r2 = r2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'angle', { get: function() { return this._angle; }, set: function(angle) { this._angle = angle; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'largeArcFlag', { get: function() { return this._largeArcFlag; }, set: function(largeArcFlag) { this._largeArcFlag = largeArcFlag; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'sweepFlag', { get: function() { return this._sweepFlag; }, set: function(sweepFlag) { this._sweepFlag = sweepFlag; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegArcRel = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_REL, 'a', owningPathSegList);
this._x = x;
this._y = y;
this._r1 = r1;
this._r2 = r2;
this._angle = angle;
this._largeArcFlag = largeArcFlag;
this._sweepFlag = sweepFlag;
}
window.SVGPathSegArcRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegArcRel.prototype.toString = function() { return '[object SVGPathSegArcRel]'; }
window.SVGPathSegArcRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._r1 + ' ' + this._r2 + ' ' + this._angle + ' ' + (this._largeArcFlag ? '1' : '0') + ' ' + (this._sweepFlag ? '1' : '0') + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegArcRel.prototype.clone = function() { return new window.SVGPathSegArcRel(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag); }
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'r1', { get: function() { return this._r1; }, set: function(r1) { this._r1 = r1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'r2', { get: function() { return this._r2; }, set: function(r2) { this._r2 = r2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'angle', { get: function() { return this._angle; }, set: function(angle) { this._angle = angle; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'largeArcFlag', { get: function() { return this._largeArcFlag; }, set: function(largeArcFlag) { this._largeArcFlag = largeArcFlag; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'sweepFlag', { get: function() { return this._sweepFlag; }, set: function(sweepFlag) { this._sweepFlag = sweepFlag; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoHorizontalAbs = function(owningPathSegList, x) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, 'H', owningPathSegList);
this._x = x;
}
window.SVGPathSegLinetoHorizontalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoHorizontalAbs.prototype.toString = function() { return '[object SVGPathSegLinetoHorizontalAbs]'; }
window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x; }
window.SVGPathSegLinetoHorizontalAbs.prototype.clone = function() { return new window.SVGPathSegLinetoHorizontalAbs(undefined, this._x); }
Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoHorizontalRel = function(owningPathSegList, x) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, 'h', owningPathSegList);
this._x = x;
}
window.SVGPathSegLinetoHorizontalRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoHorizontalRel.prototype.toString = function() { return '[object SVGPathSegLinetoHorizontalRel]'; }
window.SVGPathSegLinetoHorizontalRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x; }
window.SVGPathSegLinetoHorizontalRel.prototype.clone = function() { return new window.SVGPathSegLinetoHorizontalRel(undefined, this._x); }
Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoVerticalAbs = function(owningPathSegList, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, 'V', owningPathSegList);
this._y = y;
}
window.SVGPathSegLinetoVerticalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoVerticalAbs.prototype.toString = function() { return '[object SVGPathSegLinetoVerticalAbs]'; }
window.SVGPathSegLinetoVerticalAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._y; }
window.SVGPathSegLinetoVerticalAbs.prototype.clone = function() { return new window.SVGPathSegLinetoVerticalAbs(undefined, this._y); }
Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoVerticalRel = function(owningPathSegList, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, 'v', owningPathSegList);
this._y = y;
}
window.SVGPathSegLinetoVerticalRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoVerticalRel.prototype.toString = function() { return '[object SVGPathSegLinetoVerticalRel]'; }
window.SVGPathSegLinetoVerticalRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._y; }
window.SVGPathSegLinetoVerticalRel.prototype.clone = function() { return new window.SVGPathSegLinetoVerticalRel(undefined, this._y); }
Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicSmoothAbs = function(owningPathSegList, x, y, x2, y2) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, 'S', owningPathSegList);
this._x = x;
this._y = y;
this._x2 = x2;
this._y2 = y2;
}
window.SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicSmoothAbs]'; }
window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function() { return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, this._x, this._y, this._x2, this._y2); }
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicSmoothRel = function(owningPathSegList, x, y, x2, y2) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, 's', owningPathSegList);
this._x = x;
this._y = y;
this._x2 = x2;
this._y2 = y2;
}
window.SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicSmoothRel]'; }
window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function() { return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, this._x, this._y, this._x2, this._y2); }
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticSmoothAbs = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, 'T', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticSmoothAbs]'; }
window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function() { return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticSmoothRel = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, 't', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticSmoothRel]'; }
window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function() { return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathElement.prototype.createSVGPathSegClosePath = function() { return new window.SVGPathSegClosePath(undefined); }
window.SVGPathElement.prototype.createSVGPathSegMovetoAbs = function(x, y) { return new window.SVGPathSegMovetoAbs(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegMovetoRel = function(x, y) { return new window.SVGPathSegMovetoRel(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegLinetoAbs = function(x, y) { return new window.SVGPathSegLinetoAbs(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegLinetoRel = function(x, y) { return new window.SVGPathSegLinetoRel(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function(x, y, x1, y1, x2, y2) { return new window.SVGPathSegCurvetoCubicAbs(undefined, x, y, x1, y1, x2, y2); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function(x, y, x1, y1, x2, y2) { return new window.SVGPathSegCurvetoCubicRel(undefined, x, y, x1, y1, x2, y2); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function(x, y, x1, y1) { return new window.SVGPathSegCurvetoQuadraticAbs(undefined, x, y, x1, y1); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function(x, y, x1, y1) { return new window.SVGPathSegCurvetoQuadraticRel(undefined, x, y, x1, y1); }
window.SVGPathElement.prototype.createSVGPathSegArcAbs = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { return new window.SVGPathSegArcAbs(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag); }
window.SVGPathElement.prototype.createSVGPathSegArcRel = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { return new window.SVGPathSegArcRel(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag); }
window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function(x) { return new window.SVGPathSegLinetoHorizontalAbs(undefined, x); }
window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function(x) { return new window.SVGPathSegLinetoHorizontalRel(undefined, x); }
window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function(y) { return new window.SVGPathSegLinetoVerticalAbs(undefined, y); }
window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function(y) { return new window.SVGPathSegLinetoVerticalRel(undefined, y); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function(x, y, x2, y2) { return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, x, y, x2, y2); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function(x, y, x2, y2) { return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, x, y, x2, y2); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function(x, y) { return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function(x, y) { return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, x, y); }

if (!('getPathSegAtLength' in window.SVGPathElement.prototype)) {
window.SVGPathElement.prototype.getPathSegAtLength = function(distance) {
if (distance === undefined || !isFinite(distance))
throw 'Invalid arguments.';

var measurementElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');
measurementElement.setAttribute('d', this.getAttribute('d'));
var lastPathSegment = measurementElement.pathSegList.numberOfItems - 1;

if (lastPathSegment <= 0)
return 0;

do {
measurementElement.pathSegList.removeItem(lastPathSegment);
if (distance > measurementElement.getTotalLength())
break;
lastPathSegment--;
} while (lastPathSegment > 0);
return lastPathSegment;
}
}
}

if (!('SVGPathSegList' in window) || !('appendItem' in window.SVGPathSegList.prototype)) {
window.SVGPathSegList = function(pathElement) {
this._pathElement = pathElement;
this._list = this._parsePath(this._pathElement.getAttribute('d'));

this._mutationObserverConfig = { 'attributes': true, 'attributeFilter': ['d'] };
this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));
this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
}

window.SVGPathSegList.prototype.classname = 'SVGPathSegList';

Object.defineProperty(window.SVGPathSegList.prototype, 'numberOfItems', {
get: function() {
this._checkPathSynchronizedToList();
return this._list.length;
},
enumerable: true
});

Object.defineProperty(window.SVGPathSegList.prototype, 'length', {
get: function() {
this._checkPathSynchronizedToList();
return this._list.length;
},
enumerable: true
});

Object.defineProperty(window.SVGPathElement.prototype, 'pathSegList', {
get: function() {
if (!this._pathSegList)
this._pathSegList = new window.SVGPathSegList(this);
return this._pathSegList;
},
enumerable: true
});
Object.defineProperty(window.SVGPathElement.prototype, 'normalizedPathSegList', { get: function() { return this.pathSegList; }, enumerable: true });
Object.defineProperty(window.SVGPathElement.prototype, 'animatedPathSegList', { get: function() { return this.pathSegList; }, enumerable: true });
Object.defineProperty(window.SVGPathElement.prototype, 'animatedNormalizedPathSegList', { get: function() { return this.pathSegList; }, enumerable: true });

window.SVGPathSegList.prototype._checkPathSynchronizedToList = function() {
this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords());
}

window.SVGPathSegList.prototype._updateListFromPathMutations = function(mutationRecords) {
if (!this._pathElement)
return;
var hasPathMutations = false;
mutationRecords.forEach(function(record) {
if (record.attributeName == 'd')
hasPathMutations = true;
});
if (hasPathMutations)
this._list = this._parsePath(this._pathElement.getAttribute('d'));
}

window.SVGPathSegList.prototype._writeListToPath = function() {
this._pathElementMutationObserver.disconnect();
this._pathElement.setAttribute('d', window.SVGPathSegList._pathSegArrayAsString(this._list));
this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
}

window.SVGPathSegList.prototype.segmentChanged = function(pathSeg) {
this._writeListToPath();
}

window.SVGPathSegList.prototype.clear = function() {
this._checkPathSynchronizedToList();

this._list.forEach(function(pathSeg) {
pathSeg._owningPathSegList = null;
});
this._list = [];
this._writeListToPath();
}

window.SVGPathSegList.prototype.initialize = function(newItem) {
this._checkPathSynchronizedToList();

this._list = [newItem];
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
}

window.SVGPathSegList.prototype._checkValidIndex = function(index) {
if (isNaN(index) || index < 0 || index >= this.numberOfItems)
throw 'INDEX_SIZE_ERR';
}

window.SVGPathSegList.prototype.getItem = function(index) {
this._checkPathSynchronizedToList();

this._checkValidIndex(index);
return this._list[index];
}

window.SVGPathSegList.prototype.insertItemBefore = function(newItem, index) {
this._checkPathSynchronizedToList();

if (index > this.numberOfItems)
index = this.numberOfItems;
if (newItem._owningPathSegList) {
newItem = newItem.clone();
}
this._list.splice(index, 0, newItem);
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
}

window.SVGPathSegList.prototype.replaceItem = function(newItem, index) {
this._checkPathSynchronizedToList();

if (newItem._owningPathSegList) {
newItem = newItem.clone();
}
this._checkValidIndex(index);
this._list[index] = newItem;
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
}

window.SVGPathSegList.prototype.removeItem = function(index) {
this._checkPathSynchronizedToList();

this._checkValidIndex(index);
var item = this._list[index];
this._list.splice(index, 1);
this._writeListToPath();
return item;
}

window.SVGPathSegList.prototype.appendItem = function(newItem) {
this._checkPathSynchronizedToList();

if (newItem._owningPathSegList) {
newItem = newItem.clone();
}
this._list.push(newItem);
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
};

window.SVGPathSegList.prototype.matrixTransform = function(aSVGMatrix) {
this._checkPathSynchronizedToList();

var nLength = this._list.length;
for( var i = 0; i < nLength; ++i )
{
var nX;
var aPathSeg = this._list[i];
switch( aPathSeg.pathSegTypeAsLetter )
{
case 'C':
nX = aPathSeg._x2;
aPathSeg._x2 = aSVGMatrix.a * nX + aSVGMatrix.c * aPathSeg._y2 + aSVGMatrix.e;
aPathSeg._y2 = aSVGMatrix.b * nX + aSVGMatrix.d * aPathSeg._y2 + aSVGMatrix.f;
case 'Q':
nX = aPathSeg._x1;
aPathSeg._x1 = aSVGMatrix.a * nX + aSVGMatrix.c * aPathSeg._y1 + aSVGMatrix.e;
aPathSeg._y1 = aSVGMatrix.b * nX + aSVGMatrix.d * aPathSeg._y1 + aSVGMatrix.f;
case 'M':
case 'L':
nX = aPathSeg._x;
aPathSeg._x = aSVGMatrix.a * nX + aSVGMatrix.c * aPathSeg._y + aSVGMatrix.e;
aPathSeg._y = aSVGMatrix.b * nX + aSVGMatrix.d * aPathSeg._y + aSVGMatrix.f;
break;
default:
log( 'SVGPathSeg.matrixTransform: unexpected path segment type: '
+ aPathSeg.pathSegTypeAsLetter );
}
}

this._writeListToPath();
};

window.SVGPathSegList.prototype.changeOrientation = function() {
this._checkPathSynchronizedToList();

var aPathSegList = this._list;
var nLength = aPathSegList.length;
if( nLength == 0 ) return;

var nCurrentX = 0;
var nCurrentY = 0;

var aPathSeg = aPathSegList[0];
if( aPathSeg.pathSegTypeAsLetter == 'M' )
{
nCurrentX = aPathSeg.x;
nCurrentY = aPathSeg.y;
aPathSegList.shift();
--nLength;
}

var i;
for( i = 0; i < nLength; ++i )
{
aPathSeg = aPathSegList[i];
switch( aPathSeg.pathSegTypeAsLetter )
{
case 'C':
var nX = aPathSeg._x1;
aPathSeg._x1 = aPathSeg._x2;
aPathSeg._x2 = nX;
var nY = aPathSeg._y1;
aPathSeg._y1 = aPathSeg._y2;
aPathSeg._y2 = nY;
case 'M':
case 'L':
case 'Q':
var aPoint = { x: aPathSeg._x, y: aPathSeg._y };
aPathSeg._x = nCurrentX;
aPathSeg._y = nCurrentY;
nCurrentX = aPoint.x;
nCurrentY = aPoint.y;
break;
default:
log( 'SVGPathSegList.changeOrientation: unexpected path segment type: '
+ aPathSeg.pathSegTypeAsLetter );
}

}

aPathSegList.reverse();

var aMovePathSeg = new window.SVGPathSegMovetoAbs( this, nCurrentX, nCurrentY );
aPathSegList.unshift( aMovePathSeg );

this._writeListToPath();
};

window.SVGPathSegList._pathSegArrayAsString = function(pathSegArray) {
var string = '';
var first = true;
pathSegArray.forEach(function(pathSeg) {
if (first) {
first = false;
string += pathSeg._asPathString();
} else {
string += ' ' + pathSeg._asPathString();
}
});
return string;
}

window.SVGPathSegList.prototype._parsePath = function(string) {
if (!string || string.length == 0)
return [];

var owningPathSegList = this;

var Builder = function() {
this.pathSegList = [];
}

Builder.prototype.appendSegment = function(pathSeg) {
this.pathSegList.push(pathSeg);
}

var Source = function(string) {
this._string = string;
this._currentIndex = 0;
this._endIndex = this._string.length;
this._previousCommand = window.SVGPathSeg.PATHSEG_UNKNOWN;

this._skipOptionalSpaces();
}

Source.prototype._isCurrentSpace = function() {
var character = this._string[this._currentIndex];
return character <= ' ' && (character == ' ' || character == '\n' || character == '\t' || character == '\r' || character == '\f');
}

Source.prototype._skipOptionalSpaces = function() {
while (this._currentIndex < this._endIndex && this._isCurrentSpace())
this._currentIndex++;
return this._currentIndex < this._endIndex;
}

Source.prototype._skipOptionalSpacesOrDelimiter = function() {
if (this._currentIndex < this._endIndex && !this._isCurrentSpace() && this._string.charAt(this._currentIndex) != ',')
return false;
if (this._skipOptionalSpaces()) {
if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ',') {
this._currentIndex++;
this._skipOptionalSpaces();
}
}
return this._currentIndex < this._endIndex;
}

Source.prototype.hasMoreData = function() {
return this._currentIndex < this._endIndex;
}

Source.prototype.peekSegmentType = function() {
var lookahead = this._string[this._currentIndex];
return this._pathSegTypeFromChar(lookahead);
}

Source.prototype._pathSegTypeFromChar = function(lookahead) {
switch (lookahead) {
case 'Z':
case 'z':
return window.SVGPathSeg.PATHSEG_CLOSEPATH;
case 'M':
return window.SVGPathSeg.PATHSEG_MOVETO_ABS;
case 'm':
return window.SVGPathSeg.PATHSEG_MOVETO_REL;
case 'L':
return window.SVGPathSeg.PATHSEG_LINETO_ABS;
case 'l':
return window.SVGPathSeg.PATHSEG_LINETO_REL;
case 'C':
return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;
case 'c':
return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;
case 'Q':
return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;
case 'q':
return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;
case 'A':
return window.SVGPathSeg.PATHSEG_ARC_ABS;
case 'a':
return window.SVGPathSeg.PATHSEG_ARC_REL;
case 'H':
return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;
case 'h':
return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;
case 'V':
return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;
case 'v':
return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;
case 'S':
return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;
case 's':
return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
case 'T':
return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;
case 't':
return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;
default:
return window.SVGPathSeg.PATHSEG_UNKNOWN;
}
}

Source.prototype._nextCommandHelper = function(lookahead, previousCommand) {
if ((lookahead == '+' || lookahead == '-' || lookahead == '.' || (lookahead >= '0' && lookahead <= '9')) && previousCommand != window.SVGPathSeg.PATHSEG_CLOSEPATH) {
if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_ABS)
return window.SVGPathSeg.PATHSEG_LINETO_ABS;
if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_REL)
return window.SVGPathSeg.PATHSEG_LINETO_REL;
return previousCommand;
}
return window.SVGPathSeg.PATHSEG_UNKNOWN;
}

Source.prototype.initialCommandIsMoveTo = function() {
if (!this.hasMoreData())
return true;
var command = this.peekSegmentType();
return command == window.SVGPathSeg.PATHSEG_MOVETO_ABS || command == window.SVGPathSeg.PATHSEG_MOVETO_REL;
}

Source.prototype._parseNumber = function() {
var exponent = 0;
var integer = 0;
var frac = 1;
var decimal = 0;
var sign = 1;
var expsign = 1;

var startIndex = this._currentIndex;

this._skipOptionalSpaces();

if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == '+')
this._currentIndex++;
else if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == '-') {
this._currentIndex++;
sign = -1;
}

if (this._currentIndex == this._endIndex || ((this._string.charAt(this._currentIndex) < '0' || this._string.charAt(this._currentIndex) > '9') && this._string.charAt(this._currentIndex) != '.'))
return undefined;

var startIntPartIndex = this._currentIndex;
while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= '0' && this._string.charAt(this._currentIndex) <= '9')
this._currentIndex++; // Advance to first non-digit.

if (this._currentIndex != startIntPartIndex) {
var scanIntPartIndex = this._currentIndex - 1;
var multiplier = 1;
while (scanIntPartIndex >= startIntPartIndex) {
integer += multiplier * (this._string.charAt(scanIntPartIndex--) - '0');
multiplier *= 10;
}
}

if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == '.') {
this._currentIndex++;

if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < '0' || this._string.charAt(this._currentIndex) > '9')
return undefined;
while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= '0' && this._string.charAt(this._currentIndex) <= '9') {
frac *= 10;
decimal += (this._string.charAt(this._currentIndex) - '0') / frac;
this._currentIndex += 1;
}
}

if (this._currentIndex != startIndex && this._currentIndex + 1 < this._endIndex && (this._string.charAt(this._currentIndex) == 'e' || this._string.charAt(this._currentIndex) == 'E') && (this._string.charAt(this._currentIndex + 1) != 'x' && this._string.charAt(this._currentIndex + 1) != 'm')) {
this._currentIndex++;

if (this._string.charAt(this._currentIndex) == '+') {
this._currentIndex++;
} else if (this._string.charAt(this._currentIndex) == '-') {
this._currentIndex++;
expsign = -1;
}

if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < '0' || this._string.charAt(this._currentIndex) > '9')
return undefined;

while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= '0' && this._string.charAt(this._currentIndex) <= '9') {
exponent *= 10;
exponent += (this._string.charAt(this._currentIndex) - '0');
this._currentIndex++;
}
}

var number = integer + decimal;
number *= sign;

if (exponent)
number *= Math.pow(10, expsign * exponent);

if (startIndex == this._currentIndex)
return undefined;

this._skipOptionalSpacesOrDelimiter();

return number;
}

Source.prototype._parseArcFlag = function() {
if (this._currentIndex >= this._endIndex)
return undefined;
var flag = false;
var flagChar = this._string.charAt(this._currentIndex++);
if (flagChar == '0')
flag = false;
else if (flagChar == '1')
flag = true;
else
return undefined;

this._skipOptionalSpacesOrDelimiter();
return flag;
}

Source.prototype.parseSegment = function() {
var lookahead = this._string[this._currentIndex];
var command = this._pathSegTypeFromChar(lookahead);
if (command == window.SVGPathSeg.PATHSEG_UNKNOWN) {
if (this._previousCommand == window.SVGPathSeg.PATHSEG_UNKNOWN)
return null;
command = this._nextCommandHelper(lookahead, this._previousCommand);
if (command == window.SVGPathSeg.PATHSEG_UNKNOWN)
return null;
} else {
this._currentIndex++;
}

this._previousCommand = command;

switch (command) {
case window.SVGPathSeg.PATHSEG_MOVETO_REL:
return new window.SVGPathSegMovetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_MOVETO_ABS:
return new window.SVGPathSegMovetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_REL:
return new window.SVGPathSegLinetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_ABS:
return new window.SVGPathSegLinetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:
return new window.SVGPathSegLinetoHorizontalRel(owningPathSegList, this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:
return new window.SVGPathSegLinetoHorizontalAbs(owningPathSegList, this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:
return new window.SVGPathSegLinetoVerticalRel(owningPathSegList, this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:
return new window.SVGPathSegLinetoVerticalAbs(owningPathSegList, this._parseNumber());
case window.SVGPathSeg.PATHSEG_CLOSEPATH:
this._skipOptionalSpaces();
return new window.SVGPathSegClosePath(owningPathSegList);
case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoCubicRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoCubicAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:
var points = {x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoCubicSmoothRel(owningPathSegList, points.x, points.y, points.x2, points.y2);
case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:
var points = {x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoCubicSmoothAbs(owningPathSegList, points.x, points.y, points.x2, points.y2);
case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoQuadraticRel(owningPathSegList, points.x, points.y, points.x1, points.y1);
case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoQuadraticAbs(owningPathSegList, points.x, points.y, points.x1, points.y1);
case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:
return new window.SVGPathSegCurvetoQuadraticSmoothRel(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:
return new window.SVGPathSegCurvetoQuadraticSmoothAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_ARC_REL:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegArcRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
case window.SVGPathSeg.PATHSEG_ARC_ABS:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegArcAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
default:
throw 'Unknown path seg type.'
}
}

var builder = new Builder();
var source = new Source(string);

if (!source.initialCommandIsMoveTo())
return [];
while (source.hasMoreData()) {
var pathSeg = source.parseSegment();
if (!pathSeg)
return [];
builder.appendSegment(pathSeg);
}

return builder.pathSegList;
}
}
}());

/*****
* @svgpathend
*
*  The above code is a derivative work of some part of the SVGPathSeg API.
*
*  This API is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
*  SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
*  changes which were implemented in Firefox 43 and Chrome 46.
*
*  @source https://github.com/progers/pathseg
*/


/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code  of
* this page included between the '@libreofficestart' and the '@libreofficeend'
* notes.
*/

/*****  ******************************************************************
*
* This file is part of the LibreOffice project.
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* This file incorporates work covered by the following license notice:
*
*   Licensed to the Apache Software Foundation (ASF) under one or more
*   contributor license agreements. See the NOTICE file distributed
*   with this work for additional information regarding copyright
*   ownership. The ASF licenses this file to you under the Apache
*   License, Version 2.0 (the 'License'); you may not use this file
*   except in compliance with the License. You may obtain a copy of
*   the License at http://www.apache.org/licenses/LICENSE-2.0 .
*
************************************************************************/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code  of
* this page included between the '@libreofficestart' and the '@libreofficeend'
* notes.
*/


/*****
* @libreofficestart
*
* Several parts of the following code are the result of the porting,
* started on August 2011, of the C++ code included in the source
* files placed under the folder '/slideshow/source' and
* sub-folders. This got later rebased onto the AL2-licensed versions
* of those files in early 2013.
* @source https://cgit.freedesktop.org/libreoffice/core/tree/slideshow/source
*
*/


window.onload = init;


var aOOOElemMetaSlides = 'ooo:meta_slides';
var aOOOElemMetaSlide = 'ooo:meta_slide';
var aOOOElemTextField = 'ooo:text_field';
var aPresentationClipPathId = 'presentation_clip_path';
var aPresentationClipPathShrinkId = 'presentation_clip_path_shrink';

var aOOOAttrNumberOfSlides = 'number-of-slides';
var aOOOAttrStartSlideNumber= 'start-slide-number';
var aOOOAttrNumberingType = 'page-numbering-type';
var aOOOAttrListItemNumberingType= 'numbering-type';
var aOOOAttrUsePositionedChars = 'use-positioned-chars';

var aOOOAttrSlide = 'slide';
var aOOOAttrMaster = 'master';
var aOOOAttrSlideDuration = 'slide-duration';
var aOOOAttrHasTransition = 'has-transition';
var aOOOAttrBackgroundVisibility = 'background-visibility';
var aOOOAttrMasterObjectsVisibility = 'master-objects-visibility';
var aOOOAttrPageNumberVisibility = 'page-number-visibility';
var aOOOAttrDateTimeVisibility = 'date-time-visibility';
var aOOOAttrFooterVisibility = 'footer-visibility';
var aOOOAttrHeaderVisibility = 'header-visibility';
var aOOOAttrDateTimeField = 'date-time-field';
var aOOOAttrFooterField = 'footer-field';
var aOOOAttrHeaderField = 'header-field';

var aOOOAttrDateTimeFormat = 'date-time-format';

var aOOOAttrTextAdjust = 'text-adjust';

var aClipPathGroupClassName = 'ClipPathGroup';
var aPageClassName = 'Page';
var aSlideNumberClassName = 'Slide_Number';
var aDateTimeClassName = 'Date/Time';
var aFooterClassName = 'Footer';
var aHeaderClassName = 'Header';

var NSS = {};
NSS['svg']='http://www.w3.org/2000/svg';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['ooo'] = 'http://xml.openoffice.org/svg/export';
NSS['presentation'] = 'http://sun.com/xmlns/staroffice/presentation';
NSS['smil'] = 'http://www.w3.org/2001/SMIL20/';
NSS['anim'] = 'urn:oasis:names:tc:opendocument:xmlns:animation:1.0';

var SLIDE_MODE = 1;
var INDEX_MODE = 2;

var MOUSE_UP = 1;
var MOUSE_DOWN = 2; // eslint-disable-line no-unused-vars
var MOUSE_MOVE = 3; // eslint-disable-line no-unused-vars
var MOUSE_WHEEL = 4;

var LEFT_KEY = 37;          // cursor left keycode
var UP_KEY = 38;            // cursor up keycode
var RIGHT_KEY = 39;         // cursor right keycode
var DOWN_KEY = 40;          // cursor down keycode
var PAGE_UP_KEY = 33;       // page up keycode
var PAGE_DOWN_KEY = 34;     // page down keycode
var HOME_KEY = 36;          // home keycode
var END_KEY = 35;           // end keycode
var ENTER_KEY = 13;
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;
var Q_KEY = 81;

var HIDDEN = 0;
var VISIBLE = 1;
var INHERIT = 2;
var aVisibilityAttributeValue = [ 'hidden', 'visible', 'inherit' ];  // eslint-disable-line no-unused-vars
var aVisibilityValue = { 'hidden' : HIDDEN, 'visible' : VISIBLE, 'inherit' : INHERIT };

var ROOT_NODE = document.getElementsByTagNameNS( NSS['svg'], 'svg' )[0];
var WIDTH = 0;
var HEIGHT = 0;
var INDEX_COLUMNS_DEFAULT = 3;
var INDEX_OFFSET = 0;

var Detect = configureDetectionTools();
var theMetaDoc;
var theSlideIndexPage;
var currentMode = SLIDE_MODE;
var processingEffect = false;
var nCurSlide = undefined;
var bTextHasBeenSelected = false;
var sLastSelectedText = '';


var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();


function object( aObject )
{
var F = function() {};
F.prototype = aObject;
return new F();
}


function extend( aSubType, aSuperType )
{
if (!aSuperType || !aSubType)
{
alert('extend failed, verify dependencies');
}
var OP = Object.prototype;
var sp = aSuperType.prototype;
var rp = object( sp );
aSubType.prototype = rp;

rp.constructor = aSubType;
aSubType.superclass = sp;

if (aSuperType != Object && sp.constructor == OP.constructor)
{
sp.constructor = aSuperType;
}

return aSubType;
}


function instantiate( TemplateClass, BaseType )
{
if( !TemplateClass.instanceSet )
TemplateClass.instanceSet = [];

var nSize = TemplateClass.instanceSet.length;

for( var i = 0; i < nSize; ++i )
{
if( TemplateClass.instanceSet[i].base === BaseType )
return TemplateClass.instanceSet[i].instance;
}

TemplateClass.instanceSet[ nSize ] = {};
TemplateClass.instanceSet[ nSize ].base = BaseType;
TemplateClass.instanceSet[ nSize ].instance = TemplateClass( BaseType );

return TemplateClass.instanceSet[ nSize ].instance;
}


function Rectangle( aSVGRectElem )
{
var x = parseInt( aSVGRectElem.getAttribute( 'x' ) );
var y = parseInt( aSVGRectElem.getAttribute( 'y' ) );
var width = parseInt( aSVGRectElem.getAttribute( 'width' ) );
var height = parseInt( aSVGRectElem.getAttribute( 'height' ) );

this.left = x;
this.right = x + width;
this.top = y;
this.bottom = y + height;
}

function getKeyByValue(aObj, value) {
for(var key in aObj) {
if(aObj[key] == value)
return key;
}
return null;
}

function log( message )
{
if( typeof console == 'object' )
{
console.log( message );
}
else if( typeof opera == 'object' )
{
opera.postError( message );
}
else if( typeof java == 'object' && typeof java.lang == 'object' )
{
java.lang.System.out.println( message );
}
}

function getNSAttribute( sNSPrefix, aElem, sAttrName )
{
if( !aElem ) return null;
if( 'getAttributeNS' in aElem )
{
return aElem.getAttributeNS( NSS[sNSPrefix], sAttrName );
}
else
{
return aElem.getAttribute( sNSPrefix + ':' + sAttrName );
}
}

function getOOOAttribute( aElem, sAttrName )
{
return getNSAttribute( 'ooo', aElem, sAttrName );
}

function setNSAttribute( sNSPrefix, aElem, sAttrName, aValue )
{
if( !aElem ) return false;
if( 'setAttributeNS' in aElem )
{
aElem.setAttributeNS( NSS[sNSPrefix], sAttrName, aValue );
return true;
}
else
{
aElem.setAttribute(sNSPrefix + ':' + sAttrName, aValue );
return true;
}
}

function getElementsByClassName( aElem, sClassName )
{

var aElementSet = [];
if( 'getElementsByClassName' in aElem )
{
aElementSet = aElem.getElementsByClassName( sClassName );
}
else
{
var aElementSetByClassProperty = getElementsByProperty( aElem, 'class' );
for( var i = 0; i < aElementSetByClassProperty.length; ++i )
{
var sAttrClassName = aElementSetByClassProperty[i].getAttribute( 'class' );
if( sAttrClassName == sClassName )
{
aElementSet.push( aElementSetByClassProperty[i] );
}
}
}
return aElementSet;
}

function getElementByClassName( aElem, sClassName /*, sTagName */)
{
var aElementSet = getElementsByClassName( aElem, sClassName );
if ( aElementSet.length == 1 )
return aElementSet[0];
else
return null;
}

function getClassAttribute(  aElem )
{
if( aElem )
return aElem.getAttribute( 'class' );
return '';
}

function createElementGroup( aParentElement, aElementList, nFrom, nCount, sGroupClass, sGroupId )
{
var nTo = nFrom + nCount;
if( nCount < 1 || aElementList.length < nTo )
{
log( 'createElementGroup: not enough elements available.' );
return;
}
var firstElement = aElementList[nFrom];
if( !firstElement )
{
log( 'createElementGroup: element not found.' );
return;
}
var aGroupElement = document.createElementNS( NSS['svg'], 'g' );
if( sGroupId )
aGroupElement.setAttribute( 'id', sGroupId );
if( sGroupClass )
aGroupElement.setAttribute( 'class', sGroupClass );
aParentElement.insertBefore( aGroupElement, firstElement );
var i = nFrom;
for( ; i < nTo; ++i )
{
aParentElement.removeChild( aElementList[i] );
aGroupElement.appendChild( aElementList[i] );
}
}

function initVisibilityProperty( aElement )
{
var nVisibility = VISIBLE;
var sVisibility = aElement.getAttribute( 'visibility' );
if( sVisibility ) nVisibility = aVisibilityValue[ sVisibility ];
return nVisibility;
}

function getSafeIndex( nIndex, nMin, nMax )
{
if( nIndex < nMin )
return nMin;
else if( nIndex > nMax )
return nMax;
else
return nIndex;
}

function getRandomInt( nMax )
{
return Math.floor( Math.random() * nMax );
}

function isTextFieldElement( aElement ) // eslint-disable-line no-unused-vars
{
var sClassName = aElement.getAttribute( 'class' );
return ( sClassName === aSlideNumberClassName ) ||
( sClassName === aFooterClassName ) ||
( sClassName === aHeaderClassName ) ||
( sClassName === aDateTimeClassName );
}


function DebugPrinter()
{
this.bEnabled = false;
}


DebugPrinter.prototype.on = function()
{
this.bEnabled = true;
};

DebugPrinter.prototype.off = function()
{
this.bEnabled = false;
};

DebugPrinter.prototype.isEnabled = function()
{
return this.bEnabled;
};

DebugPrinter.prototype.print = function( sMessage, nTime )
{
if( this.isEnabled() )
{
var sInfo = 'DBG: ' + sMessage;
if( nTime )
sInfo += ' (at: ' + String( nTime / 1000 ) + 's)';
log( sInfo );
}
};


var aGenericDebugPrinter = new DebugPrinter();
aGenericDebugPrinter.off();
var DBGLOG = bind2( DebugPrinter.prototype.print, aGenericDebugPrinter );

var NAVDBG = new DebugPrinter();
NAVDBG.off();

var ANIMDBG = new DebugPrinter();
ANIMDBG.off();

var aRegisterEventDebugPrinter = new DebugPrinter();
aRegisterEventDebugPrinter.off();

var aTimerEventQueueDebugPrinter = new DebugPrinter();
aTimerEventQueueDebugPrinter.off();

var aEventMultiplexerDebugPrinter = new DebugPrinter();
aEventMultiplexerDebugPrinter.off();

var aNextEffectEventArrayDebugPrinter = new DebugPrinter();
aNextEffectEventArrayDebugPrinter.off();

var aActivityQueueDebugPrinter = new DebugPrinter();
aActivityQueueDebugPrinter.off();

var aAnimatedElementDebugPrinter = new DebugPrinter();
aAnimatedElementDebugPrinter.off();


function MetaDocument()
{
var aMetaDocElem = document.getElementById( aOOOElemMetaSlides );
assert( aMetaDocElem, 'MetaDocument: the svg element with id:' + aOOOElemMetaSlides + 'is not valid.');

this.nNumberOfSlides = parseInt( aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrNumberOfSlides ) );
assert( typeof this.nNumberOfSlides == 'number' && this.nNumberOfSlides > 0,
'MetaDocument: number of slides is zero or undefined.' );
this.nStartSlideNumber = parseInt( aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrStartSlideNumber ) ) || 0;
this.sPageNumberingType = aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrNumberingType ) || 'arabic';
this.bIsUsePositionedChars = ( aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrUsePositionedChars ) === 'true' );

this.aClipPathGroup = getElementByClassName( ROOT_NODE, aClipPathGroupClassName );
assert( this.aClipPathGroup, 'MetaDocument: the clip path group element is not valid.');

this.aPresentationClipPath = document.getElementById( aPresentationClipPathId );
assert( this.aPresentationClipPath,
'MetaDocument: the presentation clip path element element is not valid.');

this.aMetaSlideSet = [];
this.aMasterPageSet = {};
this.aTextFieldHandlerSet = {};
this.aTextFieldContentProviderSet = [];
this.aSlideNumberProvider = new SlideNumberProvider( this.nStartSlideNumber + 1, this.sPageNumberingType );

this.bIsAnimated = false;
this.aSlideAnimationsMap = {};
this.initSlideAnimationsMap();

this.theMetaDummySlide = new MetaSlide( 'ooo:meta_dummy_slide', this );

for( var i = 0; i < this.nNumberOfSlides; ++i )
{
var sMetaSlideId = aOOOElemMetaSlide + '_' + i;
this.aMetaSlideSet.push( new MetaSlide( sMetaSlideId, this ) );
}
assert( this.aMetaSlideSet.length == this.nNumberOfSlides,
'MetaDocument: aMetaSlideSet.length != nNumberOfSlides.' );
}

MetaDocument.prototype =
{

getCurrentSlide : function()
{
return this.aMetaSlideSet[nCurSlide];
},

setCurrentSlide : function( nSlideIndex )
{
if( nSlideIndex >= 0 &&  nSlideIndex < this.nNumberOfSlides )
{
if( nCurSlide !== undefined )
this.aMetaSlideSet[nCurSlide].hide();
this.aMetaSlideSet[nSlideIndex].show();
nCurSlide = nSlideIndex;
}
else
{
log('MetaDocument.setCurrentSlide: slide index out of range: ' + nSlideIndex );
}
},


initSlideAnimationsMap : function()
{
var aAnimationsSection = document.getElementById( 'presentation-animations' );
if( aAnimationsSection )
{
var aAnimationsDefSet = aAnimationsSection.getElementsByTagName( 'defs' );

this.bIsAnimated = ( typeof aAnimationsDefSet.length =='number' &&
aAnimationsDefSet.length > 0 );

for( var i = 0; i < aAnimationsDefSet.length; ++i )
{
var sSlideId = aAnimationsDefSet[i].getAttributeNS( NSS['ooo'], aOOOAttrSlide );
var aChildSet = getElementChildren( aAnimationsDefSet[i] );
if( sSlideId && ( aChildSet.length === 1 ) )
{
this.aSlideAnimationsMap[ sSlideId ] = aChildSet[0];
}
}
}
}

}; // end MetaDocument prototype

function MetaSlide( sMetaSlideId, aMetaDoc )
{
this.theDocument = document;
this.id = sMetaSlideId;
this.theMetaDoc = aMetaDoc;

this.element = this.theDocument.getElementById( this.id );
assert( this.element,
'MetaSlide: meta_slide element <' + this.id + '> not found.' );

this.slideId = this.element.getAttributeNS( NSS['ooo'], aOOOAttrSlide );
this.slideElement = this.theDocument.getElementById( this.slideId );
assert( this.slideElement,
'MetaSlide: slide element <' + this.slideId + '> not found.' );

if( this.slideId !== 'dummy_slide' )
this.nSlideNumber = parseInt( this.slideId.substr(2) );
else
this.nSlideNumber= -1;

this.aContainerElement = this.slideElement.parentNode;
this.slideContainerId = this.aContainerElement.getAttribute( 'id' );
this.aVisibilityStatusElement = this.aContainerElement.parentNode;

this.pageElement = getElementByClassName( this.slideElement, aPageClassName );
assert( this.pageElement,
'MetaSlide: page element <' + this.slideId + '> not found.' );

this.masterPage = this.initMasterPage();

this.nAreMasterObjectsVisible     = this.initVisibilityProperty( aOOOAttrMasterObjectsVisibility,  VISIBLE );
this.nIsBackgroundVisible         = this.initVisibilityProperty( aOOOAttrBackgroundVisibility,     VISIBLE );
this.nIsPageNumberVisible         = this.initVisibilityProperty( aOOOAttrPageNumberVisibility,     HIDDEN );
this.nIsDateTimeVisible           = this.initVisibilityProperty( aOOOAttrDateTimeVisibility,       VISIBLE );
this.nIsFooterVisible             = this.initVisibilityProperty( aOOOAttrFooterVisibility,         VISIBLE );
this.nIsHeaderVisible             = this.initVisibilityProperty( aOOOAttrHeaderVisibility,         VISIBLE );

this.bIsDateTimeVariable = undefined;

this.aTextFieldContentProviderSet = {};
this.aTextFieldContentProviderSet[aSlideNumberClassName]   = this.initSlideNumberFieldContentProvider();
this.aTextFieldContentProviderSet[aDateTimeClassName]      = this.initDateTimeFieldContentProvider( aOOOAttrDateTimeField );
this.aTextFieldContentProviderSet[aFooterClassName]        = this.initFixedTextFieldContentProvider( aOOOAttrFooterField );
this.aTextFieldContentProviderSet[aHeaderClassName]        = this.initFixedTextFieldContentProvider( aOOOAttrHeaderField );

this.fDuration = this.initSlideDuration();

this.aTransitionHandler = null;
this.bHasTransition = this.initHasTransition() || true;
if( this.bHasTransition )
{
this.aTransitionHandler = new SlideTransition( this.getSlideAnimationsRoot(), this.slideId );
}

this.aSlideAnimationsHandler = new SlideAnimations( aSlideShow.getContext() );
this.aSlideAnimationsHandler.importAnimations( this.getSlideAnimationsRoot() );
this.aSlideAnimationsHandler.parseElements();

if( false && this.aSlideAnimationsHandler.aRootNode )
log( this.aSlideAnimationsHandler.aRootNode.info( true ) );

this.aTextShapeSet = this.collectTextShapes();

this.aHyperlinkSet = this.initHyperlinks();

}

MetaSlide.prototype =
{

show : function()
{
this.updateMasterPageView();
this.aVisibilityStatusElement.setAttribute( 'visibility', 'inherit' );
},

hide : function()
{
this.aVisibilityStatusElement.setAttribute( 'visibility', 'hidden' );
},

updateMasterPageView : function()
{
if( !this.aMasterPageView )
{
this.aMasterPageView = new MasterPageView( this );
this.aMasterPageView.attachToSlide();
}
this.aMasterPageView.update();
},

initMasterPage : function()
{
var sMasterPageId = this.element.getAttributeNS( NSS['ooo'], aOOOAttrMaster );

if( !this.theMetaDoc.aMasterPageSet.hasOwnProperty( sMasterPageId ) )
{
this.theMetaDoc.aMasterPageSet[ sMasterPageId ] = new MasterPage( sMasterPageId, this );

this.theMetaDoc.aTextFieldHandlerSet[ sMasterPageId ] = {};
}
return this.theMetaDoc.aMasterPageSet[ sMasterPageId ];
},

initSlideDuration : function()
{
var sSlideDuration = this.element.getAttributeNS( NSS['ooo'], aOOOAttrSlideDuration );
if( sSlideDuration && sSlideDuration.length > 0 )
return parseFloat( sSlideDuration );
else
return -1;
},

initHasTransition : function()
{
var sHasTransition = this.element.getAttributeNS( NSS['ooo'], aOOOAttrHasTransition );
return ( sHasTransition === 'true' );
},

initVisibilityProperty : function( aVisibilityAttribute, nDefaultValue )
{
var nVisibility = nDefaultValue;
var sVisibility = getOOOAttribute( this.element, aVisibilityAttribute );
if( sVisibility )
nVisibility = aVisibilityValue[ sVisibility ];
return nVisibility;
},

initSlideNumberFieldContentProvider : function()
{
return this.theMetaDoc.aSlideNumberProvider;
},

initDateTimeFieldContentProvider : function( aOOOAttrDateTimeField )
{
var sTextFieldId = getOOOAttribute( this.element, aOOOAttrDateTimeField );
if( !sTextFieldId )  return null;

var nLength = aOOOElemTextField.length + 1;
var nIndex = parseInt(sTextFieldId.substring( nLength ) );
if( typeof nIndex != 'number') return null;

if( !this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ] )
{
var aTextField;
var aTextFieldElem = document.getElementById( sTextFieldId );
var sClassName = getClassAttribute( aTextFieldElem );
if( sClassName == 'FixedDateTimeField' )
{
aTextField = new FixedTextProvider( aTextFieldElem );
this.bIsDateTimeVariable = false;
}
else if( sClassName == 'VariableDateTimeField' )
{
aTextField = new CurrentDateTimeProvider( aTextFieldElem );
this.bIsDateTimeVariable = true;
}
else
{
aTextField = null;
}
this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ] = aTextField;
}
return this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ];
},

initFixedTextFieldContentProvider : function( aOOOAttribute )
{
var sTextFieldId = getOOOAttribute( this.element, aOOOAttribute );
if( !sTextFieldId ) return null;

var nLength = aOOOElemTextField.length + 1;
var nIndex = parseInt( sTextFieldId.substring( nLength ) );
if( typeof nIndex != 'number') return null;

if( !this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ] )
{
var aTextFieldElem = document.getElementById( sTextFieldId );
this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ]
= new FixedTextProvider( aTextFieldElem );
}
return this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ];
},

collectTextShapes : function()
{
var aTextShapeSet = [];
var aTextShapeIndexElem = getElementByClassName( document, 'TextShapeIndex' );
if( aTextShapeIndexElem )
{
var aIndexEntryList = getElementChildren( aTextShapeIndexElem );
var i;
for( i = 0; i < aIndexEntryList.length; ++i )
{
var sSlideId = getOOOAttribute( aIndexEntryList[i], 'slide' );
if( sSlideId === this.slideId )
{
var sTextShapeIds = getOOOAttribute( aIndexEntryList[i], 'id-list' );
if( sTextShapeIds )
{
var aTextShapeIdSet =  sTextShapeIds.split( ' ' );
var j;
for( j = 0; j < aTextShapeIdSet.length; ++j )
{
var aTextShapeElem = document.getElementById( aTextShapeIdSet[j] );
if( aTextShapeElem )
{
aTextShapeSet.push( aTextShapeElem );
}
else
{
log( 'warning: MetaSlide.collectTextShapes: text shape with id <' + aTextShapeIdSet[j] + '> is not valid.'  );
}
}
}
break;
}
}
}
return aTextShapeSet;
},

initHyperlinks : function()
{
var aHyperlinkSet = {};
var i;
for( i = 0; i < this.aTextShapeSet.length; ++i )
{
if( this.aTextShapeSet[i] )
{
var aHyperlinkIdList = getElementByClassName( this.aTextShapeSet[i], 'HyperlinkIdList' );
if( aHyperlinkIdList )
{
var sHyperlinkIds = aHyperlinkIdList.textContent;
if( sHyperlinkIds )
{
var aHyperlinkIdSet = sHyperlinkIds.trim().split( ' ' );
var j;
for( j = 0; j < aHyperlinkIdSet.length; ++j )
{
var sId = aHyperlinkIdSet[j];
aHyperlinkSet[ sId ] = new HyperlinkElement( sId, this.aSlideAnimationsHandler.aEventMultiplexer );
}
}
}
}
}
return aHyperlinkSet;
},

getSlideAnimationsRoot : function()
{
return this.theMetaDoc.aSlideAnimationsMap[ this.slideId ];
}

}; // end MetaSlide prototype

function MasterPage( sMasterPageId, aMetaSlide )
{
this.id = sMasterPageId;
this.metaSlide = aMetaSlide;

this.element = document.getElementById( this.id );
assert( this.element,
'MasterPage: master page element <' + this.id + '> not found.' );

this.background = getElementByClassName( this.element, 'Background' );
if( this.background )
{
this.backgroundId = this.background.getAttribute( 'id' );
this.backgroundVisibility = initVisibilityProperty( this.background );
}
else
{
this.backgroundId = '';
log( 'MasterPage: the background element is not valid.' );
}

this.backgroundObjects = getElementByClassName( this.element, 'BackgroundObjects' );
if( this.backgroundObjects )
{
this.backgroundObjectsId = this.backgroundObjects.getAttribute( 'id' );
this.backgroundObjectsVisibility = initVisibilityProperty( this.backgroundObjects );

if( this.backgroundObjectsVisibility != HIDDEN )
{
var aBackgroundObjectList = getElementChildren( this.backgroundObjects );
var nFrom = 0;
var nCount = 0;
var nSubGroupId = 1;
var sClass;
var sId = '';
this.aBackgroundObjectSubGroupIdList = [];
var i = 0;
for( ; i < aBackgroundObjectList.length; ++i )
{
sClass = aBackgroundObjectList[i].getAttribute( 'class' );
if( !sClass || ( ( sClass !== aDateTimeClassName ) && ( sClass !== aFooterClassName )
&& ( sClass !== aHeaderClassName ) && ( sClass !== aSlideNumberClassName ) ) )
{
if( nCount === 0 )
{
nFrom = i;
sId = this.backgroundObjectsId + '.' + nSubGroupId;
++nSubGroupId;
this.aBackgroundObjectSubGroupIdList.push( sId );
}
++nCount;
}
else
{
this.aBackgroundObjectSubGroupIdList.push( sClass );
if( nCount !== 0 )
{
createElementGroup( this.backgroundObjects, aBackgroundObjectList, nFrom, nCount, 'BackgroundObjectSubgroup', sId );
nCount = 0;
}
}
}
if( nCount !== 0 )
{
createElementGroup( this.backgroundObjects, aBackgroundObjectList, nFrom, nCount, 'BackgroundObjectSubgroup', sId );
}
}
}
else
{
this.backgroundObjectsId = '';
log( 'MasterPage: the background objects element is not valid.' );
}

this.aPlaceholderShapeSet = {};
this.initPlaceholderShapes();
}

MasterPage.prototype =
{

initPlaceholderShapes : function()
{
this.aPlaceholderShapeSet[ aSlideNumberClassName ] = new PlaceholderShape( this, aSlideNumberClassName );
this.aPlaceholderShapeSet[ aDateTimeClassName ] = new PlaceholderShape( this, aDateTimeClassName );
this.aPlaceholderShapeSet[ aFooterClassName ] = new PlaceholderShape( this, aFooterClassName );
this.aPlaceholderShapeSet[ aHeaderClassName ] = new PlaceholderShape( this, aHeaderClassName );
}

}; // end MasterPage prototype

function PlaceholderShape( aMasterPage, sClassName )
{
this.masterPage = aMasterPage;
this.className = sClassName;

this.element = null;
this.textElement = null;
this.init();
}

PlaceholderShape.prototype.isValid = function()
{
return ( this.element && this.textElement );
};


PlaceholderShape.prototype.init = function()
{

var aTextFieldElement = getElementByClassName( this.masterPage.backgroundObjects, this.className );
if( aTextFieldElement )
{
var aPlaceholderElement = getElementByClassName( aTextFieldElement, 'PlaceholderText' );
if( aPlaceholderElement )
{
var aSVGRectElem = getElementByClassName( aTextFieldElement, 'BoundingBox' );
if( aSVGRectElem )
{
var aRect = new Rectangle( aSVGRectElem );
var sTextAdjust = getOOOAttribute( aTextFieldElement, aOOOAttrTextAdjust ) || 'left';
var sTextAnchor, sX;
if( sTextAdjust == 'left' )
{
sTextAnchor = 'start';
sX = String( aRect.left );
}
else if( sTextAdjust == 'right' )
{
sTextAnchor = 'end';
sX = String( aRect.right );
}
else if( sTextAdjust == 'center' )
{
sTextAnchor = 'middle';
var nMiddle = ( aRect.left + aRect.right ) / 2;
sX = String( parseInt( String( nMiddle ) ) );
}
if( sTextAnchor )
aPlaceholderElement.setAttribute( 'text-anchor', sTextAnchor );
if( sX )
aPlaceholderElement.setAttribute( 'x', sX );
}

if( this.masterPage.metaSlide.theMetaDoc.bIsUsePositionedChars )
{
var aTextLineGroupElem = aPlaceholderElement.parentNode.parentNode;
if( aTextLineGroupElem )
{
var sFontFamilyAttr = aTextLineGroupElem.getAttribute( 'font-family' );
if( sFontFamilyAttr )
{
var aChildSet = getElementChildren( aTextLineGroupElem );
if( aChildSet.length > 1  )
var i = 1;
for( ; i < aChildSet.length; ++i )
{
aTextLineGroupElem.removeChild( aChildSet[i] );
}
}
}
}
this.element = aTextFieldElement;
this.textElement = aPlaceholderElement;
}
}
};

function MasterPageView( aMetaSlide )
{
this.aMetaSlide = aMetaSlide;
this.aSlideElement = aMetaSlide.slideElement;
this.aPageElement = aMetaSlide.pageElement;
this.aMasterPage = aMetaSlide.masterPage;
this.aMPVElement = this.createElement();
this.bIsAttached = false;
}


MasterPageView.prototype.attachToSlide = function()
{
if( !this.bIsAttached )
{
var aInsertedElement = this.aSlideElement.insertBefore( this.aMPVElement, this.aPageElement );
assert( aInsertedElement === this.aMPVElement,
'MasterPageView.attachToSlide: aInsertedElement != this.aMPVElement' );

this.bIsAttached = true;
}
};

MasterPageView.prototype.detachFromSlide = function()
{
if( this.bIsAttached )
{
this.aSlideElement.removeChild( this.aMPVElement );
this.bIsAttached = false;
}
};

MasterPageView.prototype.update = function()
{
if( this.aDateTimeFieldHandler && this.aMetaSlide.bIsDateTimeVariable )
this.aDateTimeFieldHandler.update();
};


MasterPageView.prototype.createElement = function()
{
var theDocument = document;
var aMasterPageViewElement = theDocument.createElementNS( NSS['svg'], 'g' );
assert( aMasterPageViewElement,
'MasterPageView.createElement: failed to create a master page view element.' );
aMasterPageViewElement.setAttribute( 'class', 'MasterPageView' );

var aWhiteRect = theDocument.createElementNS( NSS['svg'], 'rect' );
var nWidthExt = WIDTH / 1000;
var nHeightExt = HEIGHT / 1000;
aWhiteRect.setAttribute( 'x', String( -nWidthExt / 2 ) );
aWhiteRect.setAttribute( 'y', String( -nHeightExt / 2 ) );
aWhiteRect.setAttribute( 'width', String( WIDTH + nWidthExt ) );
aWhiteRect.setAttribute( 'height', String( HEIGHT + nHeightExt ) );
aWhiteRect.setAttribute( 'fill', '#FFFFFF' );
aMasterPageViewElement.appendChild( aWhiteRect );

if( this.aMetaSlide.nIsBackgroundVisible )
{
this.aBackgroundElement = theDocument.createElementNS( NSS['svg'], 'use' );
this.aBackgroundElement.setAttribute( 'class', 'Background' );
setNSAttribute( 'xlink', this.aBackgroundElement,
'href', '#' + this.aMasterPage.backgroundId );

aMasterPageViewElement.appendChild( this.aBackgroundElement );
}

if( this.aMetaSlide.nAreMasterObjectsVisible )
{
this.aBackgroundObjectsElement = theDocument.createElementNS( NSS['svg'], 'g' );
this.aBackgroundObjectsElement.setAttribute( 'class', 'BackgroundObjects' );

var aBackgroundObjectSubGroupIdList = this.aMasterPage.aBackgroundObjectSubGroupIdList;
this.aBackgroundSubGroupElementSet = [];
var aPlaceholderShapeSet = this.aMasterPage.aPlaceholderShapeSet;
var aTextFieldContentProviderSet = this.aMetaSlide.aTextFieldContentProviderSet;
var aDefsElement = this.aMetaSlide.element.parentNode;
var aTextFieldHandlerSet = this.aMetaSlide.theMetaDoc.aTextFieldHandlerSet;
var sMasterSlideId = this.aMasterPage.id;

var i = 0;
var sId;
for( ; i < aBackgroundObjectSubGroupIdList.length; ++i )
{
sId = aBackgroundObjectSubGroupIdList[i];
if( sId === aSlideNumberClassName )
{
if( aPlaceholderShapeSet[aSlideNumberClassName] &&
aPlaceholderShapeSet[aSlideNumberClassName].isValid() &&
this.aMetaSlide.nIsPageNumberVisible &&
aTextFieldContentProviderSet[aSlideNumberClassName] )
{
this.aSlideNumberFieldHandler =
new SlideNumberFieldHandler( aPlaceholderShapeSet[aSlideNumberClassName],
aTextFieldContentProviderSet[aSlideNumberClassName] );
this.aSlideNumberFieldHandler.update( this.aMetaSlide.nSlideNumber );
this.aSlideNumberFieldHandler.appendTo( this.aBackgroundObjectsElement );
}
}
else if( sId === aDateTimeClassName )
{
if( this.aMetaSlide.nIsDateTimeVisible )
{
this.aDateTimeFieldHandler =
this.initTextFieldHandler( aDateTimeClassName, aPlaceholderShapeSet,
aTextFieldContentProviderSet, aDefsElement,
aTextFieldHandlerSet, sMasterSlideId );
}
}
else if( sId === aFooterClassName )
{
if( this.aMetaSlide.nIsFooterVisible )
{
this.aFooterFieldHandler =
this.initTextFieldHandler( aFooterClassName, aPlaceholderShapeSet,
aTextFieldContentProviderSet, aDefsElement,
aTextFieldHandlerSet, sMasterSlideId );
}
}
else if( sId === aHeaderClassName )
{
if( this.aMetaSlide.nIsHeaderVisible )
{
this.aHeaderFieldHandler =
this.initTextFieldHandler( aHeaderClassName, aPlaceholderShapeSet,
aTextFieldContentProviderSet, aDefsElement,
aTextFieldHandlerSet, sMasterSlideId );
}
}
else
{
var aBackgroundSubGroupElement = theDocument.createElementNS( NSS['svg'], 'use' );
aBackgroundSubGroupElement.setAttribute( 'class', 'BackgroundObjectSubGroup' );
setNSAttribute( 'xlink', aBackgroundSubGroupElement,
'href', '#' + sId );
this.aBackgroundSubGroupElementSet.push( aBackgroundSubGroupElement );
this.aBackgroundObjectsElement.appendChild( aBackgroundSubGroupElement );
}

}
aMasterPageViewElement.appendChild( this.aBackgroundObjectsElement );
}

return aMasterPageViewElement;
};

MasterPageView.prototype.initTextFieldHandler =
function( sClassName, aPlaceholderShapeSet, aTextFieldContentProviderSet,
aDefsElement, aTextFieldHandlerSet, sMasterSlideId )
{
var aTextFieldHandler = null;
if( aPlaceholderShapeSet[sClassName] &&
aPlaceholderShapeSet[sClassName].isValid()
&& aTextFieldContentProviderSet[sClassName] )
{
var sTextFieldContentProviderId = aTextFieldContentProviderSet[sClassName].sId;
if ( !aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ] )
{
aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ] =
new TextFieldHandler( aPlaceholderShapeSet[sClassName],
aTextFieldContentProviderSet[sClassName] );
aTextFieldHandler = aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ];
aTextFieldHandler.update();
aTextFieldHandler.appendTo( aDefsElement );
}
else
{
aTextFieldHandler = aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ];
}

var aTextFieldElement = document.createElementNS( NSS['svg'], 'use' );
aTextFieldElement.setAttribute( 'class', sClassName );
setNSAttribute( 'xlink', aTextFieldElement,
'href', '#' + aTextFieldHandler.sId );
this.aBackgroundObjectsElement.appendChild( aTextFieldElement );
}
return aTextFieldHandler;
};

function TextFieldHandler( aPlaceholderShape, aTextContentProvider )
{
this.aPlaceHolderShape = aPlaceholderShape;
this.aTextContentProvider = aTextContentProvider;
assert( this.aTextContentProvider,
'TextFieldHandler: text content provider not defined.' );
this.sId = 'tf' + String( TextFieldHandler.getUniqueId() );
this.aTextFieldElement = null;
this.aTextPlaceholderElement = null;
this.cloneElement();
}


TextFieldHandler.CURR_UNIQUE_ID = 0;

TextFieldHandler.getUniqueId = function()
{
++TextFieldHandler.CURR_UNIQUE_ID;
return TextFieldHandler.CURR_UNIQUE_ID;
};

TextFieldHandler.prototype.cloneElement = function()
{
assert( this.aPlaceHolderShape && this.aPlaceHolderShape.isValid(),
'TextFieldHandler.cloneElement: placeholder shape is not valid.' );
this.aTextFieldElement = this.aPlaceHolderShape.element.cloneNode( true /* deep clone */ );
assert( this.aTextFieldElement,
'TextFieldHandler.cloneElement: aTextFieldElement is not defined' );
this.aTextFieldElement.setAttribute( 'id', this.sId );
this.aTextFieldElement.removeAttribute( 'visibility' );
this.aTextPlaceholderElement = getElementByClassName( this.aTextFieldElement, 'PlaceholderText' );
assert( this.aTextPlaceholderElement,
'TextFieldHandler.cloneElement: aTextPlaceholderElement is not defined' );
};


TextFieldHandler.prototype.appendTo = function( aParentNode )
{
if( !this.aTextFieldElement )
{
log( 'TextFieldHandler.appendTo: aTextFieldElement is not defined' );
return;
}
if( !aParentNode )
{
log( 'TextFieldHandler.appendTo: parent node is not defined' );
return;
}

aParentNode.appendChild( this.aTextFieldElement );
};

TextFieldHandler.prototype.setTextContent = function( sText )
{
if( !this.aTextPlaceholderElement )
{
log( 'PlaceholderShape.setTextContent: text element is not valid in placeholder of type '
+ this.className + ' that belongs to master slide ' + this.masterPage.id );
return;
}
this.aTextPlaceholderElement.textContent = sText;
};

TextFieldHandler.prototype.update = function()
{
if( !this.aTextContentProvider )
log('TextFieldHandler.update: text content provider not defined.');
else
this.aTextContentProvider.update( this );
};

function SlideNumberFieldHandler( aPlaceholderShape, aTextContentProvider )
{
SlideNumberFieldHandler.superclass.constructor.call( this, aPlaceholderShape, aTextContentProvider );
}
extend( SlideNumberFieldHandler, TextFieldHandler );


SlideNumberFieldHandler.prototype.update = function( nPageNumber )
{
if( !this.aTextContentProvider )
log('TextFieldHandler.update: text content provider not defined.');
else
this.aTextContentProvider.update( this, nPageNumber );
};


function TextFieldContentProvider( aTextFieldContentElement )
{
if( aTextFieldContentElement )
this.sId = aTextFieldContentElement.getAttribute( 'id' );
}

function FixedTextProvider( aTextFieldContentElement )
{
FixedTextProvider.superclass.constructor.call( this, aTextFieldContentElement );
this.text = aTextFieldContentElement.textContent;
}
extend( FixedTextProvider, TextFieldContentProvider );


FixedTextProvider.prototype.update = function( aFixedTextField )
{
aFixedTextField.setTextContent( this.text );
};

function CurrentDateTimeProvider( aTextFieldContentElement )
{
CurrentDateTimeProvider.superclass.constructor.call( this, aTextFieldContentElement );
this.dateTimeFormat = getOOOAttribute( aTextFieldContentElement, aOOOAttrDateTimeFormat );
}
extend( CurrentDateTimeProvider, TextFieldContentProvider );


CurrentDateTimeProvider.prototype.update = function( aDateTimeField )
{
var sText = this.createDateTimeText( this.dateTimeFormat );
aDateTimeField.setTextContent( sText );
};


CurrentDateTimeProvider.prototype.createDateTimeText = function( /*sDateTimeFormat*/ )
{
var aDate = new Date();
var sDate = aDate.toLocaleString();
return sDate;
};

function SlideNumberProvider( nInitialSlideNumber, sPageNumberingType )
{
SlideNumberProvider.superclass.constructor.call( this, null );
this.nInitialSlideNumber = nInitialSlideNumber;
this.pageNumberingType = sPageNumberingType;

}
extend( SlideNumberProvider, TextFieldContentProvider );


SlideNumberProvider.prototype.getNumberingType = function()
{
return this.pageNumberingType;
};


SlideNumberProvider.prototype.update = function( aSlideNumberField, nSlideNumber )
{
if( nSlideNumber === undefined )
{
if( nCurSlide === undefined )
nSlideNumber = this.nInitialSlideNumber;
else
nSlideNumber = nCurSlide + 1;
}
var sText = this.createSlideNumberText( nSlideNumber, this.getNumberingType() );
aSlideNumberField.setTextContent( sText );
};


SlideNumberProvider.prototype.createSlideNumberText = function( nSlideNumber /*, sNumberingType*/ )
{
return String( nSlideNumber );
};


function SlideIndexPage()
{
this.pageElementId = 'slide_index';
this.pageBgColor = 'rgb(252,252,252)';
this.pageElement = this.createPageElement();
assert( this.pageElement, 'SlideIndexPage: pageElement is not valid' );
this.indexColumns = INDEX_COLUMNS_DEFAULT;
this.totalThumbnails = this.indexColumns * this.indexColumns;
this.selectedSlideIndex = undefined;

this.xSpacingFactor = 600/28000;
this.ySpacingFactor = 450/21000;
this.xSpacing = WIDTH * this.xSpacingFactor;
this.ySpacing = HEIGHT * this.ySpacingFactor;
this.halfBorderWidthFactor = ( 300/28000 ) * ( this.indexColumns / 3 );
this.halfBorderWidth = WIDTH * this.halfBorderWidthFactor;
this.borderWidth = 2 * this.halfBorderWidth;
this.scaleFactor = ( 1 - ( this.indexColumns + 1 ) * this.xSpacingFactor ) /
( this.indexColumns * ( 1 + 2 * this.halfBorderWidthFactor ) );

this.thumbnailMouseAreaTemplateId = 'thumbnail_mouse_area';
this.thumbnailMouseAreaTemplateElement = null;
this.thumbnailBorderTemplateId = 'thumbnail_border';
this.thumbnailBorderTemplateElement = null;
this.createTemplateElements();

this.aThumbnailSet = new Array( this.totalThumbnails );
for( var i = 0; i < this.totalThumbnails; ++i )
{
this.aThumbnailSet[i] = new Thumbnail( this, i );
this.aThumbnailSet[i].updateView();
}

this.curThumbnailIndex = 0;
}


SlideIndexPage.prototype.getTotalThumbnails = function()
{
return this.totalThumbnails;
};

SlideIndexPage.prototype.show = function()
{
this.pageElement.setAttribute( 'display', 'inherit' );
};

SlideIndexPage.prototype.hide = function()
{
this.pageElement.setAttribute( 'display', 'none' );
};

SlideIndexPage.prototype.setSelection = function( nIndex )
{
nIndex = getSafeIndex( nIndex, 0, this.getTotalThumbnails() - 1 );
if( this.curThumbnailIndex != nIndex )
{
this.aThumbnailSet[ this.curThumbnailIndex ].unselect();
this.aThumbnailSet[ nIndex ].select();
this.curThumbnailIndex = nIndex;
}
this.selectedSlideIndex = this.aThumbnailSet[ nIndex ].slideIndex;
};

SlideIndexPage.prototype.createPageElement = function()
{
var aPageElement = document.createElementNS( NSS['svg'], 'g' );
aPageElement.setAttribute( 'id', this.pageElementId );
aPageElement.setAttribute( 'display', 'none' );
aPageElement.setAttribute( 'visibility', 'visible' );

var sPageBgColor = this.pageBgColor + ';';
var aRectElement = document.createElementNS( NSS['svg'], 'rect' );
aRectElement.setAttribute( 'x', 0 );
aRectElement.setAttribute( 'y', 0 );
aRectElement.setAttribute( 'width', WIDTH );
aRectElement.setAttribute( 'height', HEIGHT );
aRectElement.setAttribute( 'style', 'stroke:none;fill:' + sPageBgColor );

aPageElement.appendChild( aRectElement );
ROOT_NODE.appendChild( aPageElement );
return( document.getElementById( this.pageElementId ) );
};

SlideIndexPage.prototype.createTemplateElements = function()
{
var aDefsElement = document.createElementNS( NSS['svg'], 'defs' );
var aRectElement = document.createElementNS( NSS['svg'], 'rect' );
aRectElement.setAttribute( 'id', this.thumbnailBorderTemplateId );
aRectElement.setAttribute( 'x', -this.halfBorderWidth );
aRectElement.setAttribute( 'y', -this.halfBorderWidth );
aRectElement.setAttribute( 'rx', this.halfBorderWidth );
aRectElement.setAttribute( 'ry', this.halfBorderWidth );
aRectElement.setAttribute( 'width', WIDTH + this.halfBorderWidth );
aRectElement.setAttribute( 'height', HEIGHT + this.halfBorderWidth );
aRectElement.setAttribute( 'stroke-width', this.borderWidth );
aRectElement.setAttribute( 'fill', 'none' );
aDefsElement.appendChild( aRectElement );

aRectElement = document.createElementNS( NSS['svg'], 'rect' );
aRectElement.setAttribute( 'id', this.thumbnailMouseAreaTemplateId );
aRectElement.setAttribute( 'x', 0 );
aRectElement.setAttribute( 'y', 0 );
aRectElement.setAttribute( 'width', WIDTH );
aRectElement.setAttribute( 'height', HEIGHT );
aRectElement.setAttribute( 'fill', this.pageBgColor );
aDefsElement.appendChild( aRectElement );

this.pageElement.appendChild( aDefsElement );

this.thumbnailMouseAreaTemplateElement = document.getElementById( this.thumbnailMouseAreaTemplateId );
this.thumbnailBorderTemplateElement = document.getElementById( this.thumbnailBorderTemplateId );
};

SlideIndexPage.prototype.decreaseNumberOfColumns  = function()
{
this.setNumberOfColumns( this.indexColumns - 1 );
};

SlideIndexPage.prototype.increaseNumberOfColumns  = function()
{
this.setNumberOfColumns( this.indexColumns + 1 );
};

SlideIndexPage.prototype.resetNumberOfColumns  = function()
{
this.setNumberOfColumns( INDEX_COLUMNS_DEFAULT );
};

SlideIndexPage.prototype.setNumberOfColumns  = function( nNumberOfColumns )
{
if( this.indexColumns == nNumberOfColumns )  return;
if( nNumberOfColumns < 2 || nNumberOfColumns > 6 ) return;

var suspendHandle = ROOT_NODE.suspendRedraw(500);

var nOldTotalThumbnails = this.totalThumbnails;
this.indexColumns = nNumberOfColumns;
this.totalThumbnails = nNumberOfColumns * nNumberOfColumns;

this.aThumbnailSet[this.curThumbnailIndex].unselect();

var i;
for( i = this.totalThumbnails; i < nOldTotalThumbnails; ++i )
{
this.aThumbnailSet[i].removeElement();
}

for( i = nOldTotalThumbnails; i < this.totalThumbnails; ++i )
{
this.aThumbnailSet[i] = new Thumbnail( this, i );
}

this.halfBorderWidthFactor = ( 300/28000 ) * ( this.indexColumns / 3 );
this.halfBorderWidth = WIDTH * this.halfBorderWidthFactor;
this.borderWidth = 2 * this.halfBorderWidth;
this.scaleFactor = ( 1 - ( this.indexColumns + 1 ) * this.xSpacingFactor ) /
( this.indexColumns * ( 1 + 2 * this.halfBorderWidthFactor ) );

var aRectElement = this.thumbnailBorderTemplateElement;
aRectElement.setAttribute( 'x', -this.halfBorderWidth );
aRectElement.setAttribute( 'y', -this.halfBorderWidth );
aRectElement.setAttribute( 'rx', this.halfBorderWidth );
aRectElement.setAttribute( 'ry', this.halfBorderWidth );
aRectElement.setAttribute( 'width', WIDTH + this.halfBorderWidth );
aRectElement.setAttribute( 'height', HEIGHT + this.halfBorderWidth );
aRectElement.setAttribute( 'stroke-width', this.borderWidth );

for( i = 0; i < this.totalThumbnails; ++i )
{
this.aThumbnailSet[i].updateView();
}

this.curThumbnailIndex = this.selectedSlideIndex % this.totalThumbnails;
this.aThumbnailSet[this.curThumbnailIndex].select();

INDEX_OFFSET = -1;
indexSetPageSlide( this.selectedSlideIndex );

ROOT_NODE.unsuspendRedraw( suspendHandle );
ROOT_NODE.forceRedraw();
};


function Thumbnail( aSlideIndexPage, nIndex )
{
this.container = aSlideIndexPage;
this.index = nIndex;//= getSafeIndex( nIndex, 0, this.container.getTotalThumbnails() );
this.pageElement = this.container.pageElement;
this.thumbnailId = 'thumbnail' + this.index;
this.thumbnailElement = this.createThumbnailElement();
this.slideElement = getElementByClassName( this.thumbnailElement, 'Slide' );
this.borderElement = getElementByClassName( this.thumbnailElement, 'Border' );
this.mouseAreaElement = getElementByClassName( this.thumbnailElement, 'MouseArea' );
this.aTransformSet = new Array( 3 );
this.visibility = VISIBLE;
this.isSelected = false;
}

Thumbnail.prototype.sNormalBorderColor = 'rgb(216,216,216)';
Thumbnail.prototype.sSelectionBorderColor = 'rgb(92,92,255)';

Thumbnail.prototype.removeElement = function()
{
if( this.thumbnailElement )
this.container.pageElement.removeChild( this.thumbnailElement );
};

Thumbnail.prototype.show = function()
{
if( this.visibility == HIDDEN )
{
this.thumbnailElement.setAttribute( 'display', 'inherit' );
this.visibility = VISIBLE;
}
};

Thumbnail.prototype.hide = function()
{
if( this.visibility == VISIBLE )
{
this.thumbnailElement.setAttribute( 'display', 'none' );
this.visibility = HIDDEN;
}
};

Thumbnail.prototype.select = function()
{
if( !this.isSelected )
{
this.borderElement.setAttribute( 'stroke', this.sSelectionBorderColor );
this.isSelected = true;
}
};

Thumbnail.prototype.unselect = function()
{
if( this.isSelected )
{
this.borderElement.setAttribute( 'stroke', this.sNormalBorderColor );
this.isSelected = false;
}
};

Thumbnail.prototype.updateView = function()
{
this.column = this.index % this.container.indexColumns;
this.row = ( this.index - this.column ) / this.container.indexColumns;
this.halfBorderWidth = this.container.halfBorderWidth;
this.borderWidth = this.container.borderWidth;
this.width = ( WIDTH + this.borderWidth ) * this.container.scaleFactor;
this.height = ( HEIGHT + this.borderWidth ) * this.container.scaleFactor;
this.aTransformSet[2] = 'translate(' + this.halfBorderWidth + ' ' + this.halfBorderWidth + ')';
this.aTransformSet[1] = 'scale(' + this.container.scaleFactor + ')';
var sTransformAttrValue = this.computeTransform();
this.thumbnailElement.setAttribute( 'transform', sTransformAttrValue );
this.mouseAreaElement.setAttribute( 'onmouseover', 'theSlideIndexPage.aThumbnailSet[' + this.index  + '].onMouseOver()' );
};

Thumbnail.prototype.update = function( nIndex )
{
if( this.slideIndex == nIndex )  return;

var aMetaSlide = theMetaDoc.aMetaSlideSet[nIndex];
aMetaSlide.updateMasterPageView();
setNSAttribute( 'xlink', this.slideElement, 'href', '#' + aMetaSlide.slideId );
this.slideIndex = nIndex;
};

Thumbnail.prototype.clear = function( )
{
setNSAttribute( 'xlink', this.slideElement, 'href', '' );
};

Thumbnail.prototype.createThumbnailElement = function()
{
var aThumbnailElement = document.createElementNS( NSS['svg'], 'g' );
aThumbnailElement.setAttribute( 'id', this.thumbnailId );
aThumbnailElement.setAttribute( 'display', 'inherit' );

var aSlideElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', aSlideElement, 'href', '' );
aSlideElement.setAttribute( 'class', 'Slide' );
aThumbnailElement.appendChild( aSlideElement );

var aMouseAreaElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', aMouseAreaElement, 'href', '#' + this.container.thumbnailMouseAreaTemplateId );
aMouseAreaElement.setAttribute( 'class', 'MouseArea' );
aMouseAreaElement.setAttribute( 'opacity', 0.0 );
aThumbnailElement.appendChild( aMouseAreaElement );

var aBorderElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', aBorderElement, 'href', '#' + this.container.thumbnailBorderTemplateId );
aBorderElement.setAttribute( 'stroke', this.sNormalBorderColor );
aBorderElement.setAttribute( 'class', 'Border' );
aThumbnailElement.appendChild( aBorderElement );

this.container.pageElement.appendChild( aThumbnailElement );
return( document.getElementById( this.thumbnailId ) );
};

Thumbnail.prototype.computeTransform = function()
{
var nXSpacing = this.container.xSpacing;
var nYSpacing = this.container.ySpacing;

var nXOffset = nXSpacing + ( this.width + nXSpacing ) * this.column;
var nYOffset = nYSpacing + ( this.height + nYSpacing ) * this.row;

this.aTransformSet[0] = 'translate(' + nXOffset + ' ' + nYOffset + ')';

var sTransform = this.aTransformSet.join( ' ' );

return sTransform;
};

Thumbnail.prototype.onMouseOver = function()
{
if( ( currentMode == INDEX_MODE ) && ( this.container.curThumbnailIndex !=  this.index ) )
{
this.container.setSelection( this.index );
}
};


function init()
{
var VIEWBOX = ROOT_NODE.getAttribute('viewBox');

if( VIEWBOX )
{
WIDTH = ROOT_NODE.viewBox.animVal.width;
HEIGHT = ROOT_NODE.viewBox.animVal.height;
}

aSlideShow = new SlideShow();
theMetaDoc =  new MetaDocument();
aSlideShow.bIsEnabled = theMetaDoc.bIsAnimated;
theSlideIndexPage = new SlideIndexPage();
aSlideShow.displaySlide( theMetaDoc.nStartSlideNumber, false );

var hammer = new Hammer(ROOT_NODE);
hammer.on('swipeleft', function() {
switchSlide(1, false);
});
hammer.on('swiperight', function() {
switchSlide(-1, false);
});
hammer.get('swipe').set({ direction: Hammer.DIRECTION_ALL });
hammer.on('swipeup', function() {
aSlideShow.exitSlideShowInApp();
});
hammer.on('swipedown', function() {
aSlideShow.exitSlideShowInApp();
});
}

function presentationEngineStop(message)
{
alert( message + '\nThe presentation engine will be stopped' );
document.onkeydown = null;
document.onkeypress = null;
document.onclick = null;
window.onmousewheel = null;
}

function assert( condition, message )
{
if (!condition)
{
presentationEngineStop( message );
if (typeof console == 'object')
console.trace();
throw new Error( message );
}
}

function dispatchEffects(dir)
{

if( dir == 1 )
{
var bRet = aSlideShow.nextEffect();

if( !bRet )
{
switchSlide( 1, false );
}
}
else
{
switchSlide( dir, false );
}
}

function skipAllEffects()
{
var bRet = aSlideShow.skipAllEffects();
if( !bRet )
{
switchSlide( 1, true );
}
}

function skipEffects(dir)
{
if( dir == 1 )
{
var bRet = aSlideShow.skipPlayingOrNextEffect();

if( !bRet )
{
switchSlide( 1, true );
}
}
else
{
switchSlide( dir, true );
}
}

function switchSlide( nOffset, bSkipTransition )
{
var nNextSlide = nCurSlide + nOffset;
aSlideShow.displaySlide( nNextSlide, bSkipTransition );
}

function displayIndex( offsetNumber )
{
var aMetaSlideSet = theMetaDoc.aMetaSlideSet;
offsetNumber = getSafeIndex( offsetNumber, 0, aMetaSlideSet.length - 1 );

var nTotalThumbnails = theSlideIndexPage.getTotalThumbnails();
var nEnd = Math.min( offsetNumber + nTotalThumbnails, aMetaSlideSet.length);

var aThumbnailSet = theSlideIndexPage.aThumbnailSet;
var j = 0;
for( var i = offsetNumber; i < nEnd; ++i, ++j )
{
aThumbnailSet[j].update( i );
aThumbnailSet[j].show();
}
for( ; j < nTotalThumbnails; ++j )
{
aThumbnailSet[j].hide();
}

if (INDEX_OFFSET != offsetNumber)
INDEX_OFFSET = offsetNumber;
}

function toggleSlideIndex()
{
if( currentMode == SLIDE_MODE )
{

theMetaDoc.getCurrentSlide().hide();
INDEX_OFFSET = -1;
indexSetPageSlide( nCurSlide );
theSlideIndexPage.show();
currentMode = INDEX_MODE;
}
else if( currentMode == INDEX_MODE )
{
theSlideIndexPage.hide();
var nNewSlide = theSlideIndexPage.selectedSlideIndex;

aSlideShow.displaySlide( nNewSlide, true );
currentMode = SLIDE_MODE;
}
}

function abandonIndexMode()
{
theSlideIndexPage.selectedSlideIndex = nCurSlide;
toggleSlideIndex();
}


var CURR_UNIQUE_ID = 0;

function getUniqueId()
{
++CURR_UNIQUE_ID;
return CURR_UNIQUE_ID;
}

function mem_fn( sMethodName )
{
return  function( aObject )
{
var aMethod = aObject[ sMethodName ];
if( aMethod )
aMethod.call( aObject );
else
log( 'method sMethodName not found' );
};
}

function bind( aObject, aMethod )
{
return  function()
{
return aMethod.call( aObject, arguments[0] );
};
}

function bind2( aFunction )
{
if( !aFunction  )
log( 'bind2: passed function is not valid.' );

var aBoundArgList = arguments;

var aResultFunction = null;

switch( aBoundArgList.length )
{
case 1: aResultFunction = function()
{
return aFunction.call( arguments[0], arguments[1],
arguments[2], arguments[3],
arguments[4] );
};
break;
case 2: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], arguments[0],
arguments[1], arguments[2],
arguments[3] );
};
break;
case 3: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], aBoundArgList[2],
arguments[0], arguments[1],
arguments[2] );
};
break;
case 4: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], aBoundArgList[2],
aBoundArgList[3], arguments[0],
arguments[1] );
};
break;
case 5: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], aBoundArgList[2],
aBoundArgList[3], aBoundArgList[4],
arguments[0] );
};
break;
default:
log( 'bind2: arity not handled.' );
}

return aResultFunction;
}

function getCurrentSystemTime()
{
return ( new Date() ).getTime();
}

function getSlideAnimationsRoot( sSlideId )
{
return theMetaDoc.aSlideAnimationsMap[ sSlideId ];
}

function getElementChildren( aElement )
{
var aChildrenArray = [];

var nSize = aElement.childNodes.length;

for( var i = 0; i < nSize; ++i )
{
if( aElement.childNodes[i].nodeType == 1 )
aChildrenArray.push( aElement.childNodes[i] );
}

return aChildrenArray;
}

function removeWhiteSpaces( str )
{
if( !str )
return '';

var re = / */;
var aSplitString = str.split( re );
return aSplitString.join('');
}

function clamp( nValue, nMinimum, nMaximum )
{
if( nValue < nMinimum )
{
return nMinimum;
}
else if( nValue > nMaximum )
{
return nMaximum;
}
else
{
return nValue;
}
}

function makeMatrixString( a, b, c, d, e, f )
{
var s = 'matrix(';
s += a + ', ';
s += b + ', ';
s += c + ', ';
s += d + ', ';
s += e + ', ';
s += f + ')';

return s;
}

function matrixToString( aSVGMatrix )
{
return makeMatrixString( aSVGMatrix.a, aSVGMatrix.b, aSVGMatrix.c,
aSVGMatrix.d, aSVGMatrix.e, aSVGMatrix.f );
}


function numberParser( sValue )
{
if( sValue === '.' )
return undefined;
var reFloatNumber = /^[+-]?[0-9]*[.]?[0-9]*$/;

if( reFloatNumber.test( sValue ) )
return parseFloat( sValue );
else
return undefined;
}

function booleanParser( sValue )
{
sValue = sValue.toLowerCase();
if( sValue === 'true' )
return true;
else if( sValue === 'false' )
return false;
else
return undefined;
}

function colorParser( sValue )
{

function hsl( nHue, nSaturation, nLuminance )
{
return new HSLColor( nHue, nSaturation / 100, nLuminance / 100 );
}

function rgb( nRed, nGreen, nBlue )
{
return new RGBColor( nRed / 255, nGreen / 255, nBlue / 255 );
}

function prgb( nRed, nGreen, nBlue )
{
return new RGBColor( nRed / 100, nGreen / 100, nBlue / 100 );
}

var sCommaPattern = ' *[,] *';
var sIntegerPattern = '[+-]?[0-9]+';
var sHexDigitPattern = '[0-9A-Fa-f]';

var sHexColorPattern = '#(' + sHexDigitPattern + '{2})('
+ sHexDigitPattern + '{2})('
+ sHexDigitPattern + '{2})';

var sRGBIntegerPattern = 'rgb[(] *' + sIntegerPattern + sCommaPattern
+ sIntegerPattern + sCommaPattern
+ sIntegerPattern + ' *[)]';

var sRGBPercentPattern = 'rgb[(] *' + sIntegerPattern + '%' + sCommaPattern
+ sIntegerPattern + '%' + sCommaPattern
+ sIntegerPattern + '%' + ' *[)]';

var sHSLPercentPattern = 'hsl[(] *' + sIntegerPattern + sCommaPattern
+ sIntegerPattern + '%' + sCommaPattern
+ sIntegerPattern + '%' + ' *[)]';

var reHexColor = new RegExp( sHexColorPattern );
var reRGBInteger = new RegExp( sRGBIntegerPattern );
var reRGBPercent = new RegExp( sRGBPercentPattern );
var reHSLPercent = new RegExp( sHSLPercentPattern );

if( reHexColor.test( sValue ) )
{
var aRGBTriple = reHexColor.exec( sValue );

var nRed    = parseInt( aRGBTriple[1], 16 ) / 255;
var nGreen  = parseInt( aRGBTriple[2], 16 ) / 255;
var nBlue   = parseInt( aRGBTriple[3], 16 ) / 255;

return new RGBColor( nRed, nGreen, nBlue );
}
else if( reHSLPercent.test( sValue ) )
{
sValue = sValue.replace( '%', '' ).replace( '%', '' );
return eval( sValue );
}
else if( reRGBInteger.test( sValue ) )
{
return eval( sValue );
}
else if( reRGBPercent.test( sValue ) )
{
sValue = 'p' + sValue.replace( '%', '' ).replace( '%', '' ).replace( '%', '' );
return eval( sValue );
}
else
{
return null;
}
}


function RGBColor( nRed, nGreen, nBlue )
{
this.eColorSpace = COLOR_SPACE_RGB;
this.nRed = nRed;
this.nGreen = nGreen;
this.nBlue = nBlue;
}


RGBColor.prototype.clone = function()
{
return new RGBColor( this.nRed, this.nGreen, this.nBlue );
};

RGBColor.prototype.equal = function( aRGBColor )
{
return ( this.nRed == aRGBColor.nRed ) &&
( this.nGreen == aRGBColor.nGreen ) &&
( this.nBlue == aRGBColor.nBlue );
};

RGBColor.prototype.add = function( aRGBColor )
{
this.nRed += aRGBColor.nRed;
this.nGreen += aRGBColor.nGreen;
this.nBlue += aRGBColor.nBlue;
return this;
};

RGBColor.prototype.scale = function( aT )
{
this.nRed *= aT;
this.nGreen *= aT;
this.nBlue *= aT;
return this;
};

RGBColor.clamp = function( aRGBColor )
{
var aClampedRGBColor = new RGBColor( 0, 0, 0 );

aClampedRGBColor.nRed   = clamp( aRGBColor.nRed, 0.0, 1.0 );
aClampedRGBColor.nGreen = clamp( aRGBColor.nGreen, 0.0, 1.0 );
aClampedRGBColor.nBlue  = clamp( aRGBColor.nBlue, 0.0, 1.0 );

return aClampedRGBColor;
};

RGBColor.prototype.convertToHSL = function()
{
var nRed   = clamp( this.nRed, 0.0, 1.0 );
var nGreen = clamp( this.nGreen, 0.0, 1.0 );
var nBlue  = clamp( this.nBlue, 0.0, 1.0 );

var nMax = Math.max( nRed, nGreen, nBlue );
var nMin = Math.min( nRed, nGreen, nBlue );
var nDelta = nMax - nMin;

var nLuminance  = ( nMax + nMin ) / 2.0;
var nSaturation = 0.0;
var nHue = 0.0;
if( nDelta !== 0 )
{
nSaturation = ( nLuminance > 0.5 ) ?
( nDelta / ( 2.0 - nMax - nMin) ) :
( nDelta / ( nMax + nMin ) );

if( nRed == nMax )
nHue = ( nGreen - nBlue ) / nDelta;
else if( nGreen == nMax )
nHue = 2.0 + ( nBlue - nRed ) / nDelta;
else if( nBlue == nMax )
nHue = 4.0 + ( nRed - nGreen ) / nDelta;

nHue *= 60.0;

if( nHue < 0.0 )
nHue += 360.0;
}

return new HSLColor( nHue, nSaturation, nLuminance );

};

RGBColor.prototype.toString = function( bClamped )
{
var aRGBColor;
if( bClamped )
{
aRGBColor = RGBColor.clamp( this );
}
else
{
aRGBColor = this;
}

var nRed = Math.round( aRGBColor.nRed * 255 );
var nGreen = Math.round( aRGBColor.nGreen * 255 );
var nBlue = Math.round( aRGBColor.nBlue * 255 );

return ( 'rgb(' + nRed + ',' + nGreen + ',' + nBlue + ')' );
};

RGBColor.interpolate = function( aStartRGB , aEndRGB, nT )
{
var aResult = aStartRGB.clone();
var aTEndRGB = aEndRGB.clone();
aResult.scale( 1.0 - nT );
aTEndRGB.scale( nT );
aResult.add( aTEndRGB );

return aResult;
};


function HSLColor( nHue, nSaturation, nLuminance )
{
this.eColorSpace = COLOR_SPACE_HSL;
this.nHue = nHue;
this.nSaturation = nSaturation;
this.nLuminance = nLuminance;

this.normalizeHue();
}


HSLColor.prototype.clone = function()
{
return new HSLColor( this.nHue, this.nSaturation, this.nLuminance );
};

HSLColor.prototype.equal = function( aHSLColor )
{
return ( this.nHue == aHSLColor.nHue ) &&
( this.nSaturation += aHSLColor.nSaturation ) &&
( this.nLuminance += aHSLColor.nLuminance );
};

HSLColor.prototype.add = function( aHSLColor )
{
this.nHue += aHSLColor.nHue;
this.nSaturation += aHSLColor.nSaturation;
this.nLuminance += aHSLColor.nLuminance;
this.normalizeHue();
return this;
};

HSLColor.prototype.scale = function( aT )
{
this.nHue *= aT;
this.nSaturation *= aT;
this.nLuminance *= aT;
this.normalizeHue();
return this;
};

HSLColor.clamp = function( aHSLColor )
{
var aClampedHSLColor = new HSLColor( 0, 0, 0 );

aClampedHSLColor.nHue = aHSLColor.nHue % 360;
if( aClampedHSLColor.nHue < 0 )
aClampedHSLColor.nHue += 360;
aClampedHSLColor.nSaturation = clamp( aHSLColor.nSaturation, 0.0, 1.0 );
aClampedHSLColor.nLuminance = clamp( aHSLColor.nLuminance, 0.0, 1.0 );
};

HSLColor.prototype.normalizeHue = function()
{
this.nHue = this.nHue % 360;
if( this.nHue < 0 ) this.nHue += 360;
};

HSLColor.prototype.toString = function()
{
return 'hsl(' + this.nHue.toFixed( 3 ) + ','
+ this.nSaturation.toFixed( 3 ) + ','
+ this.nLuminance.toFixed( 3 ) + ')';
};

HSLColor.prototype.convertToRGB = function()
{

var nHue = this.nHue % 360;
if( nHue < 0 ) nHue += 360;
var nSaturation =  clamp( this.nSaturation, 0.0, 1.0 );
var nLuminance = clamp( this.nLuminance, 0.0, 1.0 );


if( nSaturation === 0 )
{
return new RGBColor( nLuminance, nLuminance, nLuminance );
}

var nVal1 = ( nLuminance <= 0.5 ) ?
( nLuminance * (1.0 + nSaturation) ) :
( nLuminance + nSaturation - nLuminance * nSaturation );

var nVal2 = 2.0 * nLuminance - nVal1;

var nRed    = HSLColor.hsl2rgbHelper( nVal2, nVal1, nHue + 120 );
var nGreen  = HSLColor.hsl2rgbHelper( nVal2, nVal1, nHue );
var nBlue   = HSLColor.hsl2rgbHelper( nVal2, nVal1, nHue - 120 );

return new RGBColor( nRed, nGreen, nBlue );
};

HSLColor.hsl2rgbHelper = function( nValue1, nValue2, nHue )
{
nHue = nHue % 360;
if( nHue < 0 )
nHue += 360;

if( nHue < 60.0 )
return nValue1 + ( nValue2 - nValue1 ) * nHue / 60.0;
else if( nHue < 180.0 )
return nValue2;
else if( nHue < 240.0 )
return ( nValue1 + ( nValue2 - nValue1 ) * ( 240.0 - nHue ) / 60.0 );
else
return nValue1;
};

HSLColor.interpolate = function( aFrom, aTo, nT, bCCW )
{
var nS = 1.0 - nT;

var nHue = 0.0;
if( aFrom.nHue <= aTo.nHue && !bCCW )
{
nHue = nS * (aFrom.nHue + 360.0) + nT * aTo.nHue;
}
else if( aFrom.nHue > aTo.nHue && bCCW )
{
nHue = nS * aFrom.nHue + nT * (aTo.nHue + 360.0);
}
else
{
nHue = nS * aFrom.nHue + nT * aTo.nHue;
}

var nSaturation = nS * aFrom.nSaturation + nT * aTo.nSaturation;
var nLuminance = nS * aFrom.nLuminance + nT * aTo.nLuminance;

return new HSLColor( nHue, nSaturation, nLuminance );
};


var SVGIdentityMatrix = document.documentElement.createSVGMatrix();

SVGMatrix.prototype.setToIdentity = function()
{
this.a = this.d = 1;
this.b = this.c = this.d = this.e = 0;
};

SVGMatrix.prototype.setToRotationAroundPoint = function( nX, nY, nAngle )
{
nAngle = Math.PI * nAngle / 180;
var nSin = Math.sin( nAngle );
var nCos = Math.cos( nAngle );

this.a = nCos; this.c = -nSin; this.e = nX * (1 - nCos) + nY * nSin;
this.b = nSin; this.d =  nCos; this.f = nY * (1 - nCos) - nX * nSin;
};


SVGPathElement.prototype.prependPath = function( aPath )
{
var sPathData = aPath.getAttribute( 'd' );
sPathData += ( ' ' + this.getAttribute( 'd' ) );
this.setAttribute( 'd', sPathData );
};

SVGPathElement.prototype.appendPath = function( aPath )
{
var sPathData = this.getAttribute( 'd' );
sPathData += ( ' ' + aPath.getAttribute( 'd' ) );
this.setAttribute( 'd', sPathData );
};

function flipOnYAxis( aPath )
{
var aPolyPath = aPath.cloneNode(true);
var aTransform = document.documentElement.createSVGMatrix();
aTransform.a = -1;
aTransform.e = 1;
aPolyPath.matrixTransform(aTransform);
return aPolyPath;
}

function flipOnXAxis( aPath )
{
var aPolyPath = aPath.cloneNode(true);
var aTransform = document.documentElement.createSVGMatrix();
aTransform.d = -1;
aTransform.f = 1;
aPolyPath.matrixTransform(aTransform);
return aPolyPath;
}

SVGPathElement.prototype.matrixTransform = function( aSVGMatrix )
{
if( SVGPathSegList.prototype.matrixTransform )
{
this.pathSegList.matrixTransform( aSVGMatrix );
return;
}

var aPathSegList = this.pathSegList;
var nLength = aPathSegList.numberOfItems;
var i;
for( i = 0; i < nLength; ++i )
{
aPathSegList.getItem( i ).matrixTransform( aSVGMatrix );
}
};

SVGPathElement.prototype.changeOrientation = function()
{
var aPathSegList = this.pathSegList;
var nLength = aPathSegList.numberOfItems;
if( nLength == 0 ) return;

if( SVGPathSegList.prototype.changeOrientation )
{
aPathSegList.changeOrientation();
return;
}

var nCurrentX = 0;
var nCurrentY = 0;

var aPathSeg = aPathSegList.getItem( 0 );
if( aPathSeg.pathSegTypeAsLetter == 'M' )
{
nCurrentX = aPathSeg.x;
nCurrentY = aPathSeg.y;
aPathSegList.removeItem( 0 );
--nLength;
}

var i;
for( i = 0; i < nLength; ++i )
{
aPathSeg = aPathSegList.getItem( i );
var aPoint = aPathSeg.changeOrientation( nCurrentX, nCurrentY );
nCurrentX = aPoint.x;
nCurrentY = aPoint.y;
}


for( i = nLength - 2; i >= 0; --i )
{
aPathSeg = aPathSegList.removeItem( i );
aPathSegList.appendItem( aPathSeg );
}

var aMovePathSeg = this.createSVGPathSegMovetoAbs( nCurrentX, nCurrentY );
aPathSegList.insertItemBefore( aMovePathSeg, 0 );

};


try
{   // Firefox, Google Chrome, Internet Explorer, Safari.

SVGPathSegMovetoAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
};

SVGPathSegLinetoAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
};

SVGPathSegCurvetoQuadraticAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
var nX = this.x1;
this.x1 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y1 + aSVGMatrix.e;
this.y1 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y1 + aSVGMatrix.f;
};

SVGPathSegCurvetoCubicAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
var nX = this.x1;
this.x1 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y1 + aSVGMatrix.e;
this.y1 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y1 + aSVGMatrix.f;
nX = this.x2;
this.x2 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y2 + aSVGMatrix.e;
this.y2 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y2 + aSVGMatrix.f;
};


SVGPathSegMovetoAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
};

SVGPathSegLinetoAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
};

SVGPathSegCurvetoQuadraticAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
};

SVGPathSegCurvetoCubicAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
var nX = this.x1;
this.x1 = this.x2;
this.x2 = nX;
var nY = this.y1;
this.y1 = this.y2;
this.y2 = nY;
return aPoint;
};

}
catch( e )
{   // Opera

if( e.name == 'ReferenceError' )
{
SVGPathSeg.prototype.matrixTransform = function( aSVGMatrix )
{
var nX;
switch( this.pathSegTypeAsLetter )
{
case 'C':
nX = this.x2;
this.x2 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y2 + aSVGMatrix.e;
this.y2 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y2 + aSVGMatrix.f;
case 'Q':
nX = this.x1;
this.x1 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y1 + aSVGMatrix.e;
this.y1 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y1 + aSVGMatrix.f;
case 'M':
case 'L':
SVGPathMatrixTransform( this, aSVGMatrix );
break;
default:
log( 'SVGPathSeg.matrixTransform: unexpected path segment type: '
+ this.pathSegTypeAsLetter );
}
};

SVGPathSeg.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
switch( this.pathSegTypeAsLetter )
{
case 'C':
var nX = this.x1;
this.x1 = this.x2;
this.x2 = nX;
var nY = this.y1;
this.y1 = this.y2;
this.y2 = nY;
case 'M':
case 'L':
case 'Q':
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
default:
log( 'SVGPathSeg.changeOrientation: unexpected path segment type: '
+ this.pathSegTypeAsLetter );
return null;
}
}
}
else throw e;
}

function SVGPathMatrixTransform( aPath, aSVGMatrix )
{
var nX = aPath.x;
aPath.x = aSVGMatrix.a * nX + aSVGMatrix.c * aPath.y + aSVGMatrix.e;
aPath.y = aSVGMatrix.b * nX + aSVGMatrix.d * aPath.y + aSVGMatrix.f;
}


function PriorityQueue( aCompareFunc )
{
this.aSequence = [];
this.aCompareFunc = aCompareFunc;
}

PriorityQueue.prototype.clone = function()
{
var aCopy = new PriorityQueue( this.aCompareFunc );
var src = this.aSequence;
var dest = [];
var i, l;
for( i = 0, l = src.length; i < l; ++i )
{
if( i in src )
{
dest.push( src[i] );
}
}
aCopy.aSequence = dest;
return aCopy;
};

PriorityQueue.prototype.top = function()
{
return this.aSequence[this.aSequence.length - 1];
};

PriorityQueue.prototype.isEmpty = function()
{
return ( this.aSequence.length === 0 );
};

PriorityQueue.prototype.push = function( aValue )
{
this.aSequence.unshift( aValue );
this.aSequence.sort(this.aCompareFunc);
};

PriorityQueue.prototype.clear = function()
{
this.aSequence = [];
};

PriorityQueue.prototype.pop = function()
{
return this.aSequence.pop();
};


var ANIMATION_NODE_CUSTOM               = 0;
var ANIMATION_NODE_PAR                  = 1;
var ANIMATION_NODE_SEQ                  = 2;
var ANIMATION_NODE_ITERATE              = 3;
var ANIMATION_NODE_ANIMATE              = 4;
var ANIMATION_NODE_SET                  = 5;
var ANIMATION_NODE_ANIMATEMOTION        = 6;
var ANIMATION_NODE_ANIMATECOLOR         = 7;
var ANIMATION_NODE_ANIMATETRANSFORM     = 8;
var ANIMATION_NODE_TRANSITIONFILTER     = 9;
var ANIMATION_NODE_AUDIO                = 10;
var ANIMATION_NODE_COMMAND              = 11;

var aAnimationNodeTypeInMap = {
'par'               : ANIMATION_NODE_PAR,
'seq'               : ANIMATION_NODE_SEQ,
'iterate'           : ANIMATION_NODE_ITERATE,
'animate'           : ANIMATION_NODE_ANIMATE,
'set'               : ANIMATION_NODE_SET,
'animatemotion'     : ANIMATION_NODE_ANIMATEMOTION,
'animatecolor'      : ANIMATION_NODE_ANIMATECOLOR,
'animatetransform'  : ANIMATION_NODE_ANIMATETRANSFORM,
'transitionfilter'  : ANIMATION_NODE_TRANSITIONFILTER,
'audio'             : ANIMATION_NODE_AUDIO,
'command'           : ANIMATION_NODE_COMMAND
};


function getAnimationElementType( aElement )
{
var sName = aElement.localName.toLowerCase();

if( sName && aAnimationNodeTypeInMap[ sName ] )
return aAnimationNodeTypeInMap[ sName ];
else
return ANIMATION_NODE_CUSTOM;
}


var INVALID_NODE                = 0;
var UNRESOLVED_NODE             = 1;
var RESOLVED_NODE               = 2;
var ACTIVE_NODE                 = 4;
var FROZEN_NODE                 = 8;
var ENDED_NODE                  = 16;

function getNodeStateName( eNodeState )
{
switch( eNodeState )
{
case INVALID_NODE:
return 'INVALID';
case UNRESOLVED_NODE:
return 'UNRESOLVED';
case RESOLVED_NODE:
return 'RESOLVED';
case ACTIVE_NODE:
return 'ACTIVE';
case FROZEN_NODE:
return 'FROZEN';
case ENDED_NODE:
return 'ENDED';
default:
return 'UNKNOWN';
}
}


var IMPRESS_DEFAULT_NODE                    = 0;
var IMPRESS_ON_CLICK_NODE                   = 1;
var IMPRESS_WITH_PREVIOUS_NODE              = 2;
var IMPRESS_AFTER_PREVIOUS_NODE             = 3;
var IMPRESS_MAIN_SEQUENCE_NODE              = 4;
var IMPRESS_TIMING_ROOT_NODE                = 5;
var IMPRESS_INTERACTIVE_SEQUENCE_NODE       = 6;

var aImpressNodeTypeInMap = {
'on-click'                  : IMPRESS_ON_CLICK_NODE,
'with-previous'             : IMPRESS_WITH_PREVIOUS_NODE,
'after-previous'            : IMPRESS_AFTER_PREVIOUS_NODE,
'main-sequence'             : IMPRESS_MAIN_SEQUENCE_NODE,
'timing-root'               : IMPRESS_TIMING_ROOT_NODE,
'interactive-sequence'      : IMPRESS_INTERACTIVE_SEQUENCE_NODE
};

var aImpressNodeTypeOutMap = [ 'default', 'on-click', 'with-previous', 'after-previous',
'main-sequence', 'timing-root', 'interactive-sequence' ];


var aPresetClassInMap = {};


var aPresetIdInMap = {};


var RESTART_MODE_DEFAULT            = 0;
var RESTART_MODE_INHERIT            = 0; // eslint-disable-line no-unused-vars
var RESTART_MODE_ALWAYS             = 1;
var RESTART_MODE_WHEN_NOT_ACTIVE    = 2;
var RESTART_MODE_NEVER              = 3;

var aRestartModeInMap = {
'inherit'       : RESTART_MODE_DEFAULT,
'always'        : RESTART_MODE_ALWAYS,
'whenNotActive' : RESTART_MODE_WHEN_NOT_ACTIVE,
'never'         : RESTART_MODE_NEVER
};

var aRestartModeOutMap = [ 'inherit','always', 'whenNotActive', 'never' ];


var FILL_MODE_DEFAULT           = 0;
var FILL_MODE_INHERIT           = 0; // eslint-disable-line no-unused-vars
var FILL_MODE_REMOVE            = 1;
var FILL_MODE_FREEZE            = 2;
var FILL_MODE_HOLD              = 3;
var FILL_MODE_TRANSITION        = 4;
var FILL_MODE_AUTO              = 5;

var aFillModeInMap = {
'inherit'       : FILL_MODE_DEFAULT,
'remove'        : FILL_MODE_REMOVE,
'freeze'        : FILL_MODE_FREEZE,
'hold'          : FILL_MODE_HOLD,
'transition'    : FILL_MODE_TRANSITION,
'auto'          : FILL_MODE_AUTO
};

var aFillModeOutMap = [ 'inherit', 'remove', 'freeze', 'hold', 'transition', 'auto' ];


var ADDITIVE_MODE_UNKNOWN       = 0; // eslint-disable-line no-unused-vars
var ADDITIVE_MODE_BASE          = 1;
var ADDITIVE_MODE_SUM           = 2;
var ADDITIVE_MODE_REPLACE       = 3;
var ADDITIVE_MODE_MULTIPLY      = 4;
var ADDITIVE_MODE_NONE          = 5;

var aAddittiveModeInMap = {
'base'          : ADDITIVE_MODE_BASE,
'sum'           : ADDITIVE_MODE_SUM,
'replace'       : ADDITIVE_MODE_REPLACE,
'multiply'      : ADDITIVE_MODE_MULTIPLY,
'none'          : ADDITIVE_MODE_NONE
};

var aAddittiveModeOutMap = [ 'unknown', 'base', 'sum', 'replace', 'multiply', 'none' ];


var ACCUMULATE_MODE_NONE        = 0;
var ACCUMULATE_MODE_SUM         = 1;

var aAccumulateModeOutMap = [ 'none', 'sum' ];

var CALC_MODE_DISCRETE          = 1;
var CALC_MODE_LINEAR            = 2;
var CALC_MODE_PACED             = 3;
var CALC_MODE_SPLINE            = 4;

var aCalcModeInMap = {
'discrete'      : CALC_MODE_DISCRETE,
'linear'        : CALC_MODE_LINEAR,
'paced'         : CALC_MODE_PACED,
'spline'        : CALC_MODE_SPLINE
};

var aCalcModeOutMap = [ 'unknown', 'discrete', 'linear', 'paced', 'spline' ];


var COLOR_SPACE_RGB = 0;
var COLOR_SPACE_HSL = 1;

var aColorSpaceInMap = { 'rgb': COLOR_SPACE_RGB, 'hsl': COLOR_SPACE_HSL };

var aColorSpaceOutMap = [ 'rgb', 'hsl' ];


var CLOCKWISE               = 0;
var COUNTERCLOCKWISE        = 1;

var aClockDirectionInMap = { 'clockwise': CLOCKWISE, 'counter-clockwise': COUNTERCLOCKWISE };

var aClockDirectionOutMap = [ 'clockwise', 'counter-clockwise' ];


var UNKNOWN_PROPERTY        = 0; // eslint-disable-line no-unused-vars
var NUMBER_PROPERTY         = 1;
var ENUM_PROPERTY           = 2;
var COLOR_PROPERTY          = 3;
var STRING_PROPERTY         = 4;
var BOOL_PROPERTY           = 5;

var aValueTypeOutMap = [ 'unknown', 'number', 'enum', 'color', 'string', 'boolean' ];


var aAttributeMap =
{
'height':           {   'type':         NUMBER_PROPERTY,
'get':          'getHeight',
'set':          'setHeight',
'getmod':       'makeScaler( 1/nHeight )',
'setmod':       'makeScaler( nHeight)'          },

'opacity':          {   'type':         NUMBER_PROPERTY,
'get':          'getOpacity',
'set':          'setOpacity'                    },

'rotate':           {   'type':         NUMBER_PROPERTY,
'get':          'getRotationAngle',
'set':          'setRotationAngle'              },

'width':            {   'type':         NUMBER_PROPERTY,
'get':          'getWidth',
'set':          'setWidth',
'getmod':       'makeScaler( 1/nWidth )',
'setmod':       'makeScaler( nWidth)'           },

'x':                {   'type':         NUMBER_PROPERTY,
'get':          'getX',
'set':          'setX',
'getmod':       'makeScaler( 1/nWidth )',
'setmod':       'makeScaler( nWidth)'           },

'y':                {   'type':         NUMBER_PROPERTY,
'get':          'getY',
'set':          'setY',
'getmod':       'makeScaler( 1/nHeight )',
'setmod':       'makeScaler( nHeight)'          },

'fill':             {   'type':         ENUM_PROPERTY,
'get':          'getFillStyle',
'set':          'setFillStyle'                  },

'stroke':           {   'type':         ENUM_PROPERTY,
'get':          'getStrokeStyle',
'set':          'setStrokeStyle'                },

'visibility':       {   'type':         ENUM_PROPERTY,
'get':          'getVisibility',
'set':          'setVisibility'                 },

'fill-color':       {   'type':         COLOR_PROPERTY,
'get':          'getFillColor',
'set':          'setFillColor'                  },

'stroke-color':     {   'type':         COLOR_PROPERTY,
'get':          'getStrokeColor',
'set':          'setStrokeColor'                },

'color':            {   'type':         COLOR_PROPERTY,
'get':          'getFontColor',
'set':          'setFontColor'                  }

};


var TRANSITION_INVALID              = 0;    // Invalid type
var TRANSITION_CLIP_POLYPOLYGON     = 1;    // Transition expressed by parametric clip polygon
var TRANSITION_SPECIAL              = 2;    // Transition expressed by hand-crafted function


var BARWIPE_TRANSITION              = 1;
var BOXWIPE_TRANSITION              = 2;
var FOURBOXWIPE_TRANSITION          = 3;
var ELLIPSEWIPE_TRANSITION          = 4; // 17
var CLOCKWIPE_TRANSITION            = 5; // 22
var PINWHEELWIPE_TRANSITION         = 6; // 23
var PUSHWIPE_TRANSITION             = 7; // 35
var SLIDEWIPE_TRANSITION            = 8; // 36
var FADE_TRANSITION                 = 9; // 37
var RANDOMBARWIPE_TRANSITION        = 10; // 38
var CHECKERBOARDWIPE_TRANSITION     = 11; // 39
var DISSOLVE_TRANSITION             = 12; // 40
var SNAKEWIPE_TRANSITION            = 13; // 30
var PARALLELSNAKESWIPE_TRANSITION   = 14; // 32
var IRISWIPE_TRANSITION             = 15; // 12
var BARNDOORWIPE_TRANSITION         = 16; // 4
var VEEWIPE_TRANSITION              = 17; // 8
var ZIGZAGWIPE_TRANSITION           = 18; // 10
var BARNZIGZAGWIPE_TRANSITION       = 19; // 11
var FANWIPE_TRANSITION              = 20; // 25
var SINGLESWEEPWIPE_TRANSITION      = 21; // 24
var WATERFALLWIPE_TRANSITION        = 22; // 34
var SPIRALWIPE_TRANSITION           = 23; // 31
var MISCDIAGONALWIPE_TRANSITION     = 24; // 7
var BOXSNAKESWIPE_TRANSITION        = 25; // 33

var aTransitionTypeInMap = {
'barWipe'           : BARWIPE_TRANSITION,
'boxWipe'           : BOXWIPE_TRANSITION,
'barnDoorWipe'      : BARNDOORWIPE_TRANSITION,
'fourBoxWipe'       : FOURBOXWIPE_TRANSITION,
'ellipseWipe'       : ELLIPSEWIPE_TRANSITION,
'clockWipe'         : CLOCKWIPE_TRANSITION,
'pinWheelWipe'      : PINWHEELWIPE_TRANSITION,
'miscDiagonalWipe'  : MISCDIAGONALWIPE_TRANSITION,
'pushWipe'          : PUSHWIPE_TRANSITION,
'slideWipe'         : SLIDEWIPE_TRANSITION,
'fade'              : FADE_TRANSITION,
'fanWipe'           : FANWIPE_TRANSITION,
'randomBarWipe'     : RANDOMBARWIPE_TRANSITION,
'checkerBoardWipe'  : CHECKERBOARDWIPE_TRANSITION,
'dissolve'          : DISSOLVE_TRANSITION,
'singleSweepWipe'   : SINGLESWEEPWIPE_TRANSITION,
'snakeWipe'         : SNAKEWIPE_TRANSITION,
'parallelSnakesWipe': PARALLELSNAKESWIPE_TRANSITION,
'spiralWipe'        : SPIRALWIPE_TRANSITION,
'boxSnakesWipe'     : BOXSNAKESWIPE_TRANSITION,
'irisWipe'          : IRISWIPE_TRANSITION,
'veeWipe'           : VEEWIPE_TRANSITION,
'zigZagWipe'        : ZIGZAGWIPE_TRANSITION,
'barnZigZagWipe'    : BARNZIGZAGWIPE_TRANSITION,
'waterfallWipe'     : WATERFALLWIPE_TRANSITION
};

var DEFAULT_TRANS_SUBTYPE                       = 0;
var LEFTTORIGHT_TRANS_SUBTYPE                   = 1;
var TOPTOBOTTOM_TRANS_SUBTYPE                   = 2;
var CORNERSIN_TRANS_SUBTYPE                     = 3; // 11
var CORNERSOUT_TRANS_SUBTYPE                    = 4;
var VERTICAL_TRANS_SUBTYPE                      = 5;
var HORIZONTAL_TRANS_SUBTYPE                    = 6; // 14
var DOWN_TRANS_SUBTYPE                          = 7; // 19
var CIRCLE_TRANS_SUBTYPE                        = 8; // 27
var CLOCKWISETWELVE_TRANS_SUBTYPE               = 9; // 33
var CLOCKWISETHREE_TRANS_SUBTYPE                = 10;
var CLOCKWISESIX_TRANS_SUBTYPE                  = 11;
var CLOCKWISENINE_TRANS_SUBTYPE                 = 12;
var TWOBLADEVERTICAL_TRANS_SUBTYPE              = 13;
var TWOBLADEHORIZONTAL_TRANS_SUBTYPE            = 14;
var FOURBLADE_TRANS_SUBTYPE                     = 15; // 39
var FROMLEFT_TRANS_SUBTYPE                      = 16; // 97
var FROMTOP_TRANS_SUBTYPE                       = 17;
var FROMRIGHT_TRANS_SUBTYPE                     = 18;
var FROMBOTTOM_TRANS_SUBTYPE                    = 19;
var CROSSFADE_TRANS_SUBTYPE                     = 20;
var FADETOCOLOR_TRANS_SUBTYPE                   = 21;
var FADEFROMCOLOR_TRANS_SUBTYPE                 = 22;
var FADEOVERCOLOR_TRANS_SUBTYPE                 = 23;
var THREEBLADE_TRANS_SUBTYPE                    = 24;
var EIGHTBLADE_TRANS_SUBTYPE                    = 25;
var ONEBLADE_TRANS_SUBTYPE                      = 26; // 107
var ACROSS_TRANS_SUBTYPE                        = 27;
var TOPLEFTVERTICAL_TRANS_SUBTYPE               = 28; // 109
var TOPLEFTHORIZONTAL_TRANS_SUBTYPE             = 29; // 64
var TOPLEFTDIAGONAL_TRANS_SUBTYPE               = 30; // 65
var TOPRIGHTDIAGONAL_TRANS_SUBTYPE              = 31; // 66
var BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE           = 32; // 67
var BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE            = 33; // 68
var RECTANGLE_TRANS_SUBTYPE                     = 34; // 101
var DIAMOND_TRANS_SUBTYPE                       = 35; // 102
var TOPLEFT_TRANS_SUBTYPE                       = 36; // 3
var TOPRIGHT_TRANS_SUBTYPE                      = 37; // 4
var BOTTOMRIGHT_TRANS_SUBTYPE                   = 38; // 5
var BOTTOMLEFT_TRANS_SUBTYPE                    = 39; // 6
var TOPCENTER_TRANS_SUBTYPE                     = 40; // 7
var RIGHTCENTER_TRANS_SUBTYPE                   = 41; // 8
var BOTTOMCENTER_TRANS_SUBTYPE                  = 42; // 9
var LEFTCENTER_TRANS_SUBTYPE                    = 43; // 10
var LEFT_TRANS_SUBTYPE                          = 44; // 20
var UP_TRANS_SUBTYPE                            = 45; // 21
var RIGHT_TRANS_SUBTYPE                         = 46; // 22
var DIAGONALBOTTOMLEFT_TRANS_SUBTYPE            = 47; // 15
var DIAGONALTOPLEFT_TRANS_SUBTYPE               = 48; // 16
var CENTERTOP_TRANS_SUBTYPE                     = 49; // 48
var CENTERRIGHT_TRANS_SUBTYPE                   = 50; // 49
var TOP_TRANS_SUBTYPE                           = 51; // 50
var BOTTOM_TRANS_SUBTYPE                        = 52; // 52
var CLOCKWISETOP_TRANS_SUBTYPE                  = 53; // 40
var CLOCKWISERIGHT_TRANS_SUBTYPE                = 54; // 41
var CLOCKWISEBOTTOM_TRANS_SUBTYPE               = 55; // 42
var CLOCKWISELEFT_TRANS_SUBTYPE                 = 56; // 43
var CLOCKWISETOPLEFT_TRANS_SUBTYPE              = 57; // 44
var COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE    = 58; // 45
var CLOCKWISEBOTTOMRIGHT_TRANS_SUBTYPE          = 59; // 46
var COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE      = 60; // 47
var VERTICALLEFT_TRANS_SUBTYPE                  = 61; // 93
var VERTICALRIGHT_TRANS_SUBTYPE                 = 62; // 94
var HORIZONTALLEFT_TRANS_SUBTYPE                = 63; // 95
var HORIZONTALRIGHT_TRANS_SUBTYPE               = 64; // 96
var TOPLEFTCLOCKWISE_TRANS_SUBTYPE              = 65; // 69
var TOPRIGHTCLOCKWISE_TRANS_SUBTYPE             = 66; // 70
var BOTTOMRIGHTCLOCKWISE_TRANS_SUBTYPE          = 67; // 71
var BOTTOMLEFTCLOCKWISE_TRANS_SUBTYPE           = 68; // 72
var TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE       = 69; // 73
var TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE      = 70; // 74
var BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE   = 71; // 75
var BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE    = 72; // 76
var DOUBLEBARNDOOR_TRANS_SUBTYPE                = 73; // 17
var DOUBLEDIAMOND_TRANS_SUBTYPE                 = 74; // 18
var VERTICALTOPSAME_TRANS_SUBTYPE               = 75; // 77
var VERTICALBOTTOMSAME_TRANS_SUBTYPE            = 76; // 78
var VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE       = 77; // 79
var VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE    = 78; // 80
var HORIZONTALLEFTSAME_TRANS_SUBTYPE            = 79; // 81
var HORIZONTALRIGHTSAME_TRANS_SUBTYPE           = 80; // 82
var HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE     = 81; // 83
var HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE    = 82; // 84
var DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE    = 83; // 85
var DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE       = 84; // 86
var TWOBOXTOP_TRANS_SUBTYPE                     = 85; // 87
var TWOBOXBOTTOM_TRANS_SUBTYPE                  = 86; // 88
var TWOBOXLEFT_TRANS_SUBTYPE                    = 87; // 89
var TWOBOXRIGHT_TRANS_SUBTYPE                   = 88; // 90
var FOURBOXVERTICAL_TRANS_SUBTYPE               = 89; // 91
var FOURBOXHORIZONTAL_TRANS_SUBTYPE             = 90; // 92

var aTransitionSubtypeInMap = {
'default'                       : DEFAULT_TRANS_SUBTYPE,
'leftToRight'                   : LEFTTORIGHT_TRANS_SUBTYPE,
'topToBottom'                   : TOPTOBOTTOM_TRANS_SUBTYPE,
'cornersIn'                     : CORNERSIN_TRANS_SUBTYPE,
'cornersOut'                    : CORNERSOUT_TRANS_SUBTYPE,
'vertical'                      : VERTICAL_TRANS_SUBTYPE,
'centerTop'                     : CENTERTOP_TRANS_SUBTYPE,
'centerRight'                   : CENTERRIGHT_TRANS_SUBTYPE,
'top'                           : TOP_TRANS_SUBTYPE,
'right'                         : RIGHT_TRANS_SUBTYPE,
'bottom'                        : BOTTOM_TRANS_SUBTYPE,
'left'                          : LEFT_TRANS_SUBTYPE,
'horizontal'                    : HORIZONTAL_TRANS_SUBTYPE,
'down'                          : DOWN_TRANS_SUBTYPE,
'circle'                        : CIRCLE_TRANS_SUBTYPE,
'clockwiseTwelve'               : CLOCKWISETWELVE_TRANS_SUBTYPE,
'clockwiseThree'                : CLOCKWISETHREE_TRANS_SUBTYPE,
'clockwiseSix'                  : CLOCKWISESIX_TRANS_SUBTYPE,
'clockwiseNine'                 : CLOCKWISENINE_TRANS_SUBTYPE,
'clockwiseRight'                : CLOCKWISERIGHT_TRANS_SUBTYPE,
'clockwiseTop'                  : CLOCKWISETOP_TRANS_SUBTYPE,
'clockwiseBottom'               : CLOCKWISEBOTTOM_TRANS_SUBTYPE,
'clockwiseLeft'                 : CLOCKWISELEFT_TRANS_SUBTYPE,
'clockwiseTopLeft'              : CLOCKWISETOPLEFT_TRANS_SUBTYPE,
'counterClockwiseBottomLeft'    : COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE,
'clockwiseBottomRight'          : CLOCKWISEBOTTOMRIGHT_TRANS_SUBTYPE,
'counterClockwiseTopRight'      : COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE,
'twoBladeVertical'              : TWOBLADEVERTICAL_TRANS_SUBTYPE,
'twoBladeHorizontal'            : TWOBLADEHORIZONTAL_TRANS_SUBTYPE,
'fourBlade'                     : FOURBLADE_TRANS_SUBTYPE,
'fromLeft'                      : FROMLEFT_TRANS_SUBTYPE,
'fromTop'                       : FROMTOP_TRANS_SUBTYPE,
'fromRight'                     : FROMRIGHT_TRANS_SUBTYPE,
'fromBottom'                    : FROMBOTTOM_TRANS_SUBTYPE,
'crossfade'                     : CROSSFADE_TRANS_SUBTYPE,
'fadeToColor'                   : FADETOCOLOR_TRANS_SUBTYPE,
'fadeFromColor'                 : FADEFROMCOLOR_TRANS_SUBTYPE,
'fadeOverColor'                 : FADEOVERCOLOR_TRANS_SUBTYPE,
'threeBlade'                    : THREEBLADE_TRANS_SUBTYPE,
'eightBlade'                    : EIGHTBLADE_TRANS_SUBTYPE,
'oneBlade'                      : ONEBLADE_TRANS_SUBTYPE,
'across'                        : ACROSS_TRANS_SUBTYPE,
'topLeftVertical'               : TOPLEFTVERTICAL_TRANS_SUBTYPE,
'topLeftHorizontal'             : TOPLEFTHORIZONTAL_TRANS_SUBTYPE,
'topLeftDiagonal'               : TOPLEFTDIAGONAL_TRANS_SUBTYPE,
'topRightDiagonal'              : TOPRIGHTDIAGONAL_TRANS_SUBTYPE,
'bottomRightDiagonal'           : BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE,
'topLeftClockwise'              : TOPLEFTCLOCKWISE_TRANS_SUBTYPE,
'topRightClockwise'             : TOPRIGHTCLOCKWISE_TRANS_SUBTYPE,
'bottomRightClockwise'          : BOTTOMRIGHTCLOCKWISE_TRANS_SUBTYPE,
'bottomLeftClockwise'           : BOTTOMLEFTCLOCKWISE_TRANS_SUBTYPE,
'topLeftCounterClockwise'       : TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'topRightCounterClockwise'      : TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'bottomRightCounterClockwise'   : BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'bottomLeftCounterClockwise'    : BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'bottomLeftDiagonal'            : BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE,
'rectangle'                     : RECTANGLE_TRANS_SUBTYPE,
'diamond'                       : DIAMOND_TRANS_SUBTYPE,
'topLeft'                       : TOPLEFT_TRANS_SUBTYPE,
'topRight'                      : TOPRIGHT_TRANS_SUBTYPE,
'bottomRight'                   : BOTTOMRIGHT_TRANS_SUBTYPE,
'bottomLeft'                    : BOTTOMLEFT_TRANS_SUBTYPE,
'topCenter'                     : TOPCENTER_TRANS_SUBTYPE,
'rightCenter'                   : RIGHTCENTER_TRANS_SUBTYPE,
'bottomCenter'                  : BOTTOMCENTER_TRANS_SUBTYPE,
'leftCenter'                    : LEFTCENTER_TRANS_SUBTYPE,
'up'                            : UP_TRANS_SUBTYPE,
'diagonalBottomLeft'            : DIAGONALBOTTOMLEFT_TRANS_SUBTYPE,
'diagonalTopLeft'               : DIAGONALTOPLEFT_TRANS_SUBTYPE,
'verticalLeft'                  : VERTICALLEFT_TRANS_SUBTYPE,
'verticalRight'                 : VERTICALRIGHT_TRANS_SUBTYPE,
'horizontalLeft'                : HORIZONTALLEFT_TRANS_SUBTYPE,
'horizontalRight'               : HORIZONTALRIGHT_TRANS_SUBTYPE,
'doubleBarnDoor'                : DOUBLEBARNDOOR_TRANS_SUBTYPE,
'doubleDiamond'                 : DOUBLEDIAMOND_TRANS_SUBTYPE,
'verticalTopSame'               : VERTICALTOPSAME_TRANS_SUBTYPE,
'verticalBottomSame'            : VERTICALBOTTOMSAME_TRANS_SUBTYPE,
'verticalTopLeftOpposite'       : VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
'verticalBottomLeftOpposite'    : VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE,
'horizontalLeftSame'            : HORIZONTALLEFTSAME_TRANS_SUBTYPE,
'horizontalRightSame'           : HORIZONTALRIGHTSAME_TRANS_SUBTYPE,
'horizontalTopLeftOpposite'     : HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
'horizontalTopRightOpposite'    : HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE,
'diagonalBottomLeftOpposite'    : DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE,
'diagonalTopLeftOpposite'       : DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
'twoBoxTop'                     : TWOBOXTOP_TRANS_SUBTYPE,
'twoBoxBottom'                  : TWOBOXBOTTOM_TRANS_SUBTYPE,
'twoBoxLeft'                    : TWOBOXLEFT_TRANS_SUBTYPE,
'twoBoxRight'                   : TWOBOXRIGHT_TRANS_SUBTYPE,
'fourBoxVertical'               : FOURBOXVERTICAL_TRANS_SUBTYPE,
'fourBoxHorizontal'             : FOURBOXHORIZONTAL_TRANS_SUBTYPE
};

var TRANSITION_MODE_IN  = 1;
var TRANSITION_MODE_OUT = 0;

var aTransitionModeOutMap = [ 'out', 'in' ];


var REVERSEMETHOD_IGNORE                    = 0;
var REVERSEMETHOD_INVERT_SWEEP              = 1;
var REVERSEMETHOD_SUBTRACT_POLYGON          = 2;
var REVERSEMETHOD_SUBTRACT_AND_INVERT       = 3;
var REVERSEMETHOD_ROTATE_180                = 4;
var REVERSEMETHOD_FLIP_X                    = 5;
var REVERSEMETHOD_FLIP_Y                    = 6;

var aReverseMethodOutMap = ['ignore', 'invert sweep', 'subtract polygon',
'subtract and invert', 'rotate 180', 'flip x', 'flip y'];


var aTransitionInfoTable = {};

aTransitionInfoTable[0] = {};
aTransitionInfoTable[0][0] =
{
'class' : TRANSITION_INVALID,
'rotationAngle' : 0.0,
'scaleX' : 0.0,
'scaleY' : 0.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : false,
'scaleIsotropically' : false
};

aTransitionInfoTable[SNAKEWIPE_TRANSITION] = {};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPLEFTVERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPLEFTHORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPLEFTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPRIGHTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
}

aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION] = {};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALTOPSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALBOTTOMSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALLEFTSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALRIGHTSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[SPIRALWIPE_TRANSITION] = {};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPLEFTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPRIGHTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMRIGHTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMLEFTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION] = {};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXTOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][FOURBOXVERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][FOURBOXHORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BARNDOORWIPE_TRANSITION] = {};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 0.0,
'scaleX': 1.0,
'scaleY': 1.0,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 90.0,
'scaleX': 1.0,
'scaleY': 1.0,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][DIAGONALBOTTOMLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][DIAGONALTOPLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': -45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[MISCDIAGONALWIPE_TRANSITION] = {};
aTransitionInfoTable[MISCDIAGONALWIPE_TRANSITION][DOUBLEBARNDOOR_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_IGNORE,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[MISCDIAGONALWIPE_TRANSITION][DOUBLEDIAMOND_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 0.0,
'scaleX': 1,
'scaleY': 1,
'reverseMethod': REVERSEMETHOD_IGNORE,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[IRISWIPE_TRANSITION] = {};
aTransitionInfoTable[IRISWIPE_TRANSITION][RECTANGLE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 0.0,
'scaleX': 1.0,
'scaleY': 1.0,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[IRISWIPE_TRANSITION][DIAMOND_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[ZIGZAGWIPE_TRANSITION] = {};
aTransitionInfoTable[ZIGZAGWIPE_TRANSITION][LEFTTORIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[ZIGZAGWIPE_TRANSITION][TOPTOBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BARNZIGZAGWIPE_TRANSITION] = {};
aTransitionInfoTable[BARNZIGZAGWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BARNZIGZAGWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BARWIPE_TRANSITION] = {};
aTransitionInfoTable[BARWIPE_TRANSITION][LEFTTORIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : false,
'scaleIsotropically' : false
};
aTransitionInfoTable[BARWIPE_TRANSITION][TOPTOBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : false,
'scaleIsotropically' : false
};

aTransitionInfoTable[WATERFALLWIPE_TRANSITION] = {};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][VERTICALLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][VERTICALRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][HORIZONTALLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][HORIZONTALRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BOXWIPE_TRANSITION] = {};
aTransitionInfoTable[BOXWIPE_TRANSITION][TOPLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][TOPRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][BOTTOMRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][BOTTOMLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][TOPCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][RIGHTCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][BOTTOMCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][LEFTCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[FOURBOXWIPE_TRANSITION] = {};
aTransitionInfoTable[FOURBOXWIPE_TRANSITION][CORNERSIN_TRANS_SUBTYPE] =
aTransitionInfoTable[FOURBOXWIPE_TRANSITION][CORNERSOUT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[ELLIPSEWIPE_TRANSITION] = {};
aTransitionInfoTable[ELLIPSEWIPE_TRANSITION][CIRCLE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};
aTransitionInfoTable[ELLIPSEWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[ELLIPSEWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[CLOCKWIPE_TRANSITION] = {};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISETWELVE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISETHREE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISESIX_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISENINE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[VEEWIPE_TRANSITION] = {};
aTransitionInfoTable[VEEWIPE_TRANSITION][DOWN_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[VEEWIPE_TRANSITION][LEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[VEEWIPE_TRANSITION][UP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[VEEWIPE_TRANSITION][RIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[FANWIPE_TRANSITION] = {};
aTransitionInfoTable[FANWIPE_TRANSITION][CENTERTOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][CENTERRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][TOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][RIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][BOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][LEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};


aTransitionInfoTable[PINWHEELWIPE_TRANSITION] = {};
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][ONEBLADE_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][TWOBLADEVERTICAL_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][THREEBLADE_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][FOURBLADE_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][EIGHTBLADE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][TWOBLADEHORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};

aTransitionInfoTable[PUSHWIPE_TRANSITION] = {};
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMLEFT_TRANS_SUBTYPE] =
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMTOP_TRANS_SUBTYPE] =
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMRIGHT_TRANS_SUBTYPE] =
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_SPECIAL,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};


aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION] = {};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISETOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISERIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISEBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISELEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISETOPLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISEBOTTOMRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[SLIDEWIPE_TRANSITION] = {};
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMLEFT_TRANS_SUBTYPE] =
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMTOP_TRANS_SUBTYPE] =
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMRIGHT_TRANS_SUBTYPE] =
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_SPECIAL,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[FADE_TRANSITION] = {};
aTransitionInfoTable[FADE_TRANSITION][CROSSFADE_TRANS_SUBTYPE] =
aTransitionInfoTable[FADE_TRANSITION][FADETOCOLOR_TRANS_SUBTYPE] =
aTransitionInfoTable[FADE_TRANSITION][FADEFROMCOLOR_TRANS_SUBTYPE] =
aTransitionInfoTable[FADE_TRANSITION][FADEOVERCOLOR_TRANS_SUBTYPE] =
{
'class' : TRANSITION_SPECIAL,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};


aTransitionInfoTable[RANDOMBARWIPE_TRANSITION] = {};
aTransitionInfoTable[RANDOMBARWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[RANDOMBARWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[CHECKERBOARDWIPE_TRANSITION] = {};
aTransitionInfoTable[CHECKERBOARDWIPE_TRANSITION][DOWN_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CHECKERBOARDWIPE_TRANSITION][ACROSS_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[DISSOLVE_TRANSITION] = {};
aTransitionInfoTable[DISSOLVE_TRANSITION][DEFAULT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};


function createStateTransitionTable()
{
var aSTT = {};

aSTT[RESTART_MODE_NEVER] = {};
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE] = {};
aSTT[RESTART_MODE_ALWAYS] = {};

var aTable =
aSTT[RESTART_MODE_NEVER][FILL_MODE_REMOVE] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = ENDED_NODE;
aTable[FROZEN_NODE]         = INVALID_NODE;  // this state is unreachable here
aTable[ENDED_NODE]          = ENDED_NODE;    // this state is a sink here (cannot restart)

aTable =
aSTT[RESTART_MODE_NEVER][FILL_MODE_FREEZE] =
aSTT[RESTART_MODE_NEVER][FILL_MODE_HOLD] =
aSTT[RESTART_MODE_NEVER][FILL_MODE_TRANSITION] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = FROZEN_NODE | ENDED_NODE;
aTable[FROZEN_NODE]         = ENDED_NODE;
aTable[ENDED_NODE]          = ENDED_NODE;   // this state is a sink here (cannot restart)

aTable =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_REMOVE] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = ENDED_NODE;
aTable[FROZEN_NODE]         = INVALID_NODE;  // this state is unreachable here
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

aTable =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_FREEZE] =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_HOLD] =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_TRANSITION] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = FROZEN_NODE | ENDED_NODE;
aTable[FROZEN_NODE]         = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

aTable =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_REMOVE] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible
aTable[FROZEN_NODE]         = INVALID_NODE;  // this state is unreachable here
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

aTable =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_FREEZE] =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_HOLD] =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_TRANSITION] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = RESOLVED_NODE | ACTIVE_NODE | FROZEN_NODE | ENDED_NODE;
aTable[FROZEN_NODE]         = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

return aSTT;
}

var aStateTransitionTable = createStateTransitionTable();


function getTransitionTable( eRestartMode, eFillMode )
{
if( eRestartMode == RESTART_MODE_DEFAULT )
{
log( 'getTransitionTable: unexpected restart mode: ' + eRestartMode
+ '. Used NEVER instead.');
eRestartMode = RESTART_MODE_NEVER;
}

if( eFillMode == FILL_MODE_DEFAULT ||
eFillMode == FILL_MODE_AUTO )
{
eFillMode = FILL_MODE_REMOVE;
}

return aStateTransitionTable[eRestartMode][eFillMode];
}


var EVENT_TRIGGER_UNKNOWN               = 0;
var EVENT_TRIGGER_ON_SLIDE_BEGIN        = 1; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_SLIDE_END          = 2; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_BEGIN_EVENT           = 3;
var EVENT_TRIGGER_END_EVENT             = 4;
var EVENT_TRIGGER_ON_CLICK              = 5;
var EVENT_TRIGGER_ON_DBL_CLICK          = 6; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_MOUSE_ENTER        = 7; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_MOUSE_LEAVE        = 8; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_NEXT_EFFECT        = 9;
var EVENT_TRIGGER_ON_PREV_EFFECT        = 10;
var EVENT_TRIGGER_REPEAT                = 11; // eslint-disable-line no-unused-vars

var aEventTriggerOutMap = [ 'unknown', 'slideBegin', 'slideEnd', 'begin', 'end', 'click',
'doubleClick', 'mouseEnter', 'mouseLeave', 'next', 'previous', 'repeat' ];


function getEventTriggerType( sEventTrigger )
{
if( sEventTrigger == 'begin' )
return EVENT_TRIGGER_BEGIN_EVENT;
else if( sEventTrigger == 'end' )
return EVENT_TRIGGER_END_EVENT;
else if( sEventTrigger == 'next' )
return EVENT_TRIGGER_ON_NEXT_EFFECT;
else if( sEventTrigger == 'prev' )
return EVENT_TRIGGER_ON_PREV_EFFECT;
else if( sEventTrigger == 'click' )
return EVENT_TRIGGER_ON_CLICK;
else
return EVENT_TRIGGER_UNKNOWN;
}


var UNKNOWN_TIMING          = 0;
var OFFSET_TIMING           = 1;
var WALLCLOCK_TIMING        = 2; // eslint-disable-line no-unused-vars
var INDEFINITE_TIMING       = 3;
var EVENT_TIMING            = 4;
var SYNCBASE_TIMING         = 5;
var MEDIA_TIMING            = 6; // eslint-disable-line no-unused-vars

var aTimingTypeOutMap = [ 'unknown', 'offset', 'wallclock', 'indefinite', 'event', 'syncbase', 'media' ];


var CHARCODE_PLUS       = '+'.charCodeAt(0);
var CHARCODE_MINUS      = '-'.charCodeAt(0);
var CHARCODE_0          = '0'.charCodeAt(0);
var CHARCODE_9          = '9'.charCodeAt(0);


function Timing( aAnimationNode, sTimingAttribute )
{
this.aAnimationNode = aAnimationNode;     // the node, the timing attribute belongs to
this.sTimingDescription = removeWhiteSpaces( sTimingAttribute );
this.eTimingType = UNKNOWN_TIMING;
this.nOffset = 0.0;                       // in seconds
this.sEventBaseElementId = '';            // the element id for event based timing
this.eEventType = EVENT_TRIGGER_UNKNOWN;  // the event type
}

Timing.prototype.getAnimationNode = function()
{
return this.aAnimationNode;
};

Timing.prototype.getType = function()
{
return this.eTimingType;
};

Timing.prototype.getOffset = function()
{
return this.nOffset;
};

Timing.prototype.getEventBaseElementId = function()
{
return this.sEventBaseElementId;
};

Timing.prototype.getEventType = function()
{
return this.eEventType;
};

Timing.prototype.parse = function()
{
if( !this.sTimingDescription )
{
this.eTimingType = OFFSET_TIMING;
return;
}

if( this.sTimingDescription == 'indefinite' )
this.eTimingType = INDEFINITE_TIMING;
else
{
var nFirstCharCode = this.sTimingDescription.charCodeAt(0);
var bPositiveOffset = !( nFirstCharCode == CHARCODE_MINUS );
if ( ( nFirstCharCode == CHARCODE_PLUS ) ||
( nFirstCharCode == CHARCODE_MINUS ) ||
( ( nFirstCharCode >= CHARCODE_0 ) && ( nFirstCharCode <= CHARCODE_9 ) ) )
{
var sClockValue
= ( ( nFirstCharCode == CHARCODE_PLUS ) || ( nFirstCharCode == CHARCODE_MINUS ) )
? this.sTimingDescription.substr( 1 )
: this.sTimingDescription;

var TimeInSec = Timing.parseClockValue( sClockValue );
if( TimeInSec != undefined )
{
this.eTimingType = OFFSET_TIMING;
this.nOffset = bPositiveOffset ? TimeInSec : -TimeInSec;
}
}
else
{
var aTimingSplit = [];
bPositiveOffset = true;
if( this.sTimingDescription.indexOf( '+' ) != -1 )
{
aTimingSplit = this.sTimingDescription.split( '+' );
}
else if( this.sTimingDescription.indexOf( '-' ) != -1 )
{
aTimingSplit = this.sTimingDescription.split( '-' );
bPositiveOffset = false;
}
else
{
aTimingSplit[0] = this.sTimingDescription;
aTimingSplit[1] = '';
}

if( aTimingSplit[0].indexOf( '.' ) != -1 )
{
var aEventSplit = aTimingSplit[0].split( '.' );
this.sEventBaseElementId = aEventSplit[0];
this.eEventType = getEventTriggerType( aEventSplit[1] );
}
else
{
this.eEventType = getEventTriggerType( aTimingSplit[0] );
}

if( this.eEventType == EVENT_TRIGGER_UNKNOWN )
return;

if( ( this.eEventType == EVENT_TRIGGER_BEGIN_EVENT ) ||
( this.eEventType == EVENT_TRIGGER_END_EVENT ) )
{
this.eTimingType = SYNCBASE_TIMING;
}
else
{
this.eTimingType = EVENT_TIMING;
}

if( aTimingSplit[1] )
{
sClockValue = aTimingSplit[1];
TimeInSec = Timing.parseClockValue( sClockValue );
if( TimeInSec != undefined )
{
this.nOffset = ( bPositiveOffset ) ? TimeInSec : -TimeInSec;
}
else
{
this.eTimingType = UNKNOWN_TIMING;
}

}
}
}

};

Timing.parseClockValue = function( sClockValue )
{
if( !sClockValue )
return 0.0;

var nTimeInSec = undefined;

var reFullClockValue = /^([0-9]+):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?$/;
var rePartialClockValue = /^([0-5][0-9]):([0-5][0-9])(.[0-9]+)?$/;
var reTimeCountValue = /^([0-9]+)(.[0-9]+)?(h|min|s|ms)?$/;

if( reFullClockValue.test( sClockValue ) )
{
var aClockTimeParts = reFullClockValue.exec( sClockValue );

var nHours = parseInt( aClockTimeParts[1] );
var nMinutes = parseInt( aClockTimeParts[2] );
var nSeconds = parseInt( aClockTimeParts[3] );
if( aClockTimeParts[4] )
nSeconds += parseFloat( aClockTimeParts[4] );

nTimeInSec = ( ( nHours * 60 ) +  nMinutes ) * 60 + nSeconds;

}
else if( rePartialClockValue.test( sClockValue ) )
{
aClockTimeParts = rePartialClockValue.exec( sClockValue );

nMinutes = parseInt( aClockTimeParts[1] );
nSeconds = parseInt( aClockTimeParts[2] );
if( aClockTimeParts[3] )
nSeconds += parseFloat( aClockTimeParts[3] );

nTimeInSec = nMinutes * 60 + nSeconds;
}
else if( reTimeCountValue.test( sClockValue ) )
{
aClockTimeParts = reTimeCountValue.exec( sClockValue );

var nTimeCount = parseInt( aClockTimeParts[1] );
if( aClockTimeParts[2] )
nTimeCount += parseFloat( aClockTimeParts[2] );

if( aClockTimeParts[3] )
{
if( aClockTimeParts[3] == 'h' )
{
nTimeInSec = nTimeCount * 3600;
}
else if( aClockTimeParts[3] == 'min' )
{
nTimeInSec = nTimeCount * 60;
}
else if( aClockTimeParts[3] == 's' )
{
nTimeInSec = nTimeCount;
}
else if( aClockTimeParts[3] == 'ms' )
{
nTimeInSec = nTimeCount / 1000;
}
}
else
{
nTimeInSec = nTimeCount;
}

}

if( nTimeInSec )
nTimeInSec = parseFloat( nTimeInSec.toFixed( 3 ) );
return nTimeInSec;
};

Timing.prototype.info = function( bVerbose )
{

var sInfo = '';

if( bVerbose )
{
sInfo = 'description: ' + this.sTimingDescription + ', ';

sInfo += ', type: ' +  aTimingTypeOutMap[ this.getType() ];
sInfo += ', offset: ' + this.getOffset();
sInfo += ', event base element id: ' + this.getEventBaseElementId();
sInfo += ', timing event type: ' + aEventTriggerOutMap[ this.getEventType() ];
}
else
{
switch( this.getType() )
{
case INDEFINITE_TIMING:
sInfo += 'indefinite';
break;
case OFFSET_TIMING:
sInfo += this.getOffset();
break;
case EVENT_TIMING:
case SYNCBASE_TIMING:
if( this.getEventBaseElementId() )
sInfo += this.getEventBaseElementId() + '.';
sInfo += aEventTriggerOutMap[ this.getEventType() ];
if( this.getOffset() )
{
if( this.getOffset() > 0 )
sInfo += '+';
sInfo += this.getOffset();
}
}
}

return sInfo;
};


function Duration( sDurationAttribute )
{
this.bIndefinite = false;
this.bMedia = false;
this.nValue = undefined;
this.bDefined = false;

if( !sDurationAttribute )
return;

if( sDurationAttribute == 'indefinite' )
this.bIndefinite = true;
else if( sDurationAttribute == 'media' )
this.bMedia = true;
else
{
this.nValue = Timing.parseClockValue( sDurationAttribute );
if( this.nValue <= 0.0 )
this.nValue = 0.001;  // duration must be always greater than 0
}
this.bDefined = true;
}


Duration.prototype.isSet = function()
{
return this.bDefined;
};

Duration.prototype.isIndefinite = function()
{
return this.bIndefinite;
};

Duration.prototype.isMedia = function()
{
return this.bMedia;
};

Duration.prototype.isValue = function()
{
return this.nValue != undefined;
};

Duration.prototype.getValue= function()
{
return this.nValue;
};

Duration.prototype.info= function()
{
var sInfo;

if( this.isIndefinite() )
sInfo = 'indefinite';
else if( this.isMedia() )
sInfo = 'media';
else if( this.getValue() )
sInfo = this.getValue();

return sInfo;
};


function AnimationNode()
{
}

AnimationNode.prototype.init = function() {};
AnimationNode.prototype.resolve = function() {};
AnimationNode.prototype.activate = function() {};
AnimationNode.prototype.deactivate = function() {};
AnimationNode.prototype.end = function() {};
AnimationNode.prototype.getState = function() {};
AnimationNode.prototype.registerDeactivatingListener = function() {};
AnimationNode.prototype.notifyDeactivating = function() {};


function NodeContext( aSlideShowContext )
{
this.aContext = aSlideShowContext;
this.aAnimationNodeMap = null;
this.aAnimatedElementMap = null;
this.aSourceEventElementMap = null;
this.nStartDelay = 0.0;
this.bFirstRun = undefined;
this.aSlideHeight = HEIGHT;
this.aSlideWidth = WIDTH;
}


NodeContext.prototype.makeSourceEventElement = function( sId, aEventBaseElem )
{
if( !aEventBaseElem )
{
log( 'NodeContext.makeSourceEventElement: event base element is not valid' );
return null;
}

if( !this.aContext.aEventMultiplexer )
{
log( 'NodeContext.makeSourceEventElement: event multiplexer not initialized' );
return null;
}

if( !this.aSourceEventElementMap[ sId ] )
{
this.aSourceEventElementMap[ sId ] = new SourceEventElement( sId, aEventBaseElem, this.aContext.aEventMultiplexer );
}
return this.aSourceEventElementMap[ sId ];
};


function StateTransition( aBaseNode )
{
this.aNode = aBaseNode;
this.eToState = INVALID_NODE;
}

StateTransition.prototype.enter = function( eNodeState, bForce )
{
if( !bForce ) bForce = false;

if( this.eToState != INVALID_NODE )
{
log( 'StateTransition.enter: commit() before enter()ing again!' );
return false;
}
if( !bForce && !this.aNode.isTransition( this.aNode.getState(), eNodeState  ) )
return false;

if( ( this.aNode.nCurrentStateTransition & eNodeState ) != 0 )
return false; // already in wanted transition

this.aNode.nCurrentStateTransition |= eNodeState;
this.eToState = eNodeState;
return true;
};

StateTransition.prototype.commit = function()
{
if( this.eToState != INVALID_NODE )
{
this.aNode.eCurrentState = this.eToState;
this.clear();
}
};

StateTransition.prototype.clear = function()
{
if( this.eToState != INVALID_NODE )
{
this.aNode.nCurrentStateTransition &= ~this.eToState;
this.eToState = INVALID_NODE;
}
};


function BaseNode( aAnimElem, aParentNode, aNodeContext )
{
this.nId = getUniqueId();
this.sClassName = 'BaseNode';

if( !aAnimElem )
log( 'BaseNode(id:' + this.nId + ') constructor: aAnimElem is not valid' );

if( !aNodeContext )
log( 'BaseNode(id:' + this.nId + ') constructor: aNodeContext is not valid' );

if( !aNodeContext.aContext )
log( 'BaseNode(id:' + this.nId + ') constructor: aNodeContext.aContext is not valid' );


this.bIsContainer = false;
this.aElement = aAnimElem;
this.aParentNode = aParentNode;
this.aNodeContext = aNodeContext;
this.aContext = aNodeContext.aContext;
this.nStartDelay = aNodeContext.nStartDelay;
this.eCurrentState = UNRESOLVED_NODE;
this.nCurrentStateTransition = 0;
this.aDeactivatingListenerArray = [];
this.aActivationEvent = null;
this.aDeactivationEvent = null;

this.aBegin = null;
this.aDuration = null;
this.aEnd = null;
this.bMainSequenceRootNode = false;
this.bInteractiveSequenceRootNode = false;
this.eFillMode = FILL_MODE_FREEZE;
this.eRestartMode = RESTART_MODE_NEVER;
this.nReapeatCount = undefined;
this.nAccelerate = 0.0;
this.nDecelerate = 0.0;
this.bAutoReverse = false;

}
extend( BaseNode, AnimationNode );


BaseNode.prototype.getId = function()
{
return this.nId;
};

BaseNode.prototype.parseElement = function()
{
var aAnimElem = this.aElement;

var sIdAttr = aAnimElem.getAttributeNS( NSS['xml'], 'id' );
if( sIdAttr )
this.aNodeContext.aAnimationNodeMap[ sIdAttr ] = this;

this.aBegin = null;
var sBeginAttr = aAnimElem.getAttributeNS( NSS['smil'], 'begin' );
this.aBegin = new Timing( this, sBeginAttr );
this.aBegin.parse();

this.aEnd = null;
var sEndAttr = aAnimElem.getAttributeNS( NSS['smil'], 'end' );
if( sEndAttr )
{
this.aEnd = new Timing( this, sEndAttr );
this.aEnd.parse();
}

this.aDuration = null;
var sDurAttr = aAnimElem.getAttributeNS( NSS['smil'], 'dur' );
this.aDuration = new Duration( sDurAttr );
if( !this.aDuration.isSet() )
{
if( this.isContainer() )
this.aDuration = null;
else
this.aDuration = new Duration( 'indefinite' );
}

var sFillAttr = aAnimElem.getAttributeNS( NSS['smil'], 'fill' );
if( sFillAttr && aFillModeInMap[ sFillAttr ])
this.eFillMode = aFillModeInMap[ sFillAttr ];
else
this.eFillMode = FILL_MODE_DEFAULT;

var sRestartAttr = aAnimElem.getAttributeNS( NSS['smil'], 'restart' );
if( sRestartAttr && aRestartModeInMap[ sRestartAttr ] )
this.eRestartMode = aRestartModeInMap[ sRestartAttr ];
else
this.eRestartMode = RESTART_MODE_DEFAULT;

var sRepeatCount = aAnimElem.getAttributeNS( NSS['smil'], 'repeatCount' );
if( !sRepeatCount )
this.nReapeatCount = 1;
else
this.nReapeatCount = parseFloat( sRepeatCount );
if( ( isNaN(this.nReapeatCount) ) && ( sRepeatCount != 'indefinite' ) )
this.nReapeatCount = 1;

this.nAccelerate = 0.0;
var sAccelerateAttr = aAnimElem.getAttributeNS( NSS['smil'], 'accelerate' );
if( sAccelerateAttr )
this.nAccelerate = parseFloat( sAccelerateAttr );
if( isNaN(this.nAccelerate) )
this.nAccelerate = 0.0;

this.nDecelerate = 0.0;
var sDecelerateAttr = aAnimElem.getAttributeNS( NSS['smil'], 'decelerate' );
if( sDecelerateAttr )
this.nDecelerate = parseFloat( sDecelerateAttr );
if( isNaN(this.nDecelerate) )
this.nDecelerate = 0.0;

this.bAutoreverse = false;
var sAutoReverseAttr = aAnimElem.getAttributeNS( NSS['smil'], 'autoReverse' );
if( sAutoReverseAttr == 'true' )
this.bAutoreverse = true;


if( this.eFillMode == FILL_MODE_DEFAULT )
if( this.getParentNode() )
this.eFillMode = this.getParentNode().getFillMode();
else
this.eFillMode = FILL_MODE_AUTO;

if( this.eFillMode ==  FILL_MODE_AUTO ) // see SMIL recommendation document
{
this.eFillMode = ( this.aEnd ||
( this.nReapeatCount != 1) ||
( this.aDuration && !this.aDuration.isIndefinite() ) )
? FILL_MODE_REMOVE
: FILL_MODE_FREEZE;
}

if( this.eRestartMode == RESTART_MODE_DEFAULT )
if( this.getParentNode() )
this.eRestartMode = this.getParentNode().getRestartMode();
else
this.eRestartMode = RESTART_MODE_ALWAYS;

if( ( this.nAccelerate + this.nDecelerate ) > 1.0 )
{
this.nAccelerate = 0.0;
this.nDecelerate = 0.0;
}

this.aStateTransTable = getTransitionTable( this.getRestartMode(), this.getFillMode() );

return true;
};

BaseNode.prototype.getParentNode = function()
{
return this.aParentNode;
};

BaseNode.prototype.init = function()
{
this.DBG( this.callInfo( 'init' ) );
if( ! this.checkValidNode() )
return false;
if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();

this.eCurrentState = UNRESOLVED_NODE;

return this.init_st();
};

BaseNode.prototype.resolve = function()
{
if( ! this.checkValidNode() )
return false;

this.DBG( this.callInfo( 'resolve' ) );

if( this.eCurrentState == RESOLVED_NODE )
log( 'BaseNode.resolve: already in RESOLVED state' );

var aStateTrans = new StateTransition( this );

if( aStateTrans.enter( RESOLVED_NODE ) &&
this.isTransition( RESOLVED_NODE, ACTIVE_NODE ) &&
this.resolve_st() )
{
aStateTrans.commit();

if( this.aActivationEvent )
{
this.aActivationEvent.charge();
}
else
{
this.aActivationEvent = makeDelay( bind( this, this.activate ), this.getBegin().getOffset() + this.nStartDelay );
}
registerEvent( this.getId(), this.getBegin(), this.aActivationEvent, this.aNodeContext );

return true;
}

return false;
};

BaseNode.prototype.activate = function()
{
if( ! this.checkValidNode() )
return false;

if( this.eCurrentState == ACTIVE_NODE )
log( 'BaseNode.activate: already in ACTIVE state' );

this.DBG( this.callInfo( 'activate' ), getCurrentSystemTime() );

var aStateTrans = new StateTransition( this );

if( aStateTrans.enter( ACTIVE_NODE ) )
{
this.activate_st();
aStateTrans.commit();
if( !this.aContext.aEventMultiplexer )
log( 'BaseNode.activate: this.aContext.aEventMultiplexer is not valid' );
this.aContext.aEventMultiplexer.notifyEvent( EVENT_TRIGGER_BEGIN_EVENT, this.getId() );
return true;
}
return false;
};

BaseNode.prototype.deactivate = function()
{
if( this.inStateOrTransition( ENDED_NODE | FROZEN_NODE ) || !this.checkValidNode() )
return;

if( this.isTransition( this.eCurrentState, FROZEN_NODE ) )
{
this.DBG( this.callInfo( 'deactivate' ), getCurrentSystemTime() );

var aStateTrans = new StateTransition( this );
if( aStateTrans.enter( FROZEN_NODE, true /* FORCE */ ) )
{
this.deactivate_st( FROZEN_NODE );
aStateTrans.commit();

this.notifyEndListeners();

if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();
}
}
else
{
this.end();
}
};

BaseNode.prototype.end = function()
{
var bIsFrozenOrInTransitionToFrozen = this.inStateOrTransition( FROZEN_NODE );
if( this.inStateOrTransition( ENDED_NODE ) || !this.checkValidNode() )
return;

if( !(this.isTransition( this.eCurrentState, ENDED_NODE ) ) )
log( 'BaseNode.end: end state not reachable in transition table' );

this.DBG( this.callInfo( 'end' ), getCurrentSystemTime() );

var aStateTrans = new StateTransition( this );
if( aStateTrans.enter( ENDED_NODE, true /* FORCE */ ) )
{
this.deactivate_st( ENDED_NODE );
aStateTrans.commit();

if( !bIsFrozenOrInTransitionToFrozen )
this.notifyEndListeners();

if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();
}
};

BaseNode.prototype.dispose = function()
{
if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();
this.aDeactivatingListenerArray = [];
};

BaseNode.prototype.getState = function()
{
return this.eCurrentState;
};

BaseNode.prototype.registerDeactivatingListener = function( aNotifiee )
{
if (! this.checkValidNode())
return false;

if( !aNotifiee )
{
log( 'BaseNode.registerDeactivatingListener(): invalid notifiee' );
return false;
}
this.aDeactivatingListenerArray.push( aNotifiee );

return true;
};

BaseNode.prototype.notifyDeactivating = function( aNotifier )
{
assert( ( aNotifier.getState() == FROZEN_NODE ) || ( aNotifier.getState() == ENDED_NODE ),
'BaseNode.notifyDeactivating: Notifier node is neither in FROZEN nor in ENDED state' );
};

BaseNode.prototype.isMainSequenceRootNode = function()
{
return this.bMainSequenceRootNode;
};

BaseNode.prototype.isInteractiveSequenceRootNode = function()
{
return this.bInteractiveSequenceRootNode;
};

BaseNode.prototype.makeDeactivationEvent = function( nDelay )
{
if( this.aDeactivationEvent )
{
this.aDeactivationEvent.charge();
}
else
{
if( typeof( nDelay ) == typeof(0) )
this.aDeactivationEvent = makeDelay( bind( this, this.deactivate ), nDelay );
else
this.aDeactivationEvent = null;
}
return this.aDeactivationEvent;
};

BaseNode.prototype.scheduleDeactivationEvent = function( aEvent )
{
this.DBG( this.callInfo( 'scheduleDeactivationEvent' ) );

if( !aEvent )
{
if( this.getDuration() && this.getDuration().isValue() )
aEvent = this.makeDeactivationEvent( this.getDuration().getValue() );
}
if( aEvent )
{
this.aContext.aTimerEventQueue.addEvent( aEvent );
}
};

BaseNode.prototype.checkValidNode = function()
{
return ( this.eCurrentState != INVALID_NODE );
};

BaseNode.prototype.init_st = function()
{
return true;
};

BaseNode.prototype.resolve_st = function()
{
return true;
};

BaseNode.prototype.activate_st = function()
{
this.scheduleDeactivationEvent();
};

BaseNode.prototype.deactivate_st = function( /*aNodeState*/ )
{
};

BaseNode.prototype.notifyEndListeners = function()
{
var nDeactivatingListenerCount = this.aDeactivatingListenerArray.length;

for( var i = 0; i < nDeactivatingListenerCount; ++i )
{
this.aDeactivatingListenerArray[i].notifyDeactivating( this );
}

this.aContext.aEventMultiplexer.notifyEvent( EVENT_TRIGGER_END_EVENT, this.getId() );
if( this.getParentNode() && this.getParentNode().isMainSequenceRootNode() )
this.aContext.aEventMultiplexer.notifyNextEffectEndEvent();

if( this.isMainSequenceRootNode() )
this.aContext.aEventMultiplexer.notifyAnimationsEndEvent();
};

BaseNode.prototype.getContext = function()
{
return this.aContext;
};

BaseNode.prototype.isTransition = function( eFromState, eToState )
{
return ( ( this.aStateTransTable[ eFromState ] & eToState ) != 0 );
};

BaseNode.prototype.inStateOrTransition = function( nMask )
{
return ( ( ( this.eCurrentState & nMask ) != 0 ) || ( ( this.nCurrentStateTransition & nMask ) != 0 ) );
};

BaseNode.prototype.isContainer = function()
{
return this.bIsContainer;
};

BaseNode.prototype.getBegin = function()
{
return this.aBegin;
};

BaseNode.prototype.getDuration = function()
{
return this.aDuration;
};

BaseNode.prototype.getEnd = function()
{
return this.aEnd;
};

BaseNode.prototype.getFillMode = function()
{
return this.eFillMode;
};

BaseNode.prototype.getRestartMode = function()
{
return this.eRestartMode;
};

BaseNode.prototype.getRepeatCount = function()
{
return this.nReapeatCount;
};

BaseNode.prototype.getAccelerateValue = function()
{
return this.nAccelerate;
};

BaseNode.prototype.getDecelerateValue = function()
{
return this.nDecelerate;
};

BaseNode.prototype.isAutoReverseEnabled = function()
{
return this.bAutoreverse;
};

BaseNode.prototype.info = function( bVerbose )
{
var sInfo = 'class name: ' + this.sClassName;
sInfo += ';  element name: ' + this.aElement.localName;
sInfo += ';  id: ' + this.getId();
sInfo += ';  state: ' + getNodeStateName( this.getState() );

if( bVerbose )
{
sInfo += ';  is container: ' + this.isContainer();

if( this.getBegin() )
sInfo += ';  begin: ' + this.getBegin().info();

if( this.getDuration() )
sInfo += ';  dur: ' + this.getDuration().info();

if( this.getEnd() )
sInfo += ';  end: ' + this.getEnd().info();

if( this.getFillMode() )
sInfo += ';  fill: ' + aFillModeOutMap[ this.getFillMode() ];

if( this.getRestartMode() )
sInfo += ';  restart: ' + aRestartModeOutMap[ this.getRestartMode() ];

if( this.getRepeatCount() && ( this.getRepeatCount() != 1.0 ) )
sInfo += ';  repeatCount: ' + this.getRepeatCount();

if( this.getAccelerateValue() )
sInfo += ';  accelerate: ' + this.getAccelerateValue();

if( this.getDecelerateValue() )
sInfo += ';  decelerate: ' + this.getDecelerateValue();

if( this.isAutoReverseEnabled() )
sInfo += ';  autoReverse: true';

}

return sInfo;
};

BaseNode.prototype.callInfo = function( sMethodName )
{
var sInfo = this.sClassName +
'( ' + this.getId() +
', ' + getNodeStateName( this.getState() ) +
' ).' + sMethodName;
return sInfo;
};

BaseNode.prototype.DBG = function( sMessage, nTime )
{
ANIMDBG.print( sMessage, nTime );
};


function AnimationBaseNode( aAnimElem, aParentNode, aNodeContext )
{
AnimationBaseNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationBaseNode';
this.bIsContainer = false;
this.aTargetElement = null;
this.bIsTargetTextElement = false;
this.aAnimatedElement = null;
this.aActivity = null;

this.nMinFrameCount = undefined;
this.eAdditiveMode = undefined;

}
extend( AnimationBaseNode, BaseNode );


AnimationBaseNode.prototype.parseElement = function()
{
var bRet = AnimationBaseNode.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.aTargetElement = null;
var sTargetElementAttr = aAnimElem.getAttributeNS( NSS['smil'], 'targetElement' );
if( sTargetElementAttr )
this.aTargetElement = document.getElementById( sTargetElementAttr );

if( !this.aTargetElement )
{
this.eCurrentState = INVALID_NODE;
log( 'AnimationBaseNode.parseElement: target element not found: ' + sTargetElementAttr );
}

var sSubItemAttr = aAnimElem.getAttributeNS( NSS['anim'], 'sub-item' );
this.bIsTargetTextElement = ( sSubItemAttr && ( sSubItemAttr === 'text' ) );

var sAdditiveAttr = aAnimElem.getAttributeNS( NSS['smil'], 'additive' );
if( sAdditiveAttr && aAddittiveModeInMap[sAdditiveAttr] )
this.eAdditiveMode = aAddittiveModeInMap[sAdditiveAttr];
else
this.eAdditiveMode = ADDITIVE_MODE_REPLACE;

this.nMinFrameCount = ( this.getDuration().isValue() )
? ( this.getDuration().getValue() * MINIMUM_FRAMES_PER_SECONDS )
: MINIMUM_FRAMES_PER_SECONDS;
if( this.nMinFrameCount < 1.0 )
this.nMinFrameCount = 1;
else if( this.nMinFrameCount > MINIMUM_FRAMES_PER_SECONDS )
this.nMinFrameCount = MINIMUM_FRAMES_PER_SECONDS;


if( this.aTargetElement )
{
if( aAnimElem.getAttributeNS( NSS['smil'], 'attributeName' ) === 'visibility' )
{
if( aAnimElem.getAttributeNS( NSS['smil'], 'to' ) === 'visible' )
this.aTargetElement.setAttribute( 'visibility', 'hidden' );
}

if( !this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ] )
{
if( this.bIsTargetTextElement )
{
this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ]
= new AnimatedTextElement( this.aTargetElement );
}
else
{
this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ]
= new AnimatedElement( this.aTargetElement );
}
}
this.aAnimatedElement = this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ];

this.aAnimatedElement.setAdditiveMode( this.eAdditiveMode );
}


return bRet;
};

AnimationBaseNode.prototype.init_st = function()
{
if( this.aActivity )
this.aActivity.activate( makeEvent( bind( this, this.deactivate ) ) );
else
this.aActivity = this.createActivity();
return true;
};

AnimationBaseNode.prototype.resolve_st = function()
{
return true;
};

AnimationBaseNode.prototype.activate_st = function()
{
if( this.aActivity )
{
this.saveStateOfAnimatedElement();
this.aActivity.setTargets( this.getAnimatedElement() );
if( this.getContext().bIsSkipping  )
{
this.aActivity.end();
}
else
{
this.getContext().aActivityQueue.addActivity( this.aActivity );
}
}
else
{
AnimationBaseNode.superclass.scheduleDeactivationEvent.call( this );
}
};

AnimationBaseNode.prototype.deactivate_st = function( eDestState )
{
if( eDestState == FROZEN_NODE )
{
if( this.aActivity )
this.aActivity.end();
}
if( eDestState == ENDED_NODE )
{
if( this.aActivity )
this.aActivity.dispose();
if( ( this.getFillMode() == FILL_MODE_REMOVE ) && this.getAnimatedElement()  )
this.removeEffect();
}
};

AnimationBaseNode.prototype.createActivity = function()
{
log( 'AnimationBaseNode.createActivity: abstract method called' );
};

AnimationBaseNode.prototype.fillActivityParams = function()
{

var nDuration = 0.001;
if( this.getDuration().isValue() )
{
nDuration = this.getDuration().getValue();
}
else
{
log( 'AnimationBaseNode.fillActivityParams: duration is not a number' );
}

var aActivityParamSet = new ActivityParamSet();

aActivityParamSet.aEndEvent             = makeEvent( bind( this, this.deactivate ) );
aActivityParamSet.aTimerEventQueue      = this.aContext.aTimerEventQueue;
aActivityParamSet.aActivityQueue        = this.aContext.aActivityQueue;
aActivityParamSet.nMinDuration          = nDuration;
aActivityParamSet.nMinNumberOfFrames    = this.getMinFrameCount();
aActivityParamSet.bAutoReverse          = this.isAutoReverseEnabled();
aActivityParamSet.nRepeatCount          = this.getRepeatCount();
aActivityParamSet.nAccelerationFraction = this.getAccelerateValue();
aActivityParamSet.nDecelerationFraction = this.getDecelerateValue();
aActivityParamSet.nSlideWidth           = this.aNodeContext.aSlideWidth;
aActivityParamSet.nSlideHeight          = this.aNodeContext.aSlideHeight;

return aActivityParamSet;
};

AnimationBaseNode.prototype.hasPendingAnimation = function()
{
return true;
};

AnimationBaseNode.prototype.saveStateOfAnimatedElement = function()
{
this.getAnimatedElement().saveState( this.getId() );
};

AnimationBaseNode.prototype.removeEffect = function()
{
this.getAnimatedElement().restoreState( this.getId() );
};

AnimationBaseNode.prototype.getTargetElement = function()
{
return this.aTargetElement;
};

AnimationBaseNode.prototype.getAnimatedElement = function()
{
return this.aAnimatedElement;
};

AnimationBaseNode.prototype.dispose= function()
{
if( this.aActivity )
this.aActivity.dispose();

AnimationBaseNode.superclass.dispose.call( this );
};

AnimationBaseNode.prototype.getMinFrameCount = function()
{
return this.nMinFrameCount;
};

AnimationBaseNode.prototype.getAdditiveMode = function()
{
return this.eAdditiveMode;
};

AnimationBaseNode.prototype.info = function( bVerbose )
{
var sInfo = AnimationBaseNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getMinFrameCount() )
sInfo += ';  min frame count: ' + this.getMinFrameCount();

sInfo += ';  additive: ' + aAddittiveModeOutMap[ this.getAdditiveMode() ];

if( this.getTargetElement() )
{
var sElemId = this.getTargetElement().getAttribute( 'id' );
sInfo += ';  targetElement: ' +  sElemId;
}
}

return sInfo;
};


function AnimationBaseNode2( aAnimElem, aParentNode, aNodeContext )
{
AnimationBaseNode2.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sAttributeName = '';
this.aToValue = null;

}
extend( AnimationBaseNode2, AnimationBaseNode );


AnimationBaseNode2.prototype.parseElement = function()
{
var bRet = AnimationBaseNode2.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.sAttributeName = aAnimElem.getAttributeNS( NSS['smil'], 'attributeName' );
if( !this.sAttributeName )
{
this.eCurrentState = INVALID_NODE;
log( 'AnimationBaseNode2.parseElement: target attribute name not found: ' + this.sAttributeName );
}

this.aToValue = aAnimElem.getAttributeNS( NSS['smil'], 'to' );

return bRet;
};

AnimationBaseNode2.prototype.getAttributeName = function()
{
return this.sAttributeName;
};

AnimationBaseNode2.prototype.getToValue = function()
{
return this.aToValue;
};

AnimationBaseNode2.prototype.info = function( bVerbose )
{
var sInfo = AnimationBaseNode2.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getAttributeName() )
sInfo += ';  attributeName: ' + this.getAttributeName();

if( this.getToValue() )
sInfo += ';  to: ' + this.getToValue();
}

return sInfo;
};


function AnimationBaseNode3( aAnimElem, aParentNode, aNodeContext )
{
AnimationBaseNode3.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.eAccumulate = undefined;
this.eCalcMode = undefined;
this.aFromValue = null;
this.aByValue = null;
this.aKeyTimes = null;
this.aValues = null;
this.aFormula= null;
}
extend( AnimationBaseNode3, AnimationBaseNode2 );


AnimationBaseNode3.prototype.parseElement = function()
{
var bRet = AnimationBaseNode3.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.eAccumulate = ACCUMULATE_MODE_NONE;
var sAccumulateAttr = aAnimElem.getAttributeNS( NSS['smil'], 'accumulate' );
if( sAccumulateAttr == 'sum' )
this.eAccumulate = ACCUMULATE_MODE_SUM;

this.eCalcMode = CALC_MODE_LINEAR;
var sCalcModeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'calcMode' );
if( sCalcModeAttr && aCalcModeInMap[ sCalcModeAttr ] )
this.eCalcMode = aCalcModeInMap[ sCalcModeAttr ];

this.aFromValue = aAnimElem.getAttributeNS( NSS['smil'], 'from' );

this.aByValue = aAnimElem.getAttributeNS( NSS['smil'], 'by' );

this.aKeyTimes = [];
var sKeyTimesAttr = aAnimElem.getAttributeNS( NSS['smil'], 'keyTimes' );
sKeyTimesAttr = removeWhiteSpaces( sKeyTimesAttr );
if( sKeyTimesAttr )
{
var aKeyTimes = sKeyTimesAttr.split( ';' );
for( var i = 0; i < aKeyTimes.length; ++i )
this.aKeyTimes.push( parseFloat( aKeyTimes[i] ) );
}

var sValuesAttr = aAnimElem.getAttributeNS( NSS['smil'], 'values' );
if( sValuesAttr )
{
this.aValues = sValuesAttr.split( ';' );
}
else
{
this.aValues = [];
}

this.aFormula = aAnimElem.getAttributeNS( NSS['anim'], 'formula' );

return bRet;
};

AnimationBaseNode3.prototype.getAccumulate = function()
{
return this.eAccumulate;
};

AnimationBaseNode3.prototype.getCalcMode = function()
{
return this.eCalcMode;
};

AnimationBaseNode3.prototype.getFromValue = function()
{
return this.aFromValue;
};

AnimationBaseNode3.prototype.getByValue = function()
{
return this.aByValue;
};

AnimationBaseNode3.prototype.getKeyTimes = function()
{
return this.aKeyTimes;
};

AnimationBaseNode3.prototype.getValues = function()
{
return this.aValues;
};

AnimationBaseNode3.prototype.getFormula = function()
{
return this.aFormula;
};

AnimationBaseNode3.prototype.info = function( bVerbose )
{
var sInfo = AnimationBaseNode3.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getAccumulate() )
sInfo += ';  accumulate: ' + aAccumulateModeOutMap[ this.getAccumulate() ];

sInfo += ';  calcMode: ' + aCalcModeOutMap[ this.getCalcMode() ];

if( this.getFromValue() )
sInfo += ';  from: ' + this.getFromValue();

if( this.getByValue() )
sInfo += ';  by: ' + this.getByValue();

if( this.getKeyTimes().length )
sInfo += ';  keyTimes: ' + this.getKeyTimes().join( ',' );

if( this.getValues().length )
sInfo += ';  values: ' + this.getValues().join( ',' );

if( this.getFormula() )
sInfo += ';  formula: ' + this.getFormula();
}

return sInfo;
};


function BaseContainerNode( aAnimElem, aParentNode, aNodeContext )
{
BaseContainerNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'BaseContainerNode';
this.bIsContainer = true;
this.aChildrenArray = [];
this.nFinishedChildren = 0;
this.bDurationIndefinite = false;
this.nLeftIterations = 1;

this.eImpressNodeType = undefined;
this.ePresetClass =  undefined;
this.ePresetId =  undefined;
}
extend( BaseContainerNode, BaseNode );


BaseContainerNode.prototype.parseElement= function()
{
var bRet = BaseContainerNode.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.eImpressNodeType = IMPRESS_DEFAULT_NODE;
var sNodeTypeAttr = aAnimElem.getAttributeNS( NSS['presentation'], 'node-type' );
if( sNodeTypeAttr && aImpressNodeTypeInMap[ sNodeTypeAttr ] )
this.eImpressNodeType = aImpressNodeTypeInMap[ sNodeTypeAttr ];
this.bMainSequenceRootNode = ( this.eImpressNodeType == IMPRESS_MAIN_SEQUENCE_NODE );
this.bInteractiveSequenceRootNode = ( this.eImpressNodeType == IMPRESS_INTERACTIVE_SEQUENCE_NODE );

this.ePresetClass =  undefined;
var sPresetClassAttr = aAnimElem.getAttributeNS( NSS['presentation'], 'preset-class' );
if( sPresetClassAttr && aPresetClassInMap[ sPresetClassAttr ] )
this.ePresetClass = aPresetClassInMap[ sPresetClassAttr ];

this.ePresetId =  undefined;
var sPresetIdAttr = aAnimElem.getAttributeNS( NSS['presentation'], 'preset-id' );
if( sPresetIdAttr && aPresetIdInMap[ sPresetIdAttr ] )
this.ePresetId = aPresetIdInMap[ sPresetIdAttr ];


var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
this.aChildrenArray[i].parseElement();
}


this.bDurationIndefinite
= ( !this.getDuration() || this.getDuration().isIndefinite()  ) &&
( !this.getEnd() || ( this.getEnd().getType() != OFFSET_TIMING ) );

return bRet;
};

BaseContainerNode.prototype.appendChildNode = function( aAnimationNode )
{
if( ! this.checkValidNode() )
return ;

if( aAnimationNode.registerDeactivatingListener( this ) )
this.aChildrenArray.push( aAnimationNode );
};

BaseContainerNode.prototype.removeAllChildrenNodes = function()
{
this.aChildrenArray = [];
};

BaseContainerNode.prototype.init_st = function()
{
this.nLeftIterations = this.getRepeatCount();

return this.init_children();
};

BaseContainerNode.prototype.init_children = function()
{
this.nFinishedChildren = 0;
var nChildrenCount = this.aChildrenArray.length;
var nInitChildren = 0;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].init() )
{
++nInitChildren;
}
}
return ( nChildrenCount == nInitChildren );
};


BaseContainerNode.prototype.deactivate_st = function( eDestState )
{
this.nLeftIterations = 0;
if( eDestState == FROZEN_NODE )
{
this.forEachChildNode( mem_fn( 'deactivate' ), ~( FROZEN_NODE | ENDED_NODE ) );
}
else
{
this.forEachChildNode( mem_fn( 'end' ), ~ENDED_NODE );
if( this.getFillMode() == FILL_MODE_REMOVE )
this.removeEffect();
}
};

BaseContainerNode.prototype.hasPendingAnimation = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].hasPendingAnimation() )
return true;
}
return false;
};

BaseContainerNode.prototype.activate_st = function()
{
log( 'BaseContainerNode.activate_st: abstract method called' );
};

BaseContainerNode.prototype.notifyDeactivating = function( /*aAnimationNode*/ )
{
log( 'BaseContainerNode.notifyDeactivating: abstract method called' );
};

BaseContainerNode.prototype.isDurationIndefinite = function()
{
return this.bDurationIndefinite;
};

BaseContainerNode.prototype.isChildNode = function( aAnimationNode )
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].getId() == aAnimationNode.getId() )
return true;
}
return false;
};

BaseContainerNode.prototype.notifyDeactivatedChild = function( aChildNode )
{
assert( ( aChildNode.getState() == FROZEN_NODE ) || ( aChildNode.getState() == ENDED_NODE ),
'BaseContainerNode.notifyDeactivatedChild: passed child node is neither in FROZEN nor in ENDED state' );

assert( this.getState() != INVALID_NODE,
'BaseContainerNode.notifyDeactivatedChild: this node is invalid' );

if( !this.isChildNode( aChildNode ) )
{
log( 'BaseContainerNode.notifyDeactivatedChild: unknown child notifier!' );
return false;
}

var nChildrenCount = this.aChildrenArray.length;

assert( ( this.nFinishedChildren < nChildrenCount ),
'BaseContainerNode.notifyDeactivatedChild: assert(this.nFinishedChildren < nChildrenCount) failed' );

++this.nFinishedChildren;
var bFinished = ( this.nFinishedChildren >= nChildrenCount );

if( bFinished && this.isDurationIndefinite() )
{
if( this.nLeftIterations >= 1.0 )
{
this.nLeftIterations -= 1.0;
}
if( this.nLeftIterations >= 1.0 )
{
bFinished = false;
var aRepetitionEvent = makeDelay( bind( this, this.repeat ), 0.0 );
this.aContext.aTimerEventQueue.addEvent( aRepetitionEvent );
}
else
{
this.deactivate();
}
}

return bFinished;
};

BaseContainerNode.prototype.repeat = function()
{
this.forEachChildNode( mem_fn( 'end' ), ~ENDED_NODE );
this.removeEffect();
var bInitialized = this.init_children();
if( bInitialized )
this.activate_st();
return bInitialized;
};

BaseContainerNode.prototype.removeEffect = function()
{
var nChildrenCount = this.aChildrenArray.length;
if( nChildrenCount == 0 )
return;
for( var i = nChildrenCount - 1; i >= 0; --i )
{
if( ( this.aChildrenArray[i].getState() & ( FROZEN_NODE | ENDED_NODE ) ) == 0 )
{
log( 'BaseContainerNode.removeEffect: child(id:'
+ this.aChildrenArray[i].getId() + ') is neither frozen nor ended;'
+ ' state: '
+ aTransitionModeOutMap[ this.aChildrenArray[i].getState() ] );
continue;
}
this.aChildrenArray[i].removeEffect();
}
};

BaseContainerNode.prototype.saveStateOfAnimatedElement = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
this.aChildrenArray[i].saveStateOfAnimatedElement();
}
};

BaseContainerNode.prototype.forEachChildNode = function( aFunction, eNodeStateMask )
{
if( !eNodeStateMask )
eNodeStateMask = -1;

var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
if( ( eNodeStateMask != -1 ) && ( ( this.aChildrenArray[i].getState() & eNodeStateMask ) == 0 ) )
continue;
aFunction( this.aChildrenArray[i] );
}
};

BaseContainerNode.prototype.dispose = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
this.aChildrenArray[i].dispose();
}

BaseContainerNode.superclass.dispose.call( this );
};

BaseContainerNode.prototype.getImpressNodeType = function()
{
return this.eImpressNodeType;
};

BaseContainerNode.prototype.info = function( bVerbose )
{
var sInfo = BaseContainerNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getImpressNodeType() )
sInfo += ';  node-type: ' + aImpressNodeTypeOutMap[ this.getImpressNodeType() ];
}

var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
sInfo += '\n';
sInfo += this.aChildrenArray[i].info( bVerbose );
}

return sInfo;
};


function ParallelTimeContainer( aAnimElem, aParentNode, aNodeContext )
{
ParallelTimeContainer.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'ParallelTimeContainer';
}
extend( ParallelTimeContainer, BaseContainerNode );


ParallelTimeContainer.prototype.activate_st = function()
{
var nChildrenCount = this.aChildrenArray.length;
var nResolvedChildren = 0;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].resolve() )
{
++nResolvedChildren;
}
}

if( nChildrenCount != nResolvedChildren )
{
log( 'ParallelTimeContainer.activate_st: resolving all children failed' );
return;
}


if( this.isDurationIndefinite() && ( nChildrenCount == 0  ) )
{
this.scheduleDeactivationEvent( this.makeDeactivationEvent( 0.0 ) );
}
else
{
this.scheduleDeactivationEvent();
}
};

ParallelTimeContainer.prototype.notifyDeactivating = function( aAnimationNode )
{
this.notifyDeactivatedChild( aAnimationNode );
};


function SequentialTimeContainer( aAnimElem, aParentNode, aNodeContext )
{
SequentialTimeContainer.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'SequentialTimeContainer';
this.bIsRewinding = false;
this.aCurrentSkipEvent = null;
this.aRewindCurrentEffectEvent = null;
this.aRewindLastEffectEvent = null;
}
extend( SequentialTimeContainer, BaseContainerNode );


SequentialTimeContainer.prototype.activate_st = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( ; this.nFinishedChildren < nChildrenCount; ++this.nFinishedChildren )
{
if( this.resolveChild( this.aChildrenArray[ this.nFinishedChildren ] ) )
break;
else
log( 'SequentialTimeContainer.activate_st: resolving child failed!' );
}

if( this.isDurationIndefinite() && ( ( nChildrenCount == 0 ) || ( this.nFinishedChildren >= nChildrenCount ) ) )
{
this.scheduleDeactivationEvent( this.makeDeactivationEvent( 0.0 ) );
}
else
{
this.scheduleDeactivationEvent();
}
};

SequentialTimeContainer.prototype.notifyDeactivating = function( aNotifier )
{
if( this.bIsRewinding )
return;

if( this.notifyDeactivatedChild( aNotifier ) )
return;

assert( this.nFinishedChildren < this.aChildrenArray.length,
'SequentialTimeContainer.notifyDeactivating: assertion (this.nFinishedChildren < this.aChildrenArray.length) failed' );

var aNextChild = this.aChildrenArray[ this.nFinishedChildren ];

assert( aNextChild.getState() == UNRESOLVED_NODE,
'SequentialTimeContainer.notifyDeactivating: assertion (aNextChild.getState == UNRESOLVED_NODE) failed' );

if( !this.resolveChild( aNextChild ) )
{
this.deactivate();
}
};

SequentialTimeContainer.prototype.skipEffect = function( aChildNode )
{
if( this.isChildNode( aChildNode ) )
{
this.getContext().aActivityQueue.endAll();
this.getContext().bIsSkipping = true;
this.getContext().aTimerEventQueue.forceEmpty();
this.getContext().bIsSkipping = false;
var aEvent = makeEvent( bind2( aChildNode.deactivate, aChildNode ) );
this.getContext().aTimerEventQueue.addEvent( aEvent );
}
else
{
log( 'SequentialTimeContainer.skipEffect: unknown child: '
+ aChildNode.getId() );
}
};

SequentialTimeContainer.prototype.rewindCurrentEffect = function( aChildNode )
{
if( this.isChildNode( aChildNode ) )
{
assert( !this.bIsRewinding,
'SequentialTimeContainer.rewindCurrentEffect: is already rewinding.' );

this.bIsRewinding = true;
this.getContext().aActivityQueue.endAll();
this.getContext().bIsSkipping = true;
this.getContext().aTimerEventQueue.forceEmpty();
this.getContext().bIsSkipping = false;
this.getContext().aActivityQueue.endAll();

aChildNode.end();
aChildNode.removeEffect();
aChildNode.init();
this.resolveChild( aChildNode );
this.notifyRewindedEvent( aChildNode );
this.bIsRewinding = false;
}
else
{
log( 'SequentialTimeContainer.rewindCurrentEffect: unknown child: '
+ aChildNode.getId() );
}
};

SequentialTimeContainer.prototype.rewindLastEffect = function( aChildNode )
{
if( this.isChildNode( aChildNode ) )
{
assert( !this.bIsRewinding,
'SequentialTimeContainer.rewindLastEffect: is already rewinding.' );

this.bIsRewinding = true;
this.getContext().aTimerEventQueue.forceEmpty();
this.getContext().aActivityQueue.clear();
aChildNode.end();

--this.nFinishedChildren;
var aPreviousChildNode = this.aChildrenArray[ this.nFinishedChildren ];

aPreviousChildNode.removeEffect();
aPreviousChildNode.init();
aChildNode.init();
this.resolveChild( aPreviousChildNode );
this.notifyRewindedEvent( aChildNode );
this.bIsRewinding = false;
}
else
{
log( 'SequentialTimeContainer.rewindLastEffect: unknown child: '
+ aChildNode.getId() );
}
};

SequentialTimeContainer.prototype.resolveChild = function( aChildNode )
{
var bResolved = aChildNode.resolve();

if( bResolved && ( this.isMainSequenceRootNode() || this.isInteractiveSequenceRootNode() ) )
{
if( this.aCurrentSkipEvent )
this.aCurrentSkipEvent.dispose();
this.aCurrentSkipEvent = makeEvent( bind2( SequentialTimeContainer.prototype.skipEffect, this, aChildNode ) );

if( this.aRewindCurrentEffectEvent )
this.aRewindCurrentEffectEvent.dispose();
this.aRewindCurrentEffectEvent = makeEvent( bind2( SequentialTimeContainer.prototype.rewindCurrentEffect, this, aChildNode ) );

if( this.aRewindLastEffectEvent )
this.aRewindLastEffectEvent.dispose();
this.aRewindLastEffectEvent = makeEvent( bind2( SequentialTimeContainer.prototype.rewindLastEffect, this, aChildNode ) );

if( this.isMainSequenceRootNode() )
{
this.aContext.aEventMultiplexer.registerSkipEffectEvent( this.aCurrentSkipEvent );
this.aContext.aEventMultiplexer.registerRewindCurrentEffectEvent( this.aRewindCurrentEffectEvent );
this.aContext.aEventMultiplexer.registerRewindLastEffectEvent( this.aRewindLastEffectEvent );
}
else if( this.isInteractiveSequenceRootNode() )
{
this.aContext.aEventMultiplexer.registerSkipInteractiveEffectEvent( aChildNode.getId(), this.aCurrentSkipEvent );
this.aContext.aEventMultiplexer.registerRewindRunningInteractiveEffectEvent( aChildNode.getId(), this.aRewindCurrentEffectEvent );
this.aContext.aEventMultiplexer.registerRewindEndedInteractiveEffectEvent( aChildNode.getId(), this.aRewindLastEffectEvent );
}
}
return bResolved;
};

SequentialTimeContainer.prototype.notifyRewindedEvent = function( aChildNode )
{
if( this.isInteractiveSequenceRootNode() )
{
this.aContext.aEventMultiplexer.notifyRewindedEffectEvent( aChildNode.getId() );

var sId = aChildNode.getBegin().getEventBaseElementId();
if( sId )
{
this.aContext.aEventMultiplexer.notifyRewindedEffectEvent( sId );
}
}
};

SequentialTimeContainer.prototype.dispose = function()
{
if( this.aCurrentSkipEvent )
this.aCurrentSkipEvent.dispose();

SequentialTimeContainer.superclass.dispose.call( this );
};


function PropertyAnimationNode(  aAnimElem, aParentNode, aNodeContext )
{
PropertyAnimationNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'PropertyAnimationNode';
}
extend( PropertyAnimationNode, AnimationBaseNode3 );


PropertyAnimationNode.prototype.createActivity = function()
{
var aActivityParamSet = this.fillActivityParams();

var aAnimation = createPropertyAnimation( this.getAttributeName(),
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight );

var aInterpolator = null;  // createActivity will compute it;
return createActivity( aActivityParamSet, this, aAnimation, aInterpolator );
};


function AnimationSetNode(  aAnimElem, aParentNode, aNodeContext )
{
AnimationSetNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationSetNode';
}
extend( AnimationSetNode, AnimationBaseNode2 );


AnimationSetNode.prototype.createActivity = function()
{
var aAnimation = createPropertyAnimation( this.getAttributeName(),
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight );

var aActivityParamSet = this.fillActivityParams();

return new SetActivity( aActivityParamSet, aAnimation, this.getToValue() );
};


function AnimationColorNode(  aAnimElem, aParentNode, aNodeContext )
{
AnimationColorNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationColorNode';

this.eColorInterpolation = undefined;
this.eColorInterpolationDirection = undefined;
}
extend( AnimationColorNode, AnimationBaseNode3 );


AnimationColorNode.prototype.parseElement = function()
{
var bRet = AnimationColorNode.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.eColorInterpolation = COLOR_SPACE_RGB;
var sColorInterpolationAttr = aAnimElem.getAttributeNS( NSS['anim'], 'color-interpolation' );
if( sColorInterpolationAttr && aColorSpaceInMap[ sColorInterpolationAttr ] )
this.eColorInterpolation = aColorSpaceInMap[ sColorInterpolationAttr ];

this.eColorInterpolationDirection = CLOCKWISE;
var sColorInterpolationDirectionAttr = aAnimElem.getAttributeNS( NSS['anim'], 'color-interpolation-direction' );
if( sColorInterpolationDirectionAttr && aClockDirectionInMap[ sColorInterpolationDirectionAttr ] )
this.eColorInterpolationDirection = aClockDirectionInMap[ sColorInterpolationDirectionAttr ];

return bRet;
};

AnimationColorNode.prototype.createActivity = function()
{
var aActivityParamSet = this.fillActivityParams();

var aAnimation = createPropertyAnimation( this.getAttributeName(),
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight );

var aColorAnimation;
var aInterpolator;
if( this.getColorInterpolation() === COLOR_SPACE_HSL )
{
ANIMDBG.print( 'AnimationColorNode.createActivity: color space hsl'  );
aColorAnimation = new HSLAnimationWrapper( aAnimation );
var aInterpolatorMaker = aInterpolatorHandler.getInterpolator( this.getCalcMode(),
COLOR_PROPERTY,
COLOR_SPACE_HSL );
aInterpolator = aInterpolatorMaker( this.getColorInterpolationDirection() );
}
else
{
ANIMDBG.print( 'AnimationColorNode.createActivity: color space rgb'  );
aColorAnimation = aAnimation;
aInterpolator = aInterpolatorHandler.getInterpolator( this.getCalcMode(),
COLOR_PROPERTY,
COLOR_SPACE_RGB );
}

return createActivity( aActivityParamSet, this, aColorAnimation, aInterpolator );
};

AnimationColorNode.prototype.getColorInterpolation = function()
{
return this.eColorInterpolation;
};

AnimationColorNode.prototype.getColorInterpolationDirection = function()
{
return this.eColorInterpolationDirection;
};

AnimationColorNode.prototype.info = function( bVerbose )
{
var sInfo = AnimationColorNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
sInfo += ';  color-interpolation: ' + aColorSpaceOutMap[ this.getColorInterpolation() ];

sInfo += ';  color-interpolation-direction: ' + aClockDirectionOutMap[ this.getColorInterpolationDirection() ];
}
return sInfo;
};


function AnimationTransitionFilterNode(  aAnimElem, aParentNode, aNodeContext )
{
AnimationTransitionFilterNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationTransitionFilterNode';

this.eTransitionType = undefined;
this.eTransitionSubType = undefined;
this.bReverseDirection = undefined;
this.eTransitionMode = undefined;
}
extend( AnimationTransitionFilterNode, AnimationBaseNode );


AnimationTransitionFilterNode.prototype.createActivity = function()
{
var aActivityParamSet = this.fillActivityParams();

return createShapeTransition( aActivityParamSet,
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight,
this );
};

AnimationTransitionFilterNode.prototype.parseElement = function()
{
var bRet = AnimationTransitionFilterNode.superclass.parseElement.call( this );
var bIsValidTransition = true;

var aAnimElem = this.aElement;

this.eTransitionType = undefined;
var sTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'type' );
if( sTypeAttr && aTransitionTypeInMap[ sTypeAttr ] )
{
this.eTransitionType = aTransitionTypeInMap[ sTypeAttr ];
}
else
{
bIsValidTransition = false;
log( 'AnimationTransitionFilterNode.parseElement: transition type not valid: ' + sTypeAttr );
}

this.eTransitionSubType = undefined;
var sSubTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'subtype' );
if( sSubTypeAttr === null )
sSubTypeAttr = 'default';
if( sSubTypeAttr && ( aTransitionSubtypeInMap[ sSubTypeAttr ] !== undefined  ) )
{
this.eTransitionSubType = aTransitionSubtypeInMap[ sSubTypeAttr ];
}
else
{
bIsValidTransition = false;
log( 'AnimationTransitionFilterNode.parseElement: transition subtype not valid: ' + sSubTypeAttr );
}

if( !bIsValidTransition )
{
this.eTransitionType = FADE_TRANSITION;
this.eTransitionSubType = CROSSFADE_TRANS_SUBTYPE;
log( 'AnimationTransitionFilterNode.parseElement: in place of the invalid transition a crossfade transition is used' );
}

this.bReverseDirection = false;
var sDirectionAttr = aAnimElem.getAttributeNS( NSS['smil'], 'direction' );
if( sDirectionAttr == 'reverse' )
this.bReverseDirection = true;

this.eTransitionMode = TRANSITION_MODE_IN;
var sModeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'mode' );
if( sModeAttr === 'out' )
this.eTransitionMode = TRANSITION_MODE_OUT;

return bRet;
};

AnimationTransitionFilterNode.prototype.getTransitionType = function()
{
return this.eTransitionType;
};

AnimationTransitionFilterNode.prototype.getTransitionSubType = function()
{
return this.eTransitionSubType;
};

AnimationTransitionFilterNode.prototype.getTransitionMode = function()
{
return this.eTransitionMode;
};

AnimationTransitionFilterNode.prototype.getReverseDirection = function()
{
return this.bReverseDirection;
};

AnimationTransitionFilterNode.prototype.info = function( bVerbose )
{
var sInfo = AnimationTransitionFilterNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
sInfo += ';  type: ' + getKeyByValue(aTransitionTypeInMap, this.getTransitionType());

sInfo += ';  subtype: ' + getKeyByValue(aTransitionSubtypeInMap, this.getTransitionSubType());

if( this.getReverseDirection() )
sInfo += ';  direction: reverse';
}

return sInfo;
};


function createAnimationTree( aRootElement, aNodeContext )
{
return createAnimationNode( aRootElement, null, aNodeContext );
}


function createAnimationNode( aElement, aParentNode, aNodeContext )
{
assert( aElement, 'createAnimationNode: invalid animation element' );

var eAnimationNodeType = getAnimationElementType( aElement );

var aCreatedNode = null;
var aCreatedContainer = null;

switch( eAnimationNodeType )
{
case ANIMATION_NODE_PAR:
aCreatedNode = aCreatedContainer =
new ParallelTimeContainer( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ITERATE:
aCreatedNode = aCreatedContainer =
new ParallelTimeContainer( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_SEQ:
aCreatedNode = aCreatedContainer =
new SequentialTimeContainer( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ANIMATE:
aCreatedNode = new PropertyAnimationNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_SET:
aCreatedNode = new AnimationSetNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ANIMATEMOTION:
log( 'createAnimationNode: ANIMATEMOTION not implemented' );
return null;
case ANIMATION_NODE_ANIMATECOLOR:
aCreatedNode = new AnimationColorNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ANIMATETRANSFORM:
log( 'createAnimationNode: ANIMATETRANSFORM not implemented' );
return null;
case ANIMATION_NODE_TRANSITIONFILTER:
aCreatedNode = new AnimationTransitionFilterNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_AUDIO:
log( 'createAnimationNode: AUDIO not implemented' );
return null;
case ANIMATION_NODE_COMMAND:
log( 'createAnimationNode: COMMAND not implemented' );
return null;
default:
log( 'createAnimationNode: invalid Animation Node Type: ' + eAnimationNodeType );
return null;
}

if( aCreatedContainer )
{
if( eAnimationNodeType == ANIMATION_NODE_ITERATE )
{
createIteratedNodes( aElement, aCreatedContainer, aNodeContext );
}
else
{
var aChildrenArray = getElementChildren( aElement );
for( var i = 0; i < aChildrenArray.length; ++i )
{
if( !createChildNode( aChildrenArray[i], aCreatedContainer, aNodeContext ) )
{
aCreatedContainer.removeAllChildrenNodes();
break;
}
}
}
}

return aCreatedNode;
}


function createChildNode( aElement, aParentNode, aNodeContext )
{
var aChildNode = createAnimationNode( aElement, aParentNode, aNodeContext );

if( !aChildNode )
{
log( 'createChildNode: child node creation failed' );
return false;
}
else
{
aParentNode.appendChildNode( aChildNode );
return true;
}
}


function createIteratedNodes( /*aElement, aContainerNode, aNodeContext*/ )
{
}


function makeScaler( nScale )
{
if( ( typeof( nScale ) !== typeof( 0 ) ) || !isFinite( nScale ) )
{
log( 'makeScaler: not valid param passed: ' + nScale );
return null;
}

return  function( nValue )
{
return ( nScale * nValue );
};
}


function createPropertyAnimation( sAttrName, aAnimatedElement, nWidth, nHeight )
{
if( !aAttributeMap[ sAttrName ] )
{
log( 'createPropertyAnimation: attribute is unknown' );
return null;
}


var aFunctorSet = aAttributeMap[ sAttrName ];

var sGetValueMethod =   aFunctorSet.get;
var sSetValueMethod =   aFunctorSet.set;

if( !sGetValueMethod || !sSetValueMethod  )
{
log( 'createPropertyAnimation: attribute is not handled' );
return null;
}

var aGetModifier =  eval( aFunctorSet.getmod );
var aSetModifier =  eval( aFunctorSet.setmod );


return new GenericAnimation( bind( aAnimatedElement, aAnimatedElement[ sGetValueMethod ] ),
bind( aAnimatedElement, aAnimatedElement[ sSetValueMethod ] ),
aGetModifier,
aSetModifier);
}


function createShapeTransition( aActivityParamSet, aAnimatedElement,
nSlideWidth, nSlideHeight,
aAnimatedTransitionFilterNode )
{
if( !aAnimatedTransitionFilterNode )
{
log( 'createShapeTransition: the animated transition filter node is not valid.' );
return null;
}
var eTransitionType = aAnimatedTransitionFilterNode.getTransitionType();
var eTransitionSubType = aAnimatedTransitionFilterNode.getTransitionSubType();
var bDirectionForward = ! aAnimatedTransitionFilterNode.getReverseDirection();
var bModeIn = ( aAnimatedTransitionFilterNode.getTransitionMode() == FORWARD );

var aTransitionInfo = aTransitionInfoTable[eTransitionType][eTransitionSubType];
var eTransitionClass = aTransitionInfo['class'];

switch( eTransitionClass )
{
default:
case TRANSITION_INVALID:
log( 'createShapeTransition: transition class: TRANSITION_INVALID' );
return null;

case TRANSITION_CLIP_POLYPOLYGON:
var aParametricPolyPolygon
= createClipPolyPolygon( eTransitionType, eTransitionSubType );
var aClippingAnimation
= new ClippingAnimation( aParametricPolyPolygon, aTransitionInfo,
bDirectionForward, bModeIn );
return new SimpleActivity( aActivityParamSet, aClippingAnimation, true );

case TRANSITION_SPECIAL:
switch( eTransitionType )
{
default:
var aAnimation
= createPropertyAnimation( 'opacity',
aAnimatedElement,
nSlideWidth,
nSlideHeight );
return new SimpleActivity( aActivityParamSet, aAnimation, bModeIn );
}
}

}


function ClippingAnimation( aParametricPolyPolygon, aTransitionInfo,
bDirectionForward, bModeIn )
{
this.aClippingFunctor = new ClippingFunctor( aParametricPolyPolygon,
aTransitionInfo,
bDirectionForward, bModeIn );
this.bAnimationStarted = false;
}

ClippingAnimation.prototype.start = function( aAnimatableElement )
{
assert( aAnimatableElement,
'ClippingAnimation.start: animatable element is not valid' );
this.aAnimatableElement = aAnimatableElement;
this.aAnimatableElement.initClipPath();
this.aAnimatableElement.notifyAnimationStart();

if( !this.bAnimationStarted )
this.bAnimationStarted = true;

};

ClippingAnimation.prototype.end = function()
{
if( this.bAnimationStarted )
{
this.aAnimatableElement.cleanClipPath();
this.bAnimationStarted = false;
this.aAnimatableElement.notifyAnimationEnd();
}
};

ClippingAnimation.prototype.perform = function( nValue )
{
var nWidth = this.aAnimatableElement.aClippingBBox.width;
var nHeight = this.aAnimatableElement.aClippingBBox.height;
var aPolyPolygonElement = this.aClippingFunctor.perform( nValue, nWidth, nHeight );
this.aAnimatableElement.setClipPath( aPolyPolygonElement );
};

ClippingAnimation.prototype.getUnderlyingValue = function()
{
return 0.0;
};


function GenericAnimation( aGetValueFunc, aSetValueFunc, aGetModifier, aSetModifier )
{
assert( aGetValueFunc && aSetValueFunc,
'GenericAnimation constructor: get value functor and/or set value functor are not valid' );

this.aGetValueFunc = aGetValueFunc;
this.aSetValueFunc = aSetValueFunc;
this.aGetModifier = aGetModifier;
this.aSetModifier = aSetModifier;
this.aAnimatableElement = null;
this.bAnimationStarted = false;
}


GenericAnimation.prototype.start = function( aAnimatableElement )
{
assert( aAnimatableElement, 'GenericAnimation.start: animatable element is not valid' );

this.aAnimatableElement = aAnimatableElement;
this.aAnimatableElement.notifyAnimationStart();

if( !this.bAnimationStarted )
this.bAnimationStarted = true;
};

GenericAnimation.prototype.end = function()
{
if( this.bAnimationStarted )
{
this.bAnimationStarted = false;
this.aAnimatableElement.notifyAnimationEnd();
}
};

GenericAnimation.prototype.perform = function( aValue )
{
if( this.aSetModifier )
aValue = this.aSetModifier( aValue );

this.aSetValueFunc( aValue );
};

GenericAnimation.prototype.getUnderlyingValue = function()
{
var aValue = this.aGetValueFunc();
if( this.aGetModifier )
aValue = this.aGetModifier( aValue );
return aValue;
};


function HSLAnimationWrapper( aColorAnimation )
{
assert( aColorAnimation,
'HSLAnimationWrapper constructor: invalid color animation delegate' );

this.aAnimation = aColorAnimation;
}


HSLAnimationWrapper.prototype.start = function( aAnimatableElement )
{
this.aAnimation.start( aAnimatableElement );
};

HSLAnimationWrapper.prototype.end = function()
{
this.aAnimation.end();
};
HSLAnimationWrapper.prototype.perform = function( aHSLValue )
{
this.aAnimation.perform( aHSLValue.convertToRGB() );
};

HSLAnimationWrapper.prototype.getUnderlyingValue = function()
{
return this.aAnimation.getUnderlyingValue().convertToHSL();
};


function SlideChangeBase(aLeavingSlide, aEnteringSlide)
{
this.aLeavingSlide = aLeavingSlide;
this.aEnteringSlide = aEnteringSlide;
this.bIsFinished = false;
}

SlideChangeBase.prototype.start = function()
{
};

SlideChangeBase.prototype.end = function()
{
if( this.bIsFinished )
return;

this.aLeavingSlide.hide();
this.aEnteringSlide.reset();
this.aLeavingSlide.reset();

this.bIsFinished = true;
};

SlideChangeBase.prototype.perform = function( nValue )
{
if( this.bIsFinished ) return false;

if( this.aLeavingSlide )
this.performOut( nValue );

if( this.aEnteringSlide )
this.performIn( nValue );

return true;
};

SlideChangeBase.prototype.getUnderlyingValue = function()
{
return 0.0;
};

SlideChangeBase.prototype.performIn = function( )
{
log( 'SlideChangeBase.performIn: abstract method called' );
};

SlideChangeBase.prototype.performOut = function( )
{
log( 'SlideChangeBase.performOut: abstract method called' );
};


function FadingSlideChange( aLeavingSlide, aEnteringSlide )
{
FadingSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );
this.bFirstRun = true;
}
extend( FadingSlideChange, SlideChangeBase );

FadingSlideChange.prototype.start = function()
{
FadingSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'opacity' );
this.aLeavingSlide.notifyUsedAttribute( 'opacity' );
this.aEnteringSlide.setOpacity( 0.0 );
this.aEnteringSlide.show();
};

FadingSlideChange.prototype.performIn = function( nT )
{
this.aEnteringSlide.setOpacity( nT );
};

FadingSlideChange.prototype.performOut = function( nT )
{

this.aLeavingSlide.setOpacity( 1 - nT );
};


function FadingOverColorSlideChange( aLeavingSlide, aEnteringSlide, sFadeColor )
{
FadingSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );
this.sFadeColor = sFadeColor;
if( !this.sFadeColor )
{
log( 'FadingOverColorSlideChange: sFadeColor not valid.' );
this.sFadeColor = '#000000';
}
this.aColorPlaneElement = this.createColorPlaneElement();
}
extend( FadingOverColorSlideChange, SlideChangeBase );

FadingOverColorSlideChange.prototype.start = function()
{
FadingOverColorSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'opacity' );
this.aLeavingSlide.notifyUsedAttribute( 'opacity' );
this.aLeavingSlide.insertBefore( this.aColorPlaneElement );
this.aEnteringSlide.setOpacity( 0.0 );
this.aEnteringSlide.show();
};

FadingOverColorSlideChange.prototype.end = function()
{
FadingOverColorSlideChange.superclass.end.call( this );
this.aLeavingSlide.removeElement( this.aColorPlaneElement );
};

FadingOverColorSlideChange.prototype.performIn = function( nT )
{
this.aEnteringSlide.setOpacity( (nT > 0.55) ? 2.0*(nT-0.55) : 0.0 );
};

FadingOverColorSlideChange.prototype.performOut = function( nT )
{
this.aLeavingSlide.setOpacity( (nT > 0.45) ? 0.0 : 2.0*(0.45-nT) );
};

FadingOverColorSlideChange.prototype.createColorPlaneElement = function()
{
var aColorPlaneElement = document.createElementNS( NSS['svg'], 'rect' );
aColorPlaneElement.setAttribute( 'width', String( this.aLeavingSlide.getWidth() ) );
aColorPlaneElement.setAttribute( 'height', String( this.aLeavingSlide.getHeight() ) );
aColorPlaneElement.setAttribute( 'fill', this.sFadeColor );
return aColorPlaneElement;
};


function MovingSlideChange( aLeavingSlide, aEnteringSlide,
aLeavingDirection, aEnteringDirection )
{
MovingSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );
this.aLeavingDirection = aLeavingDirection;
this.aEnteringDirection = aEnteringDirection;
}
extend( MovingSlideChange, SlideChangeBase );

MovingSlideChange.prototype.start = function()
{
MovingSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'transform' );
this.aLeavingSlide.notifyUsedAttribute( 'transform' );
this.performIn( 0 );
this.aEnteringSlide.show();
};

MovingSlideChange.prototype.performIn = function( nT )
{
var nS = nT - 1;
var dx = nS * this.aEnteringDirection.x * this.aEnteringSlide.getWidth();
var dy = nS * this.aEnteringDirection.y * this.aEnteringSlide.getHeight();
this.aEnteringSlide.translate( dx, dy );
};

MovingSlideChange.prototype.performOut = function( nT )
{
var dx = nT * this.aLeavingDirection.x * this.aLeavingSlide.getWidth();
var dy = nT * this.aLeavingDirection.y * this.aLeavingSlide.getHeight();
this.aLeavingSlide.translate( dx, dy );
};


function ClippedSlideChange( aLeavingSlide, aEnteringSlide, aParametricPolyPolygon,
aTransitionInfo, bIsDirectionForward )
{
ClippedSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );

var bIsModeIn = true;
this.aClippingFunctor= new ClippingFunctor( aParametricPolyPolygon, aTransitionInfo,
bIsDirectionForward, bIsModeIn );
}
extend( ClippedSlideChange, SlideChangeBase );

ClippedSlideChange.prototype.start = function()
{
ClippedSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'clip-path' );
this.performIn( 0 );
this.aEnteringSlide.show();
};

ClippedSlideChange.prototype.performIn = function( nT )
{
var nWidth = this.aEnteringSlide.getWidth();
var nHeight = this.aEnteringSlide.getHeight();
var aPolyPolygonElement = this.aClippingFunctor.perform( nT, nWidth, nHeight );
this.aEnteringSlide.setClipPath( aPolyPolygonElement );
};

ClippedSlideChange.prototype.performOut = function( )
{
};


function ClippingFunctor( aParametricPolyPolygon, aTransitionInfo,
bIsDirectionForward, bIsModeIn)
{
this.aParametricPolyPolygon = aParametricPolyPolygon;
this.aStaticTransformation = null;
this.bForwardParameterSweep = true;
this.bSubtractPolygon = false;
this.bScaleIsotropically = aTransitionInfo.scaleIsotropically;
this.bFlip = false;

assert( this.aParametricPolyPolygon,
'ClippingFunctor: parametric polygon is not valid' );

if( aTransitionInfo.rotationAngle != 0.0 ||
aTransitionInfo.scaleX != 1.0 ||  aTransitionInfo.scaleY != 1.0 )
{
this.aStaticTransformation = SVGIdentityMatrix.translate( 0.5, 0.5 );
if( aTransitionInfo.scaleX != 1.0 ||  aTransitionInfo.scaleY != 1.0 )
this.aStaticTransformation
= this.aStaticTransformation.scaleNonUniform( aTransitionInfo.scaleX,
aTransitionInfo.scaleY );
if( aTransitionInfo.rotationAngle != 0.0 )
this.aStaticTransformation
= this.aStaticTransformation.rotate( aTransitionInfo.rotationAngle );
this.aStaticTransformation = this.aStaticTransformation.translate( -0.5, -0.5 );
}
else
{
this.aStaticTransformation = document.documentElement.createSVGMatrix();
}

if( !bIsDirectionForward )
{
var aMatrix = null;
switch( aTransitionInfo.reverseMethod )
{
default:
log( 'ClippingFunctor: unexpected reverse method.' );
break;
case REVERSEMETHOD_IGNORE:
break;
case REVERSEMETHOD_INVERT_SWEEP:
this.bForwardParameterSweep = !this.bForwardParameterSweep;
break;
case REVERSEMETHOD_SUBTRACT_POLYGON:
this.bSubtractPolygon = !this.bSubtractPolygon;
break;
case REVERSEMETHOD_SUBTRACT_AND_INVERT:
this.bForwardParameterSweep = !this.bForwardParameterSweep;
this.bSubtractPolygon = !this.bSubtractPolygon;
break;
case REVERSEMETHOD_ROTATE_180:
aMatrix = document.documentElement.createSVGMatrix();
aMatrix.setToRotationAroundPoint( 0.5, 0.5, 180 );
this.aStaticTransformation = aMatrix.multiply( this.aStaticTransformation );
break;
case REVERSEMETHOD_FLIP_X:
aMatrix = document.documentElement.createSVGMatrix();
aMatrix.a = -1; aMatrix.e = 1.0;
this.aStaticTransformation = aMatrix.multiply( this.aStaticTransformation );
this.bFlip = true;
break;
case REVERSEMETHOD_FLIP_Y:
aMatrix = document.documentElement.createSVGMatrix();
aMatrix.d = -1; aMatrix.f = 1.0;
this.aStaticTransformation = aMatrix.multiply( this.aStaticTransformation );
this.bFlip = true;
break;
}
}

if( !bIsModeIn )
{
if( aTransitionInfo.outInvertsSweep )
{
this.bForwardParameterSweep = !this.bForwardParameterSweep;
}
else
{
this.bSubtractPolygon = !this.bSubtractPolygon;
}
}
}

ClippingFunctor.aBoundingPath = document.createElementNS( NSS['svg'], 'path' );
ClippingFunctor.aBoundingPath.setAttribute( 'd', 'M -1 -1 L 2 -1 L 2 2 L -1 2 L -1 -1' );

ClippingFunctor.prototype.perform = function( nT, nWidth, nHeight )
{
var aClipPoly = this.aParametricPolyPolygon.perform( this.bForwardParameterSweep ? nT : (1 - nT) );


if( this.bSubtractPolygon )
{
aClipPoly.changeOrientation();
aClipPoly.prependPath( ClippingFunctor.aBoundingPath );
}

var aMatrix;
if( this.bScaleIsotropically )
{
var nScaleFactor = Math.max( nWidth, nHeight );
aMatrix = SVGIdentityMatrix.translate( -( nScaleFactor - nWidth ) / 2.0,
-( nScaleFactor - nHeight ) / 2.0 );
aMatrix = aMatrix.scale( nScaleFactor );
aMatrix = aMatrix.multiply( this.aStaticTransformation );
}
else
{
aMatrix = SVGIdentityMatrix.scaleNonUniform( nWidth, nHeight );
aMatrix = aMatrix.multiply( this.aStaticTransformation );
}

aClipPoly.matrixTransform( aMatrix );

return aClipPoly;
};


function createClipPolyPolygon( nType, nSubtype )
{
switch( nType )
{
default:
log( 'createClipPolyPolygon: unknown transition type: ' + nType );
return null;
case BARWIPE_TRANSITION:
return new BarWipePath( 1 );
case FOURBOXWIPE_TRANSITION:
return new FourBoxWipePath( nSubtype === CORNERSOUT_TRANS_SUBTYPE );
case BOXWIPE_TRANSITION:
return new BoxWipePath( nSubtype == LEFTCENTER_TRANS_SUBTYPE ||
nSubtype == TOPCENTER_TRANS_SUBTYPE ||
nSubtype == RIGHTCENTER_TRANS_SUBTYPE ||
nSubtype == BOTTOMCENTER_TRANS_SUBTYPE );
case ELLIPSEWIPE_TRANSITION:
return new EllipseWipePath( nSubtype );
case FANWIPE_TRANSITION:
return new FanWipePath(nSubtype == CENTERTOP_TRANS_SUBTYPE ||
nSubtype == CENTERRIGHT_TRANS_SUBTYPE, true, false);
case PINWHEELWIPE_TRANSITION:
var nBlades;
switch( nSubtype )
{
case ONEBLADE_TRANS_SUBTYPE:
nBlades = 1;
break;
case DEFAULT_TRANS_SUBTYPE:
case TWOBLADEVERTICAL_TRANS_SUBTYPE:
nBlades = 2;
break;
case TWOBLADEHORIZONTAL_TRANS_SUBTYPE:
nBlades = 2;
break;
case THREEBLADE_TRANS_SUBTYPE:
nBlades = 3;
break;
case FOURBLADE_TRANS_SUBTYPE:
nBlades = 4;
break;
case EIGHTBLADE_TRANS_SUBTYPE:
nBlades = 8;
break;
default:
log( 'createClipPolyPolygon: unknown subtype: ' + nSubtype );
return null;
}
return new PinWheelWipePath( nBlades );
case CLOCKWIPE_TRANSITION:
return new ClockWipePath();
case RANDOMBARWIPE_TRANSITION:
return new RandomWipePath( 128, true /* bars */ );
case CHECKERBOARDWIPE_TRANSITION:
return new CheckerBoardWipePath( 10 );
case ZIGZAGWIPE_TRANSITION:
return new ZigZagWipePath( 5 );
case BARNZIGZAGWIPE_TRANSITION:
return new BarnZigZagWipePath( 5 );
case IRISWIPE_TRANSITION:
switch(nSubtype)
{
case RECTANGLE_TRANS_SUBTYPE:
return new IrisWipePath(0);
case DIAMOND_TRANS_SUBTYPE:
return new IrisWipePath(1);
default:
log( 'createClipPolyPolygon: unknown subtype: ' + nSubtype );
return null;
}
case BARNDOORWIPE_TRANSITION:
return new BarnDoorWipePath(false);
case SINGLESWEEPWIPE_TRANSITION:
return new SweepWipePath(
nSubtype == CLOCKWISETOP_TRANS_SUBTYPE ||
nSubtype == CLOCKWISERIGHT_TRANS_SUBTYPE ||
nSubtype == CLOCKWISEBOTTOM_TRANS_SUBTYPE ||
nSubtype == CLOCKWISELEFT_TRANS_SUBTYPE,
true,
false,
nSubtype == COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE ||
nSubtype == COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE );
case WATERFALLWIPE_TRANSITION:
return new WaterfallWipePath(128, // flipOnYAxis
nSubtype == VERTICALRIGHT_TRANS_SUBTYPE ||
nSubtype == HORIZONTALLEFT_TRANS_SUBTYPE);
case MISCDIAGONALWIPE_TRANSITION:
switch(nSubtype) {
case DOUBLEBARNDOOR_TRANS_SUBTYPE:
return new BarnDoorWipePath(true /* Doubled */);
case DOUBLEDIAMOND_TRANS_SUBTYPE:
return new DoubleDiamondWipePath();
default:
log( 'createClipPolyPolygon: unhandled subtype: ' + nSubtype );
return null;
}
case DISSOLVE_TRANSITION:
return new RandomWipePath( 16 * 16, false /* dissolve */ );
case VEEWIPE_TRANSITION:
return new VeeWipePath();
case SNAKEWIPE_TRANSITION:
return new SnakeWipePath( 8 * 8, // diagonal
nSubtype == TOPLEFTDIAGONAL_TRANS_SUBTYPE     ||
nSubtype == TOPRIGHTDIAGONAL_TRANS_SUBTYPE    ||
nSubtype == BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE ||
nSubtype == BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE   ,
nSubtype == TOPLEFTVERTICAL_TRANS_SUBTYPE     ||
nSubtype == TOPRIGHTDIAGONAL_TRANS_SUBTYPE    ||
nSubtype == BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE
);
case PARALLELSNAKESWIPE_TRANSITION:
return new ParallelSnakesWipePath(
8 * 8, // elements
nSubtype == DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
nSubtype == VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE  ||
nSubtype == DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
nSubtype == VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE    ||
nSubtype == VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE  ||
nSubtype == HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE
);

case SPIRALWIPE_TRANSITION:
return new SpiralWipePath(
8 * 8, // elements
nSubtype == TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE     ||
nSubtype == TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE    ||
nSubtype == BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE ||
nSubtype == BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE );

case BOXSNAKESWIPE_TRANSITION:
return new BoxSnakesWipePath(
8 * 8,
nSubtype == FOURBOXVERTICAL_TRANS_SUBTYPE ||
nSubtype == FOURBOXHORIZONTAL_TRANS_SUBTYPE );
}
}


function createUnitSquarePath()
{
var aPath = document.createElementNS( NSS['svg'], 'path' );
var sD = 'M 0 0 L 1 0 L 1 1 L 0 1 L 0 0';
aPath.setAttribute( 'd', sD );
return aPath;
}

function createEmptyPath()
{
var aPath = document.createElementNS( NSS['svg'], 'path' );
var sD = 'M 0 0 L 0 0';
aPath.setAttribute( 'd', sD );
return aPath;
}

function pruneScaleValue( nVal )
{
if( nVal < 0.0 )
return (nVal < -0.00001 ? nVal : -0.00001);
else
return (nVal > 0.00001 ? nVal : 0.00001);
}


function BarWipePath( nBars /* nBars > 1: blinds effect */ )
{
this.nBars = nBars;
if( this.nBars === undefined || this.nBars < 1 )
this.nBars = 1;
this.aBasePath = createUnitSquarePath();
}

BarWipePath.prototype.perform = function( nT )
{

var aMatrix = SVGIdentityMatrix.scaleNonUniform( pruneScaleValue( nT / this.nBars ), 1.0 );

var aPolyPath = this.aBasePath.cloneNode( true );
aPolyPath.matrixTransform( aMatrix );

if( this.nBars > 1 )
{
var i;
var aTransform;
var aPath;
for( i = this.nBars - 1; i > 0; --i )
{
aTransform = SVGIdentityMatrix.translate( i / this.nBars, 0.0 );
aTransform = aTransform.multiply( aMatrix );
aPath = this.aBasePath.cloneNode( true );
aPath.matrixTransform( aTransform );
aPolyPath.appendPath( aPath );
}
}
return aPolyPath;
};


function BoxWipePath(bIsTopCentered) {
this.bIsTopCentered = bIsTopCentered;
this.aBasePath = createUnitSquarePath();
}

BoxWipePath.prototype.perform = function( nT ) {
var d = pruneScaleValue(nT);
var aTransform = SVGIdentityMatrix;
if(this.bIsTopCentered) {
aTransform = aTransform.translate(-0.5, 0.0).scale(d, d).translate(0.5, 0.0);
}
else {
aTransform = aTransform.scale(d, d);
}
var aPath = this.aBasePath.cloneNode(true);
aPath.matrixTransform(aTransform);
return aPath;
}

function SweepWipePath(bCenter, bSingle, bOppositeVertical, bFlipOnYAxis) {
this.bCenter = bCenter;
this.bSingle = bSingle;
this.bOppositeVertical = bOppositeVertical;
this.bFlipOnYAxis = bFlipOnYAxis;
this.aBasePath = createUnitSquarePath();
}

SweepWipePath.prototype.perform = function( nT ) {
nT /= 2.0;
if(!this.bCenter)
nT /= 2.0;
if(!this.bSingle && !this.bOppositeVertical)
nT /= 2.0;

var poly = PinWheelWipePath.calcCenteredClock( nT + 0.25, 1.0 );
var aTransform;

if(this.bCenter) {
aTransform = SVGIdentityMatrix.translate(0.5, 0.0);
poly.matrixTransform(aTransform);
}
var res = poly;

if(!this.bSingle) {
if(this.bOppositeVertical) {
aTransform = SVGIdentityMatrix.scale(1.0, -1.0);
aTransform.translate(0.0, 1.0);
poly.matrixTransform(aTransform);
poly.changeOrientation();
}
else {
aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform.rotate(Math.PI);
aTransform.translate(0.5, 0.5);
poly.matrixTransform(aTransform);
}
res.appendPath(poly);
}
return this.bFlipOnYAxis ? flipOnYAxis(res) : res;
}

function FourBoxWipePath( bCornersOut )
{
this.bCornersOut = bCornersOut;
this.aBasePath = createUnitSquarePath();
}

FourBoxWipePath.prototype.perform = function( nT )
{
var aMatrix;
var d = pruneScaleValue( nT / 2.0 );

if( this.bCornersOut )
{
aMatrix = SVGIdentityMatrix.translate( -0.25, -0.25 ).scale( d ).translate( -0.5, -0.5 );
}
else
{
aMatrix = SVGIdentityMatrix.translate( -0.5, -0.5 ).scale( d );
}


var aTransform = aMatrix;
var aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
var aPolyPath = aSquare;
aMatrix = SVGIdentityMatrix.flipY();
aTransform = aMatrix.multiply( aTransform );
aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
aSquare.changeOrientation();
aPolyPath.appendPath( aSquare );
aMatrix = SVGIdentityMatrix.flipX();
aTransform = aMatrix.multiply( aTransform );
aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
aPolyPath.appendPath( aSquare );
aMatrix = SVGIdentityMatrix.flipY();
aTransform = aMatrix.multiply( aTransform );
aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
aSquare.changeOrientation();
aPolyPath.appendPath( aSquare );

aMatrix = SVGIdentityMatrix.translate( 0.5, 0.5 );
aMatrix = aMatrix.scale( 1.1 );
aPolyPath.matrixTransform( aMatrix );

return aPolyPath;
};


function EllipseWipePath( eSubtype )
{
this.eSubtype = eSubtype;

var sPathData = 'M 0.5 -0.207107 ' +
'C 0.687536 -0.207107 0.867392 -0.132608 1 0 ' +
'C 1.13261 0.132608 1.20711 0.312464 1.20711 0.5 ' +
'C 1.20711 0.687536 1.13261 0.867392 1 1 ' +
'C 0.867392 1.13261 0.687536 1.20711 0.5 1.20711 ' +
'C 0.312464 1.20711 0.132608 1.13261 0 1 ' +
'C -0.132608 0.867392 -0.207107 0.687536 -0.207107 0.5 ' +
'C -0.207107 0.312464 -0.132608 0.132608 0 0 ' +
'C 0.132608 -0.132608 0.312464 -0.207107 0.5 -0.207107';

this.aBasePath = document.createElementNS( NSS['svg'], 'path' );
this.aBasePath.setAttribute( 'd', sPathData );
}

EllipseWipePath.prototype.perform = function( nT )
{

var aTransform = SVGIdentityMatrix.translate( 0.5, 0.5 ).scale( nT ).translate( -0.5, -0.5 );
var aEllipse = this.aBasePath.cloneNode( true );
aEllipse.matrixTransform( aTransform );

return aEllipse;
};

function FanWipePath(bIsCenter, bIsSingle, bIsFanIn) {
this.bCenter = bIsCenter;
this.bSingle = bIsSingle;
this.bFanIn  = bIsFanIn;
this.aBasePath = createUnitSquarePath();
}

FanWipePath.prototype.perform = function( nT ) {
var res = this.aBasePath.cloneNode(true);
var poly = PinWheelWipePath.calcCenteredClock(
nT / ((this.bCenter && this.bSingle) ? 2.0 : 4.0), 1.0);
res.appendPath(poly);
var aTransform = SVGIdentityMatrix.flipY();
aTransform = aTransform.scaleNonUniform(-1.0, 1.0);
poly.matrixTransform(aTransform);
res.appendPath(poly);

if(this.bCenter) {
aTransform = SVGIdentityMatrix.scaleNonUniform(0.5, 0.5).translate(0.5, 0.5);
res.matrixTransform(aTransform);

if(!this.bSingle)
res.appendPath(flipOnXAxis(res));
}
else {
aTransform = SVGIdentityMatrix.scaleNonUniform(0.5, 1.0).translate(0.5, 1.0);
res.matrixTransform(aTransform);
}
return res;
}

function ClockWipePath() { }

ClockWipePath.prototype.perform = function( nT ) {
const aTransform = SVGIdentityMatrix.scaleNonUniform(0.5, 0.5).translate(0.5, 0.5);
var aPolyPath = PinWheelWipePath.calcCenteredClock(nT, 1.0);
aPolyPath.matrixTransform( aTransform );

return aPolyPath;
}

function PinWheelWipePath( nBlades )
{
this.nBlades = nBlades;
if( !this.nBlades || this.nBlades < 1 )
this.nBlades = 1;
}

PinWheelWipePath.calcCenteredClock = function( nT, nE )
{
var nMAX_EDGE = 2;

var aTransform = SVGIdentityMatrix.rotate( nT * 360 );

var aPoint = document.documentElement.createSVGPoint();
aPoint.y = -nMAX_EDGE;
aPoint = aPoint.matrixTransform( aTransform );

var sPathData = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
if( nT >= 0.875 )
sPathData += 'L ' + '-' + nE + ' -' + nE + ' ';
if( nT >= 0.625 )
sPathData += 'L ' + '-' + nE + ' ' + nE + ' ';
if( nT >= 0.375 )
sPathData += 'L ' + nE + ' ' + nE + ' ';
if( nT >= 0.125 )
sPathData += 'L ' + nE + ' -' + nE + ' ';

sPathData += 'L 0 -' + nE + ' ';
sPathData += 'L 0 0 ';
sPathData += 'L '  + aPoint.x + ' ' + aPoint.y;

var aPath = document.createElementNS( NSS['svg'], 'path' );
aPath.setAttribute( 'd', sPathData );
return aPath;
};

PinWheelWipePath.prototype.perform = function( nT )
{
var aBasePath = PinWheelWipePath.calcCenteredClock( nT / this.nBlades,
2.0 /* max edge when rotating */  );

var aPolyPath = aBasePath.cloneNode( true );
var aPath;
var aRotation;
var i;
for( i = this.nBlades - 1; i > 0; --i )
{
aRotation = SVGIdentityMatrix.rotate( (i * 360) / this.nBlades );
aPath = aBasePath.cloneNode( true );
aPath.matrixTransform( aRotation );
aPolyPath.appendPath( aPath );
}

var aTransform = SVGIdentityMatrix.translate( 0.5, 0.5 ).scale( 0.5 );
aPolyPath.matrixTransform( aTransform );

return aPolyPath;
};

function BarnDoorWipePath(doubled) {
this.aBasePath = createUnitSquarePath();
this.doubled   = doubled;
}

BarnDoorWipePath.prototype.perform = function( nT ) {
if(this.doubled)
nT /= 2.0;
var aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.scaleNonUniform(pruneScaleValue(nT), 1.0).translate(0.5, 0.5);
var aPath = this.aBasePath.cloneNode(true);
aPath.matrixTransform(aTransform);
var res = aPath;

if(this.doubled) {
aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.rotate(Math.PI / 2).translate(0.5, 0.5);
aPath.matrixTransform(aTransform);
res.appendPath(aPath);
}
return res;
}

function WaterfallWipePath(nElements, bFlipOnYAxis) {
this.bFlipOnYAxis = bFlipOnYAxis;

var sqrtElements = Math.floor(Math.sqrt(nElements));
var elementEdge = 1.0/sqrtElements;

var aPath = 'M '+ 0.0 + ' ' + -1.0 + ' ';
for(var pos = sqrtElements; pos--; ) {
var xPos = sqrtElements - pos - 1;
var yPos = pruneScaleValue( ((pos+1) * elementEdge) - 1.0);

aPath += 'L ' + pruneScaleValue(xPos * elementEdge) + ' ' + yPos + ' ';
aPath += 'L ' + pruneScaleValue((xPos+1)*elementEdge) + ' ' + yPos + ' ';
}
aPath += 'L ' + 1.0 + ' ' + -1.0 + ' ';
aPath += 'L ' + 0.0 + ' ' + -1.0 + ' ';
this.aBasePath = document.createElementNS( NSS['svg'], 'path');
this.aBasePath.setAttribute('d', aPath);
}

WaterfallWipePath.prototype.perform = function( nT ) {
var poly = this.aBasePath.cloneNode(true);
var aTransform = SVGIdentityMatrix.translate(0.0, pruneScaleValue(2.0 * nT));
poly.matrixTransform(aTransform);
var aHead = 'M ' + 0.0 + ' ' + -1.0 + ' ';
var aHeadPath= document.createElementNS( NSS['svg'], 'path');
aHeadPath.setAttribute('d', aHead);

var aTail = 'M ' + 1.0 + ' ' + -1.0 + ' ';
var aTailPath = document.createElementNS( NSS['svg'], 'path');
aTailPath.setAttribute('d', aTail);

poly.prependPath(aHeadPath);
poly.appendPath(aTailPath);

return this.bFlipOnYAxis ? flipOnYAxis(poly) : poly;
}

function DoubleDiamondWipePath() { }

DoubleDiamondWipePath.prototype.perform = function( nT ) {
var a = pruneScaleValue(0.25 + (nT * 0.75));
var aPath = 'M ' + (0.5 + a) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 - a) + ' ';
aPath += 'L ' + (0.5 - a) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 + a) + ' ';
aPath += 'L ' + (0.5 + a) + ' ' + 0.5 + ' ';
var poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
var res = poly.cloneNode(true);

var b = pruneScaleValue( (1.0 - nT) * 0.25);
aPath = 'M ' + (0.5 + b) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 + b) + ' ';
aPath += 'L ' + (0.5 - b) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 - b) + ' ';
aPath += 'L ' + (0.5 + b) + ' ' + 0.5 + ' ';
poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
res.appendPath(poly);

return res;
}

function IrisWipePath(unitRect) {
this.unitRect = unitRect;
this.aBasePath = createUnitSquarePath();
}


IrisWipePath.prototype.perform = function( nT ) {
var d = pruneScaleValue(nT);
var aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.multiply(SVGIdentityMatrix.scaleNonUniform(d, d).translate(0.5, 0.5));
var aPath = this.aBasePath.cloneNode(true);
aPath.matrixTransform(aTransform);
return aPath;
}

function ZigZagWipePath(nZigs) {
this.zigEdge = 1.0/nZigs;
const d = this.zigEdge;
const d2 = (d / 2.0);
this.aBasePath = 'M ' + (-1.0 - d) + ' ' + -d + ' ';
this.aBasePath += 'L ' + (-1.0 - d) + ' ' + (1.0 + d) + ' ';
this.aBasePath += 'L ' + -d + ' ' + (1.0 + d) + ' ';

for(var pos = (nZigs + 2); pos--; ) {
this.aBasePath += 'L ' + 0.0 + ' ' + ((pos - 1) * d + d2) + ' ';
this.aBasePath += 'L ' + -d + ' ' + (pos - 1) * d + ' ';
}
this.aBasePath += 'L ' + (-1.0 - d) + ' ' + -d + ' ';
}

ZigZagWipePath.prototype.perform = function( nT ) {
var res = document.createElementNS( NSS['svg'], 'path');
res.setAttribute('d', this.aBasePath);
res.matrixTransform(SVGIdentityMatrix.translate((1.0 + this.zigEdge) * nT, 0.0));
return res;
}

function BarnZigZagWipePath( nZigs ) { ZigZagWipePath.call(this, nZigs); }

BarnZigZagWipePath.prototype = Object.create(ZigZagWipePath);

BarnZigZagWipePath.prototype.perform = function( nT ) {
var res = createEmptyPath();
var poly = document.createElementNS( NSS['svg'], 'path');
var aTransform = SVGIdentityMatrix.translate(
((1.0 + this.zigEdge) * (1.0 - nT)) / 2.0, 0.0);
poly.setAttribute('d', this.aBasePath);
poly.changeOrientation();
poly.matrixTransform(aTransform);
res.appendPath(poly);

aTransform = SVGIdentityMatrix.scale(-1.0, 1.0);
aTransform.translate(1.0, this.zigEdge / 2.0);
poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', this.aBasePath);
poly.matrixTransform(aTransform);
res.appendPath(poly);

return res;
}

function CheckerBoardWipePath( unitsPerEdge )
{
this.unitsPerEdge = unitsPerEdge;
if( this.unitsPerEdge === undefined || this.unitsPerEdge < 1 )
this.unitsPerEdge = 10;
this.aBasePath = createUnitSquarePath();
}

CheckerBoardWipePath.prototype.perform = function( nT )
{
var d = pruneScaleValue(1.0 / this.unitsPerEdge);
var aMatrix = SVGIdentityMatrix.scaleNonUniform(pruneScaleValue( d*2.0*nT ),
pruneScaleValue( d ) );

var aPolyPath = null;
var i, j;
var aTransform;
var aPath;
for ( i = this.unitsPerEdge; i--; )
{
aTransform = SVGIdentityMatrix;

if ((i % 2) == 1) // odd line
aTransform = aTransform.translate( -d, 0.0 );

aTransform = aTransform.multiply( aMatrix );

for ( j = (this.unitsPerEdge / 2) + 1; j--;)
{
aPath = this.aBasePath.cloneNode( true );
aPath.matrixTransform( aTransform );
if (aPolyPath == null) aPolyPath = aPath;
else aPolyPath.appendPath( aPath );
aTransform = SVGIdentityMatrix.translate( d*2.0, 0.0 ).multiply( aTransform );
}

aMatrix = SVGIdentityMatrix.translate( 0.0, d ).multiply( aMatrix ); // next line
}

return aPolyPath;
};


function RandomWipePath( nElements, bRandomBars )
{
this.nElements = nElements;
this.aBasePath = createUnitSquarePath();
this.aPositionArray = new Array( nElements );
this.aClipPath = createEmptyPath();
this.nAlreadyAppendedElements = 0;

var fEdgeLength, nPos, aTransform;

if( bRandomBars ) // random bar wipe
{
fEdgeLength = 1.0 / nElements;
for( nPos = 0; nPos < nElements; ++nPos )
{
this.aPositionArray[nPos] = { x: 0.0, y: pruneScaleValue( nPos * fEdgeLength ) }
}
aTransform = SVGIdentityMatrix.scaleNonUniform( 1.0, pruneScaleValue( fEdgeLength ) );
}
else // dissolve wipe
{
var nSqrtElements = Math.round( Math.sqrt( nElements ) );
fEdgeLength = 1.0 / nSqrtElements;
for( nPos = 0; nPos < nElements; ++nPos )
{
this.aPositionArray[nPos] = {
x: pruneScaleValue( ( nPos % nSqrtElements ) * fEdgeLength ),
y: pruneScaleValue( ( nPos / nSqrtElements ) * fEdgeLength ) }
}
aTransform = SVGIdentityMatrix.scale( pruneScaleValue( fEdgeLength ) );
}
this.aBasePath.matrixTransform( aTransform );

var nPos1, nPos2;
var tmp;
for( nPos1 = nElements - 1; nPos1 > 0; --nPos1 )
{
nPos2 = getRandomInt( nPos1 + 1 );
tmp = this.aPositionArray[nPos1];
this.aPositionArray[nPos1] = this.aPositionArray[nPos2];
this.aPositionArray[nPos2] = tmp;
}
}

RandomWipePath.prototype.perform = function( nT )
{
var aPolyPath = createEmptyPath();
var aPoint;
var aPath;
var aTransform;
var nElements = Math.round( nT * this.nElements );
if( nElements === 0 )
{
return aPolyPath;
}
if( this.nAlreadyAppendedElements >= nElements )
{
this.nAlreadyAppendedElements = 0;
this.aClipPath = createEmptyPath();
}
var nPos;
for( nPos = this.nAlreadyAppendedElements; nPos < nElements; ++nPos )
{
aPoint = this.aPositionArray[nPos];
aPath = this.aBasePath.cloneNode( true );
aTransform = SVGIdentityMatrix.translate( aPoint.x, aPoint.y );
aPath.matrixTransform( aTransform );
aPolyPath.appendPath( aPath );
}

this.nAlreadyAppendedElements = nElements;
this.aClipPath.appendPath( aPolyPath );

return this.aClipPath.cloneNode( true );
};

function SnakeWipePath(nElements, bDiagonal, bflipOnYAxis)
{
this.sqrtElements = Math.floor(Math.sqrt(nElements));
this.elementEdge  = (1.0 / this.sqrtElements);
this.diagonal     = bDiagonal;
this.flipOnYAxis  = bflipOnYAxis;
this.aBasePath    = createUnitSquarePath();
}

SnakeWipePath.prototype.calcSnake = function(t)
{
var aPolyPath = createEmptyPath();
const area   = (t * this.sqrtElements * this.sqrtElements);
const line_  = Math.floor(area) / this.sqrtElements;
const line   = pruneScaleValue(line_ / this.sqrtElements);
const col    = pruneScaleValue((area - (line_ * this.sqrtElements)) / this.sqrtElements);

if(line != 0) {
let aPath = 'M '+ 0.0 + ' ' + 0.0 + ' ';
aPath += 'L ' + 0.0 + ' ' + line + ' ';
aPath += 'L ' + 1.0 + ' ' + line + ' ';
aPath += 'L ' + 1.0 + ' ' + 0.0 + ' ';
aPath += 'L 0 0 ';
let poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
aPolyPath.appendPath(poly);
}
if(col != 0) {
var offset = 0.0;
if((line_ & 1) == 1) {
offset = (1.0 - col);
}
let aPath = 'M ' + offset + ' ' + line + ' ';
aPath += 'L '+ offset + ' ' + (line + this.elementEdge) + ' ';
aPath += 'L ' + (offset+col) + ' ' + (line + this.elementEdge) + ' ';
aPath += 'L ' + (offset+col) + ' ' + line + ' ';
aPath += 'L ' + offset + ' ' + line + ' ';
let poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
aPolyPath.appendPath(poly);
}

return aPolyPath;
}

SnakeWipePath.prototype.calcHalfDiagonalSnake = function(nT, bIn) {
var res = createEmptyPath();

if(bIn) {
const sqrtArea2 = Math.sqrt(nT * this.sqrtElements * this.sqrtElements);
const edge = pruneScaleValue(sqrtArea2 / this.sqrtElements);

var aPath, aPoint = document.documentElement.createSVGPoint();
if(edge) {
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = edge;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = edge;
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
res.appendPath(poly);
}
const a = (Math.SQRT1_2 / this.sqrtElements);
const d = (sqrtArea2 - Math.floor(sqrtArea2));
const len = (nT * Math.SQRT1_2 * d);
const height = pruneScaleValue(Math.SQRT1_2 / this.sqrtElements);
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = height;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = len + a;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
let aTransform;

if((Math.floor(sqrtArea2) & 1) == 1) {
aTransform = SVGIdentityMatrix.rotate((Math.PI)/2 + (Math.PI)/4);
aTransform.translate(edge + this.elementEdge, 0.0);
}
else {
aTransform = SVGIdentityMatrix.translate(-a, 0.0);
aTransform.rotate(-(Math.PI/4));
aTransform.translate(0.0, edge);
}

poly.matrixTransform(aTransform);
res.appendPath(poly);
}
else { //out
const sqrtArea2 = Math.sqrt(nT * this.sqrtElements * this.sqrtElements);
const edge = pruneScaleValue(Math.floor(sqrtArea2)/this.sqrtElements);

let aPath, aPoint = document.documentElement.createSVGPoint();
if(edge != 0) {
aPoint.y = 1.0;
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = edge;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 1.0;
aPoint.y = edge;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
res.appendPath(poly);
}
const a = (Math.SQRT1_2 / this.sqrtElements);
const d = (sqrtArea2 - Math.floor(sqrtArea2));
const len = ((1.0 - nT) * Math.SQRT2 * d);
const height = pruneScaleValue(Math.SQRT1_2 / this.sqrtElements);
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = height;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = len + a;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
let aTransform;

if((Math.floor(sqrtArea2) & 1) == 1) {
aTransform = SVGIdentityMatrix.translate(0.0, -height);
aTransform.rotate(Math.PI/2 + Math.PI/4);
aTransform.translate(1.0, edge);
}
else {
aTransform = SVGIdentityMatrix.rotate(-(Math.PI/4));
aTransform = aTransform.translate(edge, 1.0);
}
poly.matrixTransform(aTransform);
res.appendPath(poly);
}
return res;
}

SnakeWipePath.prototype.perform = function(nT) {
var res = createEmptyPath();
if(this.diagonal) {
if(nT >= 0.5) {
res.appendPath(this.calcHalfDiagonalSnake(1.0, true));
res.appendPath(this.calcHalfDiagonalSnake(2.0*(nT-0.5), false));
}
else
res.appendPath(this.calcHalfDiagonalSnake(2.0*nT, true));
}
else
res = this.calcSnake(nT);

return this.flipOnYAxis ? flipOnYAxis(res) : res;
}

function ParallelSnakesWipePath(nElements, bDiagonal, bFlipOnYAxis, bOpposite) {
SnakeWipePath.call(this, nElements, bDiagonal, bFlipOnYAxis);
this.bOpposite = bOpposite;
}

ParallelSnakesWipePath.prototype = Object.create(SnakeWipePath);

ParallelSnakesWipePath.prototype.perform = function( nT ) {
var res = createEmptyPath(), half, aTransform;
if(this.diagonal) {
assert(this.bOpposite);
half = SnakeWipePath.prototype.calcHalfDiagonalSnake.call(this, nT, false);
aTransform = SVGIdentityMatrix.scale(1, -1);
aTransform.translate(-0.5, 0.5);
aTransform.rotate(Math.PI/2);
aTransform.translate(0.5, 0.5);
half.matrixTransform(aTransform);
half.changeOrientation();
res.appendPath(half);

aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform.rotate(Math.PI);
aTransform.translate(0.5, 0.5);
half.matrixTransform(aTransform);
res.appendPath(half);
}
else {
half = SnakeWipePath.prototype.calcSnake.call(this, nT / 2.0 );
aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.rotate(Math.PI/2);
aTransform = aTransform.translate(0.5, 0.5);
half.matrixTransform(aTransform);
res.appendPath(flipOnYAxis(half));
res.appendPath(this.bOpposite ? flipOnXAxis(half) : half);
}

return this.flipOnYAxis ? flipOnYAxis(res) : res;
}

function SpiralWipePath(nElements, bFlipOnYAxis) {
this.nElements    = nElements;
this.sqrtElements = Math.floor(Math.sqrt(nElements));
this.bFlipOnYAxis = bFlipOnYAxis;
}

SpiralWipePath.prototype.calcNegSpiral = function( nT ) {
var area  = nT * this.nElements;
var e     = (Math.sqrt(area) / 2.0);
var edge  = Math.floor(e) * 2;

var aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
var edge_ = pruneScaleValue(edge / this.sqrtElements);

aTransform = aTransform.scale(edge_, edge_);
aTransform = aTransform.translate(0.5, 0.5);
var poly = createUnitSquarePath();
poly.matrixTransform(aTransform);
var res = poly.cloneNode(true);

if(1.0 - nT != 0) {
var edge1 = edge + 1;
var len   = Math.floor( (e - edge/2) * edge1 * 4);
var w     = Math.PI / 2;

while(len > 0) {
var alen = Math.min(len, edge1);
len -= alen;
poly = createUnitSquarePath();
aTransform = SVGIdentityMatrix.scale(
pruneScaleValue( alen / this.sqrtElements ),
pruneScaleValue( 1.0 / this.sqrtElements ));
aTransform = aTransform.translate(
- pruneScaleValue( (edge / 2) / this.sqrtElements ),
pruneScaleValue( (edge / 2) / this.sqrtElements ));
aTransform = aTransform.rotate( w );
w -= Math.PI / 2;
aTransform = aTransform.translate(0.5, 0.5);
poly.matrixTransform(aTransform);
res.appendPath(poly);
}
}

return res;
}

SpiralWipePath.prototype.perform = function( nT ) {
var res         = createUnitSquarePath();
var innerSpiral = this.calcNegSpiral( 1.0 - nT );
innerSpiral.changeOrientation();
res.appendPath(innerSpiral);

return this.bFlipOnYAxis ? flipOnYAxis(res) : res;
}

function BoxSnakesWipePath(nElements, bFourBox) {
SpiralWipePath.call(this, nElements);
this.bFourBox = bFourBox;
}

BoxSnakesWipePath.prototype = Object.create(SpiralWipePath);

BoxSnakesWipePath.prototype.perform = function( nT ) {
var res = createUnitSquarePath(), aTransform;
var innerSpiral = SpiralWipePath.prototype.calcNegSpiral.call(this, 1.0 - nT);
innerSpiral.changeOrientation();

if(this.bFourBox) {
aTransform = SVGIdentityMatrix.scale(0.5, 0.5);
innerSpiral.matrixTransform(aTransform);
res.appendPath(innerSpiral);
res.appendPath(flipOnXAxis(innerSpiral));
innerSpiral = flipOnYAxis(innerSpiral);
res.appendPath(innerSpiral);
res.appendPath(flipOnXAxis(innerSpiral));
}
else {
aTransform = SVGIdentityMatrix.scale(1.0, 0.5);
innerSpiral.matrixTransform(aTransform);
res.appendPath(innerSpiral);
res.appendPath(flipOnXAxis(innerSpiral));
}
return this.bFlipOnYAxis ? flipOnYAxis(res) : res;
}

function VeeWipePath() { }

VeeWipePath.prototype.perform = function( nT ) {
const d = pruneScaleValue(2.0 * nT);
var polyPath = 'M ' + 0.0 + ' ' + -1.0 + ' ';
polyPath += 'L ' + 0.0 + ' ' + (d - 1.0) + ' ';
polyPath += 'L ' + 0.5 + ' ' + d + ' ';
polyPath += 'L ' + 1.0 + ' ' + (d - 1.0) + ' ';
polyPath += 'L ' + 1.0 + ' ' + -1.0 + ' ';
polyPath += 'L ' + 0.0 + ' ' + -1.0 + ' ';

var aPolyPolyPath = document.createElementNS( NSS['svg'], 'path');
aPolyPolyPath.setAttribute('d', polyPath);
return aPolyPolyPath;
}


function AnimatedSlide( aMetaSlide )
{
if( !aMetaSlide )
{
log( 'AnimatedSlide constructor: meta slide is not valid' );
}

this.aMetaSlide = aMetaSlide;
this.aSlideElement = this.aMetaSlide.slideElement;
this.sSlideId = this.aMetaSlide.slideId;

this.aUsedAttributeSet = [];

this.aClipPathElement = null;
this.aClipPathContent = null;
this.bIsClipped = false;
}

AnimatedSlide.prototype.show = function()
{
this.aMetaSlide.show();
};

AnimatedSlide.prototype.hide = function()
{
this.aMetaSlide.hide();
};

AnimatedSlide.prototype.notifyUsedAttribute = function( sName )
{
if( sName == 'clip-path' )
{
this.initClipPath();
this.bIsClipped = true;
}
else
{
this.aUsedAttributeSet.push( sName );
}
};

AnimatedSlide.prototype.reset = function()
{
if( this.bIsClipped )
{
this.cleanClipPath();
this.bIsClipped = false;
}

var i;
for( i = 0; i < this.aUsedAttributeSet.length; ++i )
{
var sAttrName = this.aUsedAttributeSet[i];
this.aSlideElement.removeAttribute( sAttrName );
}
this.aUsedAttributeSet = [];
};

AnimatedSlide.prototype.initClipPath = function()
{
this.aClipPathElement = document.createElementNS( NSS['svg'], 'clipPath' );

var sId = 'clip-path-' + this.sSlideId;
this.aClipPathElement.setAttribute( 'id', sId );
this.aClipPathElement.setAttribute( 'clipPathUnits', 'userSpaceOnUse' );

this.aClipPathContent = document.createElementNS( NSS['svg'], 'path' );
var sPathData = 'M 0 0 h ' + WIDTH + ' v ' + HEIGHT + ' h -' + WIDTH + ' z';
this.aClipPathContent.setAttribute( 'd', sPathData );
this.aClipPathElement.appendChild( this.aClipPathContent );

var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.appendChild( this.aClipPathElement );

var sRef = 'url(#' + sId + ')';
this.aSlideElement.parentNode.setAttribute( 'clip-path', sRef );
};

AnimatedSlide.prototype.cleanClipPath = function()
{
this.aSlideElement.parentNode.removeAttribute( 'clip-path' );

if( this.aClipPathElement )
{
var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.removeChild( this.aClipPathElement );
this.aClipPathElement = null;
this.aClipPathContent = null;
}
};

AnimatedSlide.prototype.insertBefore = function( aElement )
{
if( aElement )
{
this.aSlideElement.parentNode.insertBefore( aElement, this.aSlideElement );
}
};

AnimatedSlide.prototype.appendElement = function( aElement )
{
if( aElement )
{
this.aSlideElement.parentNode.appendChild( aElement );
}
};

AnimatedSlide.prototype.removeElement = function( aElement )
{
if( aElement )
{
this.aSlideElement.parentNode.removeChild( aElement );
}
};

AnimatedSlide.prototype.getWidth = function()
{
return WIDTH;
};

AnimatedSlide.prototype.getHeight = function()
{
return HEIGHT;
};

AnimatedSlide.prototype.setOpacity = function( nValue )
{
this.aSlideElement.setAttribute( 'opacity', nValue );
};

AnimatedSlide.prototype.translate = function( nDx, nDy )
{
var sTransformAttr = 'translate(' + nDx + ',' + nDy + ')';
this.aSlideElement.setAttribute( 'transform', sTransformAttr );
};

AnimatedSlide.prototype.setClipPath = function( aClipPathContent )
{
if( this.aClipPathContent )
{
var sPathData = aClipPathContent.getAttribute( 'd' );
this.aClipPathContent.setAttribute( 'd', sPathData );
}
};


function AnimatedElement( aElement )
{
if( !aElement )
{
log( 'AnimatedElement constructor: element is not valid' );
}

this.aSlideShowContext = null;

this.aBaseElement = aElement.cloneNode( true );
this.aActiveElement = aElement;
this.sElementId = this.aActiveElement.getAttribute( 'id' );

this.aBaseBBox = this.aActiveElement.getBBox();
this.nBaseCenterX = this.aBaseBBox.x + this.aBaseBBox.width / 2;
this.nBaseCenterY = this.aBaseBBox.y + this.aBaseBBox.height / 2;


this.aClipPathElement = null;
this.aClipPathContent = null;

this.aPreviousElement = null;
this.aStateSet = {};

this.eAdditiveMode = ADDITIVE_MODE_REPLACE;
this.bIsUpdated = true;

this.aTMatrix = document.documentElement.createSVGMatrix();
this.aCTM = document.documentElement.createSVGMatrix();
this.aICTM = document.documentElement.createSVGMatrix();

this.initElement();
}

AnimatedElement.prototype.initElement = function()
{
this.nCenterX = this.nBaseCenterX;
this.nCenterY = this.nBaseCenterY;
this.nScaleFactorX = 1.0;
this.nScaleFactorY = 1.0;
this.nRotationAngle = 0.0;

this.aActiveElement.setAttribute( 'transform', makeMatrixString( 1, 0, 0, 1, 0, 0 ) );
};

AnimatedElement.prototype.initClipPath = function()
{
this.aClipPathElement = document.createElementNS( NSS['svg'], 'clipPath' );

var sId = 'clip-path-' + this.sElementId;
this.aClipPathElement.setAttribute( 'id', sId );
this.aClipPathElement.setAttribute( 'clipPathUnits', 'userSpaceOnUse' );

this.aClipPathContent = document.createElementNS( NSS['svg'], 'path' );
this.aClippingBBox = this.getBBoxWithStroke();
var nWidth = this.aClippingBBox.width;
var nHeight = this.aClippingBBox.height;
var sPathData = 'M ' + this.aClippingBBox.x + ' ' + this.aClippingBBox.y +
' h ' + nWidth + ' v ' + nHeight + ' h -' + nWidth + ' z';
this.aClipPathContent.setAttribute( 'd', sPathData );
this.aClipPathElement.appendChild( this.aClipPathContent );

var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.appendChild( this.aClipPathElement );

var sRef = 'url(#' + sId + ')';
this.aActiveElement.setAttribute( 'clip-path', sRef );
};

AnimatedElement.prototype.cleanClipPath = function()
{
this.aActiveElement.removeAttribute( 'clip-path' );

if( this.aClipPathElement )
{
var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.removeChild( this.aClipPathElement );
this.aClipPathElement = null;
this.aClipPathContent = null;
}
};

AnimatedElement.prototype.getId = function()
{
return this.aActiveElement.getAttribute( 'id' );
};

AnimatedElement.prototype.getAdditiveMode = function()
{
return this.eAdditiveMode;
};

AnimatedElement.prototype.setAdditiveMode = function( eAdditiveMode )
{
this.eAdditiveMode = eAdditiveMode;
};

AnimatedElement.prototype.setToElement = function( aElement )
{
if( !aElement )
{
log( 'AnimatedElement(' + this.getId() + ').setToElement: element is not valid' );
return false;
}

var aClone = aElement.cloneNode( true );
this.aPreviousElement = this.aActiveElement.parentNode.replaceChild( aClone, this.aActiveElement );
this.aActiveElement = aClone;

return true;
};

AnimatedElement.prototype.notifySlideStart = function( aSlideShowContext )
{
if( !aSlideShowContext )
{
log( 'AnimatedElement.notifySlideStart: slideshow context is not valid' );
}
this.aSlideShowContext = aSlideShowContext;

var aClone = this.aBaseElement.cloneNode( true );
this.aActiveElement.parentNode.replaceChild( aClone, this.aActiveElement );
this.aActiveElement = aClone;

this.initElement();
this.DBG( '.notifySlideStart invoked' );
};

AnimatedElement.prototype.notifySlideEnd = function()
{
};

AnimatedElement.prototype.notifyAnimationStart = function()
{
};

AnimatedElement.prototype.notifyAnimationEnd = function()
{
};

AnimatedElement.prototype.notifyNextEffectStart = function( /*nEffectIndex*/ )
{
};

AnimatedElement.prototype.saveState = function( nAnimationNodeId )
{
ANIMDBG.print( 'AnimatedElement(' + this.getId() + ').saveState(' + nAnimationNodeId +')' );
if( !this.aStateSet[ nAnimationNodeId ] )
{
this.aStateSet[ nAnimationNodeId ] = {};
}
var aState = this.aStateSet[ nAnimationNodeId ];
aState.aElement = this.aActiveElement.cloneNode( true );
aState.nCenterX = this.nCenterX;
aState.nCenterY = this.nCenterY;
aState.nScaleFactorX = this.nScaleFactorX;
aState.nScaleFactorY = this.nScaleFactorY;
aState.nRotationAngle = this.nRotationAngle;

};

AnimatedElement.prototype.restoreState = function( nAnimationNodeId )
{
if( !this.aStateSet[ nAnimationNodeId ] )
{
log( 'AnimatedElement(' + this.getId() + ').restoreState: state '
+nAnimationNodeId  + ' is not valid' );
return false;
}

ANIMDBG.print( 'AnimatedElement(' + this.getId() + ').restoreState(' + nAnimationNodeId +')' );
var aState = this.aStateSet[ nAnimationNodeId ];
var bRet = this.setToElement( aState.aElement );
if( bRet )
{
this.nCenterX = aState.nCenterX;
this.nCenterY = aState.nCenterY;
this.nScaleFactorX = aState.nScaleFactorX;
this.nScaleFactorY = aState.nScaleFactorY;
this.nRotationAngle = aState.nRotationAngle;
}
return bRet;
};

AnimatedElement.prototype.getBaseBBox = function()
{
return this.aBaseBBox;
};

AnimatedElement.prototype.getBaseCenterX = function()
{
return this.nBaseCenterX;
};

AnimatedElement.prototype.getBaseCenterY = function()
{
return this.nBaseCenterY;
};

AnimatedElement.prototype.getBBox = function()
{
return this.aActiveElement.parentNode.getBBox();
};

AnimatedElement.prototype.getBBoxWithStroke = function()
{
var aBBox = this.aActiveElement.parentNode.getBBox();

var aChildrenSet = this.aActiveElement.childNodes;

var sStroke, sStrokeWidth;
var nStrokeWidth = 0;
var i;
for( i = 0; i < aChildrenSet.length; ++i )
{
if( ! aChildrenSet[i].getAttribute  )
continue;

sStroke = aChildrenSet[i].getAttribute( 'stroke' );
if( sStroke && sStroke != 'none' )
{
sStrokeWidth = aChildrenSet[i].getAttribute( 'stroke-width' );
var nSW = parseFloat( sStrokeWidth );
if( nSW > nStrokeWidth )
nStrokeWidth = nSW;
}
}

if( nStrokeWidth == 0 )
{
sStrokeWidth = ROOT_NODE.getAttribute( 'stroke-width' );
nStrokeWidth = parseFloat( sStrokeWidth );
}
if( nStrokeWidth != 0 )
{
nStrokeWidth *= 1.1;
var nHalfStrokeWidth = nStrokeWidth / 2;
var nDoubleStrokeWidth = nStrokeWidth * 2;

var aEBBox = document.documentElement.createSVGRect();
aEBBox.x = aBBox.x - nHalfStrokeWidth;
aEBBox.y = aBBox.y - nHalfStrokeWidth;
aEBBox.width = aBBox.width + nDoubleStrokeWidth;
aEBBox.height = aBBox.height + nDoubleStrokeWidth;
aBBox = aEBBox;
}
return aBBox;
};

AnimatedElement.prototype.setClipPath = function( aClipPathContent )
{
if( this.aClipPathContent )
{
var aTranslation = SVGIdentityMatrix.translate( this.aClippingBBox.x,
this.aClippingBBox.y);
aClipPathContent.matrixTransform( aTranslation );
var sPathData = aClipPathContent.getAttribute( 'd' );
this.aClipPathContent.setAttribute( 'd', sPathData );
}
};


AnimatedElement.prototype.getX = function()
{
return this.nCenterX;
};

AnimatedElement.prototype.getY = function()
{
return this.nCenterY;
};

AnimatedElement.prototype.getWidth = function()
{
return this.nScaleFactorX * this.getBaseBBox().width;
};

AnimatedElement.prototype.getHeight = function()
{
return this.nScaleFactorY * this.getBaseBBox().height;
};

AnimatedElement.prototype.updateTransformAttribute = function()
{
this.aTransformAttrList = this.aActiveElement.transform.baseVal;
this.aTransformAttr = this.aTransformAttrList.getItem( 0 );
this.aTransformAttr.setMatrix( this.aTMatrix );
};

AnimatedElement.prototype.setX = function( nNewCenterX )
{
if( nNewCenterX === this.nCenterX ) return;

this.aTransformAttrList = this.aActiveElement.transform.baseVal;
this.aTransformAttr = this.aTransformAttrList.getItem( 0 );
this.aTMatrix = this.aTransformAttr.matrix.translate( nNewCenterX - this.nCenterX, 0 );
this.aTransformAttr.setMatrix( this.aTMatrix );
this.nCenterX = nNewCenterX;
};

AnimatedElement.prototype.setY = function( nNewCenterY )
{
if( nNewCenterY === this.nCenterY ) return;

this.aTransformAttrList = this.aActiveElement.transform.baseVal;
this.aTransformAttr = this.aTransformAttrList.getItem( 0 );
this.aTMatrix = this.aTransformAttr.matrix.translate( 0, nNewCenterY - this.nCenterY );
this.aTransformAttr.setMatrix( this.aTMatrix );
this.nCenterY = nNewCenterY;
};

AnimatedElement.prototype.setWidth = function( nNewWidth )
{
ANIMDBG.print( 'AnimatedElement.setWidth: nNewWidth = ' + nNewWidth );
if( nNewWidth < 0 )
{
log('AnimatedElement(' + this.getId() + ').setWidth: negative height!');
nNewWidth = 0;
}

var nBaseWidth = this.getBaseBBox().width;
var nScaleFactorX = nNewWidth / nBaseWidth;

if( nScaleFactorX < 1e-5 ) nScaleFactorX = 1e-5;
if( nScaleFactorX == this.nScaleFactorX ) return;

this.aTMatrix = document.documentElement.createSVGMatrix()
.translate( this.nCenterX, this.nCenterY )
.rotate(this.nRotationAngle)
.scaleNonUniform( nScaleFactorX, this.nScaleFactorY )
.translate( -this.nBaseCenterX, -this.nBaseCenterY );
this.updateTransformAttribute();

this.nScaleFactorX = nScaleFactorX;
};

AnimatedElement.prototype.setHeight = function( nNewHeight )
{
ANIMDBG.print( 'AnimatedElement.setWidth: nNewHeight = ' + nNewHeight );
if( nNewHeight < 0 )
{
log('AnimatedElement(' + this.getId() + ').setWidth: negative height!');
nNewHeight = 0;
}

var nBaseHeight = this.getBaseBBox().height;
var nScaleFactorY = nNewHeight / nBaseHeight;

if( nScaleFactorY < 1e-5 ) nScaleFactorY = 1e-5;
if( nScaleFactorY == this.nScaleFactorY ) return;

this.aTMatrix = document.documentElement.createSVGMatrix()
.translate( this.nCenterX, this.nCenterY )
.rotate(this.nRotationAngle)
.scaleNonUniform( this.nScaleFactorX, nScaleFactorY )
.translate( -this.nBaseCenterX, -this.nBaseCenterY );
this.updateTransformAttribute();

this.nScaleFactorY = nScaleFactorY;
};

AnimatedElement.prototype.getOpacity = function()
{
return this.aActiveElement.getAttribute( 'opacity' );
};

AnimatedElement.prototype.setOpacity = function( nValue )
{
this.aActiveElement.setAttribute( 'opacity', nValue );
};

AnimatedElement.prototype.getRotationAngle = function()
{
return this.nRotationAngle;
};

AnimatedElement.prototype.setRotationAngle = function( nNewRotAngle )
{
this.aTMatrix = document.documentElement.createSVGMatrix()
.translate( this.nCenterX, this.nCenterY )
.rotate(nNewRotAngle)
.scaleNonUniform( this.nScaleFactorX, this.nScaleFactorY )
.translate( -this.nBaseCenterX, -this.nBaseCenterY );
this.updateTransformAttribute();

this.nRotationAngle = nNewRotAngle;
};

AnimatedElement.prototype.getVisibility = function()
{

var sVisibilityValue = this.aActiveElement.getAttribute( 'visibility' );
if( !sVisibilityValue || ( sVisibilityValue === 'inherit' ) )
return 'visible'; // TODO: look for parent visibility!
else
return sVisibilityValue;
};

AnimatedElement.prototype.setVisibility = function( sValue )
{
if( sValue == 'visible' )
sValue = 'inherit';
this.aActiveElement.setAttribute( 'visibility', sValue );
};

AnimatedElement.prototype.getStrokeStyle = function()
{
return 'solid';
};

AnimatedElement.prototype.setStrokeStyle = function( sValue )
{
ANIMDBG.print( 'AnimatedElement.setStrokeStyle(' + sValue + ')' );
};

AnimatedElement.prototype.getFillStyle = function()
{
return 'solid';
};

AnimatedElement.prototype.setFillStyle = function( sValue )
{
ANIMDBG.print( 'AnimatedElement.setFillStyle(' + sValue + ')' );
};

AnimatedElement.prototype.getFillColor = function()
{
var aChildSet = getElementChildren( this.aActiveElement );
var sFillColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sFillColorValue = aChildSet[i].getAttribute( 'fill' );
if( sFillColorValue && ( sFillColorValue !== 'none' ) )
break;
}

return colorParser( sFillColorValue );
};

AnimatedElement.prototype.setFillColor = function( aRGBValue )
{
assert( aRGBValue instanceof RGBColor,
'AnimatedElement.setFillColor: value argument is not an instance of RGBColor' );

var sValue = aRGBValue.toString( true /* clamped values */ );
var aChildSet = getElementChildren( this.aActiveElement );

var sFillColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sFillColorValue = aChildSet[i].getAttribute( 'fill' );
if( sFillColorValue && ( sFillColorValue !== 'none' ) )
{
aChildSet[i].setAttribute( 'fill', sValue );
}
}
};

AnimatedElement.prototype.getStrokeColor = function()
{
var aChildSet = getElementChildren( this.aActiveElement );
var sStrokeColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sStrokeColorValue = aChildSet[i].getAttribute( 'stroke' );
if( sStrokeColorValue && ( sStrokeColorValue !== 'none' ) )
break;
}

return colorParser( sStrokeColorValue );
};

AnimatedElement.prototype.setStrokeColor = function( aRGBValue )
{
assert( aRGBValue instanceof RGBColor,
'AnimatedElement.setFillColor: value argument is not an instance of RGBColor' );

var sValue = aRGBValue.toString( true /* clamped values */ );
var aChildSet = getElementChildren( this.aActiveElement );

var sStrokeColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sStrokeColorValue = aChildSet[i].getAttribute( 'stroke' );
if( sStrokeColorValue && ( sStrokeColorValue !== 'none' ) )
{
aChildSet[i].setAttribute( 'stroke', sValue );
}
}
};

AnimatedElement.prototype.getFontColor = function()
{
return new RGBColor( 0, 0, 0 );
};

AnimatedElement.prototype.setFontColor = function( sValue )
{
ANIMDBG.print( 'AnimatedElement.setFontColor(' + sValue + ')' );
};

AnimatedElement.prototype.DBG = function( sMessage, nTime )
{
aAnimatedElementDebugPrinter.print( 'AnimatedElement(' + this.getId() + ')' + sMessage, nTime );
};


function AnimatedTextElement( aElement, aEventMultiplexer )
{
var theDocument = document;

var sTextType = aElement.getAttribute( 'class' );
var bIsListItem = ( sTextType === 'ListItem' );
if( ( sTextType !== 'TextParagraph' ) && !bIsListItem )
{
log( 'AnimatedTextElement: passed element is not a paragraph.' );
return;
}
var aTextShapeElement = aElement.parentNode;
sTextType = aTextShapeElement.getAttribute( 'class' );
if( sTextType !== 'TextShape' )
{
log( 'AnimatedTextElement: element parent is not a text shape.' );
return;
}
var aTextShapeGroup = aTextShapeElement.parentNode;
var aAnimatedElementGroup = getElementByClassName( aTextShapeGroup, 'AnimatedElements' );
if( !aAnimatedElementGroup )
{
aAnimatedElementGroup = theDocument.createElementNS( NSS['svg'], 'g' );
aAnimatedElementGroup.setAttribute( 'class', 'AnimatedElements' );
aTextShapeGroup.appendChild( aAnimatedElementGroup );
}

var aAnimatableElement = theDocument.createElementNS( NSS['svg'], 'g' );
var aTextElement = theDocument.createElementNS( NSS['svg'], 'text' );
var aParagraphElement = aElement.cloneNode( true );

this.aGraphicGroupElement = theDocument.createElementNS( NSS['svg'], 'g' );
this.aGraphicGroupElement.setAttribute( 'class', 'GraphicGroup' );

var aBulletCharClone = null;
var aBulletCharElem = null;
var bIsBulletCharStyle =
( aElement.getAttributeNS( NSS['ooo'], aOOOAttrListItemNumberingType ) === 'bullet-style' );
if( bIsBulletCharStyle )
{
var aBulletCharGroupElem = getElementByClassName( aTextShapeGroup, 'BulletChars' );
if( aBulletCharGroupElem )
{
var aBulletPlaceholderElem = getElementByClassName( aElement, 'BulletPlaceholder' );
if( aBulletPlaceholderElem )
{
var sId = aBulletPlaceholderElem.getAttribute( 'id' );
sId = 'bullet-char(' + sId + ')';
aBulletCharElem = theDocument.getElementById( sId );
if( aBulletCharElem )
{
aBulletCharClone = aBulletCharElem.cloneNode( true );
}
else
{
log( 'AnimatedTextElement: ' + sId + ' not found.' );
}
}
else
{
log( 'AnimatedTextElement: no bullet placeholder found' );
}
}
else
{
log( 'AnimatedTextElement: no bullet char group found' );
}
}

var aBitmapElemSet = [];
var aBitmapCloneSet = [];
var aBitmapPlaceholderSet = getElementsByClassName( aElement, 'BitmapPlaceholder' );
var i;
if( aBitmapPlaceholderSet )
{
for( i = 0; i < aBitmapPlaceholderSet.length; ++i )
{
sId = aBitmapPlaceholderSet[i].getAttribute( 'id' );
var sBitmapChecksum = sId.substring( 'bitmap-placeholder'.length + 1, sId.length - 1 );
sId = 'embedded-bitmap(' + sBitmapChecksum + ')';
aBitmapElemSet[i] = theDocument.getElementById( sId );
if( aBitmapElemSet[i] )
{
aBitmapCloneSet[i] = aBitmapElemSet[i].cloneNode( true );
}
else
{
log( 'AnimatedTextElement: ' + sId + ' not found.' );
}
}
}


this.sParagraphId = sId = aParagraphElement.getAttribute( 'id' );
aParagraphElement.removeAttribute( 'id' );
aAnimatableElement.setAttribute( 'id', sId +'.a' );
if( aBulletCharClone )
aBulletCharClone.removeAttribute( 'id' );
for( i = 0; i < aBitmapCloneSet.length; ++i )
{
if( aBitmapCloneSet[i] )
aBitmapCloneSet[i].removeAttribute( 'id' );
}

var sVisibilityAttr = aElement.getAttribute( 'visibility' );
if( !sVisibilityAttr )
sVisibilityAttr = 'inherit';
aAnimatableElement.setAttribute( 'visibility', sVisibilityAttr );
aParagraphElement.setAttribute( 'visibility', 'inherit' );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
if( aBulletCharElem )
aBulletCharElem.setAttribute( 'visibility', 'hidden' );
for( i = 0; i < aBitmapCloneSet.length; ++i )
{
if( aBitmapElemSet[i] )
aBitmapElemSet[i].setAttribute( 'visibility', 'hidden' );
}


aTextElement.appendChild( aParagraphElement );
aAnimatableElement.appendChild( aTextElement );

if( aBulletCharClone )
this.aGraphicGroupElement.appendChild( aBulletCharClone );
for( i = 0; i < aBitmapCloneSet.length; ++i )
{
if( aBitmapCloneSet[i] )
this.aGraphicGroupElement.appendChild( aBitmapCloneSet[i] );
}
aAnimatableElement.appendChild( this.aGraphicGroupElement );
aAnimatedElementGroup.appendChild( aAnimatableElement );

this.aParentTextElement = aElement.parentNode;
this.aParagraphElement = aElement;
this.aAnimatedElementGroup = aAnimatedElementGroup;
this.nRunningAnimations = 0;

this.aHyperlinkIdSet = [];
var aHyperlinkElementSet = getElementsByClassName( this.aParagraphElement, 'UrlField' );
var sHyperlinkId;
for( i = 0; i < aHyperlinkElementSet.length; ++i )
{
sHyperlinkId = aHyperlinkElementSet[i].getAttribute( 'id' );
if( sHyperlinkId )
this.aHyperlinkIdSet.push( sHyperlinkId );
else
log( 'error: AnimatedTextElement constructor: hyperlink element has no id' );
}

AnimatedTextElement.superclass.constructor.call( this, aAnimatableElement, aEventMultiplexer );

}
extend( AnimatedTextElement, AnimatedElement );


AnimatedTextElement.prototype.setToElement = function( aElement )
{
var bRet = AnimatedTextElement.superclass.setToElement.call( this, aElement );
if( bRet )
{
this.aGraphicGroupElement = getElementByClassName( this.aActiveElement, 'GraphicGroup' );
}
return ( bRet && this.aGraphicGroupElement );
};

AnimatedTextElement.prototype.notifySlideStart = function( aSlideShowContext )
{
DBGLOG( 'AnimatedTextElement.notifySlideStart' );
AnimatedTextElement.superclass.notifySlideStart.call( this, aSlideShowContext );
this.aGraphicGroupElement = getElementByClassName( this.aActiveElement, 'GraphicGroup' );
this.restoreBaseTextParagraph();
};

AnimatedTextElement.prototype.notifySlideEnd = function()
{
DBGLOG( 'AnimatedTextElement.notifySlideEnd' );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
};

AnimatedTextElement.prototype.restoreBaseTextParagraph = function()
{
var aActiveParagraphElement = this.aActiveElement.firstElementChild.firstElementChild;
if( aActiveParagraphElement )
{
var sVisibilityAttr = this.aActiveElement.getAttribute( 'visibility' );
if( !sVisibilityAttr || ( sVisibilityAttr === 'visible' ) )
sVisibilityAttr = 'inherit';
if( sVisibilityAttr === 'inherit' )
this.aGraphicGroupElement.setAttribute( 'visibility', 'visible' );
else
this.aGraphicGroupElement.setAttribute( 'visibility', 'hidden' );

var aParagraphClone = aActiveParagraphElement.cloneNode( true );
aParagraphClone.setAttribute( 'id', this.sParagraphId );
aParagraphClone.setAttribute( 'visibility', sVisibilityAttr );
this.aParentTextElement.replaceChild( aParagraphClone, this.aParagraphElement );
this.aParagraphElement = aParagraphClone;


var aEventMultiplexer = this.aSlideShowContext.aEventMultiplexer;
var aHyperlinkIdSet = this.aHyperlinkIdSet;
var aHyperlinkElementSet = getElementsByClassName( this.aParagraphElement, 'UrlField' );
var i = 0;
for( ; i < aHyperlinkIdSet.length; ++i )
{
aEventMultiplexer.notifyElementChangedEvent( aHyperlinkIdSet[i], aHyperlinkElementSet[i] );
}
}
this.aActiveElement.setAttribute( 'visibility', 'hidden' );
};

AnimatedTextElement.prototype.notifyAnimationStart = function()
{
DBGLOG( 'AnimatedTextElement.notifyAnimationStart' );
if( this.nRunningAnimations === 0 )
{
var sVisibilityAttr = this.aParagraphElement.getAttribute( 'visibility' );
if( !sVisibilityAttr )
sVisibilityAttr = 'inherit';
this.aActiveElement.setAttribute( 'visibility', sVisibilityAttr );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
this.aParagraphElement.setAttribute( 'visibility', 'hidden' );
}
++this.nRunningAnimations;
};

AnimatedTextElement.prototype.notifyAnimationEnd = function()
{
DBGLOG( 'AnimatedTextElement.notifyAnimationEnd' );
--this.nRunningAnimations;
if( this.nRunningAnimations === 0 )
{
this.restoreBaseTextParagraph();
}
};

AnimatedTextElement.prototype.saveState = function( nAnimationNodeId )
{
if( this.nRunningAnimations === 0 )
{
var sVisibilityAttr = this.aParagraphElement.getAttribute( 'visibility' );
this.aActiveElement.setAttribute( 'visibility', sVisibilityAttr );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
}
AnimatedTextElement.superclass.saveState.call( this, nAnimationNodeId );
};

AnimatedTextElement.prototype.restoreState = function( nAnimationNodeId )
{
var bRet = AnimatedTextElement.superclass.restoreState.call( this, nAnimationNodeId );
if( bRet )
this.restoreBaseTextParagraph();
return bRet;
};


function SlideTransition( aAnimationsRootElement, aSlideId )
{
this.sSlideId = aSlideId;
this.bIsValid = false;
this.eTransitionType = undefined;
this.eTransitionSubType = undefined;
this.bReverseDirection = false;
this.eTransitionMode = TRANSITION_MODE_IN;
this.sFadeColor = null;
this.aDuration = null;
this.nMinFrameCount = undefined;

if( aAnimationsRootElement )
{
if( aAnimationsRootElement.firstElementChild &&
( aAnimationsRootElement.firstElementChild.getAttributeNS( NSS['smil'], 'begin' ) === (this.sSlideId + '.begin') ) )
{
var aTransitionFilterElement = aAnimationsRootElement.firstElementChild.firstElementChild;
if( aTransitionFilterElement && ( aTransitionFilterElement.localName === 'transitionFilter' ) )
{
this.aElement = aTransitionFilterElement;
this.parseElement();
}
aAnimationsRootElement.removeChild( aAnimationsRootElement.firstElementChild );
}
}
}

SlideTransition.prototype.createSlideTransition = function( aLeavingSlide, aEnteringSlide )
{
if( !this.isValid() )
return null;
if( this.eTransitionType == 0 )
return null;

if( !aEnteringSlide )
{
log( 'SlideTransition.createSlideTransition: invalid entering slide.' );
return null;
}

var aTransitionInfo = aTransitionInfoTable[this.eTransitionType][this.eTransitionSubType];
var eTransitionClass = aTransitionInfo['class'];

switch( eTransitionClass )
{
default:
case TRANSITION_INVALID:
log( 'SlideTransition.createSlideTransition: transition class: TRANSITION_INVALID' );
return null;

case TRANSITION_CLIP_POLYPOLYGON:
var aParametricPolyPolygon
= createClipPolyPolygon( this.eTransitionType, this.eTransitionSubType );
return new ClippedSlideChange( aLeavingSlide, aEnteringSlide, aParametricPolyPolygon,
aTransitionInfo, this.isDirectionForward() );

case TRANSITION_SPECIAL:
switch( this.eTransitionType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition class: TRANSITION_SPECIAL, ' +
'unknown transition type: ' + this.eTransitionType );
return null;

case PUSHWIPE_TRANSITION:
{
var aDirection = null;
switch( this.eTransitionSubType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition type: PUSHWIPE_TRANSITION, ' +
'unknown transition subtype: ' + this.eTransitionSubType );
return null;
case FROMTOP_TRANS_SUBTYPE:
aDirection = { x: 0.0, y: 1.0 };
break;
case FROMBOTTOM_TRANS_SUBTYPE:
aDirection = { x: 0.0, y: -1.0 };
break;
case FROMLEFT_TRANS_SUBTYPE:
aDirection = { x: 1.0, y: 0.0 };
break;
case FROMRIGHT_TRANS_SUBTYPE:
aDirection = { x: -1.0, y: 0.0 };
break;
}
return new MovingSlideChange( aLeavingSlide, aEnteringSlide, aDirection, aDirection );
}

case SLIDEWIPE_TRANSITION:
{
var aInDirection = null;
switch( this.eTransitionSubType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition type: SLIDEWIPE_TRANSITION, ' +
'unknown transition subtype: ' + this.eTransitionSubType );
return null;
case FROMTOP_TRANS_SUBTYPE:
aInDirection = { x: 0.0, y: 1.0 };
break;
case FROMBOTTOM_TRANS_SUBTYPE:
aInDirection = { x: 0.0, y: -1.0 };
break;
case FROMLEFT_TRANS_SUBTYPE:
aInDirection = { x: 1.0, y: 0.0 };
break;
case FROMRIGHT_TRANS_SUBTYPE:
aInDirection = { x: -1.0, y: 0.0 };
break;
}
var aNoDirection = { x: 0.0, y: 0.0 };
if( !this.bReverseDirection )
{
return new MovingSlideChange( aLeavingSlide, aEnteringSlide, aNoDirection, aInDirection );
}
else
{
return new MovingSlideChange( aLeavingSlide, aEnteringSlide, aInDirection, aNoDirection );
}
}

case FADE_TRANSITION:
switch( this.eTransitionSubType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition type: FADE_TRANSITION, ' +
'unknown transition subtype: ' + this.eTransitionSubType );
return null;
case CROSSFADE_TRANS_SUBTYPE:
return new FadingSlideChange( aLeavingSlide, aEnteringSlide );
case FADEOVERCOLOR_TRANS_SUBTYPE:
return new FadingOverColorSlideChange( aLeavingSlide, aEnteringSlide, this.getFadeColor() );
}
}
}
};

SlideTransition.prototype.parseElement = function()
{
this.bIsValid = true;
var aAnimElem = this.aElement;

this.eTransitionType = undefined;
var sTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'type' );
if( sTypeAttr && aTransitionTypeInMap[ sTypeAttr ] )
{
this.eTransitionType = aTransitionTypeInMap[ sTypeAttr ];
}
else
{
this.bIsValid = false;
log( 'SlideTransition.parseElement: transition type not valid: ' + sTypeAttr );
}

this.eTransitionSubType = undefined;
var sSubTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'subtype' );
if( sSubTypeAttr === null )
sSubTypeAttr = 'default';
if( sSubTypeAttr && ( aTransitionSubtypeInMap[ sSubTypeAttr ] !== undefined ) )
{
this.eTransitionSubType = aTransitionSubtypeInMap[ sSubTypeAttr ];
}
else
{
this.bIsValid = false;
log( 'SlideTransition.parseElement: transition subtype not valid: ' + sSubTypeAttr );
}

if( this.bIsValid && aTransitionInfoTable[this.eTransitionType][this.eTransitionSubType] === undefined )
{
this.bIsValid = false;
log( 'SlideTransition.parseElement: transition not valid: type: ' + sTypeAttr + ' subtype: ' + sSubTypeAttr );
}

this.bReverseDirection = false;
var sDirectionAttr = aAnimElem.getAttributeNS( NSS['smil'], 'direction' );
if( sDirectionAttr == 'reverse' )
this.bReverseDirection = true;

this.sFadeColor = null;
if( this.eTransitionType == FADE_TRANSITION &&
( this.eTransitionSubType == FADEFROMCOLOR_TRANS_SUBTYPE ||
this.eTransitionSubType == FADEOVERCOLOR_TRANS_SUBTYPE ||
this.eTransitionSubType == FADETOCOLOR_TRANS_SUBTYPE ) )
{
var sColorAttr = aAnimElem.getAttributeNS( NSS['smil'], 'fadeColor' );
if( sColorAttr )
this.sFadeColor = sColorAttr;
else
this.sFadeColor='#000000';
}


this.aDuration = null;
var sDurAttr = aAnimElem.getAttributeNS( NSS['smil'], 'dur' );
this.aDuration = new Duration( sDurAttr );
if( !this.aDuration.isSet() )
{
this.aDuration = new Duration( null ); // duration == 0.0
}

this.nMinFrameCount = ( this.getDuration().isValue() )
? ( this.getDuration().getValue() * MINIMUM_FRAMES_PER_SECONDS )
: MINIMUM_FRAMES_PER_SECONDS;
if( this.nMinFrameCount < 1.0 )
this.nMinFrameCount = 1;
else if( this.nMinFrameCount > MINIMUM_FRAMES_PER_SECONDS )
this.nMinFrameCount = MINIMUM_FRAMES_PER_SECONDS;

};

SlideTransition.prototype.isValid = function()
{
return this.bIsValid;
};

SlideTransition.prototype.getTransitionType = function()
{
return this.eTransitionType;
};

SlideTransition.prototype.getTransitionSubType = function()
{
return this.eTransitionSubType;
};

SlideTransition.prototype.getTransitionMode = function()
{
return this.eTransitionMode;
};

SlideTransition.prototype.getFadeColor = function()
{
return this.sFadeColor;
};

SlideTransition.prototype.isDirectionForward = function()
{
return !this.bReverseDirection;
};

SlideTransition.prototype.getDuration = function()
{
return this.aDuration;
};

SlideTransition.prototype.getMinFrameCount = function()
{
return this.nMinFrameCount;
};

SlideTransition.prototype.info = function()
{

var sInfo ='slide transition <' + this.sSlideId + '>: ';
sInfo += ';  type: ' + getKeyByValue(aTransitionTypeInMap, this.getTransitionType());

sInfo += ';  subtype: ' + getKeyByValue(aTransitionSubtypeInMap, this.getTransitionSubType());

if( !this.isDirectionForward() )
sInfo += ';  direction: reverse';

sInfo += '; mode: ' + aTransitionModeOutMap[ this.getTransitionMode() ];

if( this.getDuration() )
sInfo += '; duration: ' + this.getDuration().info();

return sInfo;
};


function SlideAnimations( aSlideShowContext )
{
this.aContext = new NodeContext( aSlideShowContext );
this.aAnimationNodeMap = {};
this.aAnimatedElementMap = {};
this.aSourceEventElementMap = {};
this.aNextEffectEventArray = new NextEffectEventArray();
this.aInteractiveAnimationSequenceMap = {};
this.aEventMultiplexer = new EventMultiplexer( aSlideShowContext.aTimerEventQueue );
this.aRootNode = null;
this.bElementsParsed = false;

this.aContext.aAnimationNodeMap = this.aAnimationNodeMap;
this.aContext.aAnimatedElementMap = this.aAnimatedElementMap;
this.aContext.aSourceEventElementMap = this.aSourceEventElementMap;

this.aEventMultiplexer.registerMouseClickHandler( document, 100 );
}


SlideAnimations.prototype.importAnimations = function( aAnimationRootElement )
{
if( !aAnimationRootElement )
return false;

this.aRootNode = createAnimationTree( aAnimationRootElement, this.aContext );

return ( this.aRootNode ? true : false );
};

SlideAnimations.prototype.parseElements = function()
{
if( !this.aRootNode )
return false;

if( !this.aRootNode.parseElement() )
return false;
else
this.bElementsParsed = true;
};

SlideAnimations.prototype.elementsParsed = function()
{
return this.bElementsParsed;
};

SlideAnimations.prototype.isFirstRun = function()
{
return this.aContext.bFirstRun;
};

SlideAnimations.prototype.isAnimated = function()
{
if( !this.bElementsParsed )
return false;

return this.aRootNode.hasPendingAnimation();
};

SlideAnimations.prototype.start = function()
{
if( !this.bElementsParsed )
return false;

this.chargeSourceEvents();
this.chargeInterAnimEvents();

aSlideShow.setSlideEvents( this.aNextEffectEventArray,
this.aInteractiveAnimationSequenceMap,
this.aEventMultiplexer );

if( this.aContext.bFirstRun == undefined )
this.aContext.bFirstRun = true;
else if( this.aContext.bFirstRun )
this.aContext.bFirstRun = false;

if( !this.aRootNode.init() )
return false;

return this.aRootNode.resolve();
};

SlideAnimations.prototype.end = function( bLeftEffectsSkipped )
{
if( !this.bElementsParsed )
return; // no animations there

this.aRootNode.deactivate();
this.aRootNode.end();

if( bLeftEffectsSkipped && this.isFirstRun() )
{
this.aContext.bFirstRun = undefined;
}
else if( this.isFirstRun() )
{
this.aContext.bFirstRun = false;
}

};

SlideAnimations.prototype.dispose = function()
{
if( this.aRootNode )
{
this.aRootNode.dispose();
}
};

SlideAnimations.prototype.clearNextEffectEvents = function()
{
ANIMDBG.print( 'SlideAnimations.clearNextEffectEvents: current slide: ' + nCurSlide );
this.aNextEffectEventArray.clear();
this.aContext.bFirstRun = undefined;
};

SlideAnimations.prototype.chargeSourceEvents = function()
{
for( var id in this.aSourceEventElementMap )
{
this.aSourceEventElementMap[id].charge();
}
};

SlideAnimations.prototype.chargeInterAnimEvents = function()
{
for( var id in this.aInteractiveAnimationSequenceMap )
{
this.aInteractiveAnimationSequenceMap[id].chargeEvents();
}
};


function Event()
{
this.nId = Event.getUniqueId();
}


Event.CURR_UNIQUE_ID = 0;

Event.getUniqueId = function()
{
++Event.CURR_UNIQUE_ID;
return Event.CURR_UNIQUE_ID;
};

Event.prototype.getId = function()
{
return this.nId;
};


function DelayEvent( aFunctor, nTimeout )
{
DelayEvent.superclass.constructor.call( this );

this.aFunctor = aFunctor;
this.nTimeout = nTimeout;
this.bWasFired = false;
}
extend( DelayEvent, Event );


DelayEvent.prototype.fire = function()
{
assert( this.isCharged(), 'DelayEvent.fire: assertion isCharged failed' );

this.bWasFired = true;
this.aFunctor();
return true;
};

DelayEvent.prototype.isCharged = function()
{
return !this.bWasFired;
};

DelayEvent.prototype.getActivationTime = function( nCurrentTime )
{
return ( this.nTimeout + nCurrentTime );
};

DelayEvent.prototype.dispose = function()
{
if( this.isCharged() )
this.bWasFired = true;
};

DelayEvent.prototype.charge = function()
{
if( !this.isCharged() )
this.bWasFired = false;
};


function WakeupEvent( aTimer, aActivityQueue )
{
WakeupEvent.superclass.constructor.call( this );

this.aTimer = new ElapsedTime( aTimer );
this.nNextTime = 0.0;
this.aActivity = null;
this.aActivityQueue = aActivityQueue;
}
extend( WakeupEvent, Event );


WakeupEvent.prototype.clone = function()
{
var aWakeupEvent = new WakeupEvent( this.aTimer.getTimeBase(), this.aActivityQueue );
aWakeupEvent.nNextTime = this.nNextTime;
aWakeupEvent.aActivity = this.aActivity;
return aWakeupEvent;
};

WakeupEvent.prototype.dispose = function()
{
this.aActivity = null;
};

WakeupEvent.prototype.fire = function()
{
if( !this.aActivity )
return false;

return this.aActivityQueue.addActivity( this.aActivity );
};

WakeupEvent.prototype.isCharged = function()
{
return true;
};

WakeupEvent.prototype.getActivationTime = function( nCurrentTime )
{
var nElapsedTime = this.aTimer.getElapsedTime();

return Math.max( nCurrentTime, nCurrentTime - nElapsedTime + this.nNextTime );
};

WakeupEvent.prototype.start = function()
{
this.aTimer.reset();
};

WakeupEvent.prototype.setNextTimeout = function( nNextTime )
{
this.nNextTime = nNextTime;
};

WakeupEvent.prototype.setActivity = function( aActivity )
{
this.aActivity = aActivity;
};


function makeEvent( aFunctor )
{
return new DelayEvent( aFunctor, 0.0 );
}


function makeDelay( aFunctor, nTimeout )
{
return new DelayEvent( aFunctor, nTimeout );
}


function registerEvent( nNodeId, aTiming, aEvent, aNodeContext )
{
var aSlideShowContext = aNodeContext.aContext;
var eTimingType = aTiming.getType();

registerEvent.DBG( aTiming );

if( eTimingType == OFFSET_TIMING )
{
aSlideShowContext.aTimerEventQueue.addEvent( aEvent );
}
else if ( aNodeContext.bFirstRun )
{
var aEventMultiplexer = aSlideShowContext.aEventMultiplexer;
if( !aEventMultiplexer )
{
log( 'registerEvent: event multiplexer not initialized' );
return;
}
var aNextEffectEventArray = aSlideShowContext.aNextEffectEventArray;
if( !aNextEffectEventArray )
{
log( 'registerEvent: next effect event array not initialized' );
return;
}
var aInteractiveAnimationSequenceMap =
aSlideShowContext.aInteractiveAnimationSequenceMap;
if( !aInteractiveAnimationSequenceMap )
{
log( 'registerEvent: interactive animation sequence map not initialized' );
return;
}

switch( eTimingType )
{
case EVENT_TIMING:
var eEventType = aTiming.getEventType();
var sEventBaseElemId = aTiming.getEventBaseElementId();
if( sEventBaseElemId )
{
var aEventBaseElem = document.getElementById( sEventBaseElemId );
if( !aEventBaseElem )
{
log( 'generateEvent: EVENT_TIMING: event base element not found: ' + sEventBaseElemId );
return;
}
var aSourceEventElement = aNodeContext.makeSourceEventElement( sEventBaseElemId, aEventBaseElem );

if( !aInteractiveAnimationSequenceMap[ nNodeId ] )
{
aInteractiveAnimationSequenceMap[ nNodeId ] = new InteractiveAnimationSequence(nNodeId);
}

var bEventRegistered = false;
switch( eEventType )
{
case EVENT_TRIGGER_ON_CLICK:
aEventMultiplexer.registerEvent( eEventType, aSourceEventElement.getId(), aEvent );
aEventMultiplexer.registerRewindedEffectHandler( aSourceEventElement.getId(),
bind2( aSourceEventElement.charge, aSourceEventElement ) );
bEventRegistered = true;
break;
default:
log( 'generateEvent: not handled event type: ' + eEventType );
}
if( bEventRegistered )
{
var aStartEvent = aInteractiveAnimationSequenceMap[ nNodeId ].getStartEvent();
var aEndEvent = aInteractiveAnimationSequenceMap[ nNodeId ].getEndEvent();
aEventMultiplexer.registerEvent( eEventType, aSourceEventElement.getId(), aStartEvent );
aEventMultiplexer.registerEvent( EVENT_TRIGGER_END_EVENT, nNodeId, aEndEvent );
aEventMultiplexer.registerRewindedEffectHandler(
nNodeId,
bind2( InteractiveAnimationSequence.prototype.chargeEvents,
aInteractiveAnimationSequenceMap[ nNodeId ] )
);
}
}
else  // no base event element present
{
switch( eEventType )
{
case EVENT_TRIGGER_ON_NEXT_EFFECT:
aNextEffectEventArray.appendEvent( aEvent );
break;
default:
log( 'generateEvent: not handled event type: ' + eEventType );
}
}
break;
case SYNCBASE_TIMING:
eEventType = aTiming.getEventType();
sEventBaseElemId = aTiming.getEventBaseElementId();
if( sEventBaseElemId )
{
var aAnimationNode = aNodeContext.aAnimationNodeMap[ sEventBaseElemId ];
if( !aAnimationNode )
{
log( 'generateEvent: SYNCBASE_TIMING: event base element not found: ' + sEventBaseElemId );
return;
}
aEventMultiplexer.registerEvent( eEventType, aAnimationNode.getId(), aEvent );
}
else
{
log( 'generateEvent: SYNCBASE_TIMING: event base element not specified' );
}
break;
default:
log( 'generateEvent: not handled timing type: ' + eTimingType );
}
}
}

registerEvent.DEBUG = aRegisterEventDebugPrinter.isEnabled();

registerEvent.DBG = function( aTiming, nTime )
{
if( registerEvent.DEBUG )
{
aRegisterEventDebugPrinter.print( 'registerEvent( timing: ' + aTiming.info() + ' )', nTime );
}
};


function SourceEventElement( sId, aElement, aEventMultiplexer )
{
this.sId = sId;
this.aElement = aElement;
this.aEventMultiplexer = aEventMultiplexer;

this.aEventMultiplexer.registerMouseClickHandler( this, 1000 );

this.bClickHandled = false;
this.bIsPointerOver = false;
this.aElement.addEventListener( 'mouseover', bind2( SourceEventElement.prototype.onMouseEnter, this), false );
this.aElement.addEventListener( 'mouseout', bind2( SourceEventElement.prototype.onMouseLeave, this), false );
}

SourceEventElement.prototype.getId = function()
{
return this.sId;
};

SourceEventElement.prototype.onMouseEnter = function()
{
this.bIsPointerOver = true;
this.setPointerCursor();
};

SourceEventElement.prototype.onMouseLeave = function()
{
this.bIsPointerOver = false;
this.setDefaultCursor();
};

SourceEventElement.prototype.charge = function()
{
this.bClickHandled = false;
this.setPointerCursor();
};

SourceEventElement.prototype.handleClick = function( /*aMouseEvent*/ )
{
if( !this.bIsPointerOver ) return false;

if( this.bClickHandled )
return false;

this.aEventMultiplexer.notifyEvent( EVENT_TRIGGER_ON_CLICK, this.getId() );
aSlideShow.update();
this.bClickHandled = true;
this.setDefaultCursor();
return true;
};

SourceEventElement.prototype.setPointerCursor = function()
{
if( this.bClickHandled )
return;

this.aElement.setAttribute( 'style', 'cursor: pointer' );
};

SourceEventElement.prototype.setDefaultCursor = function()
{
this.aElement.setAttribute( 'style', 'cursor: default' );
};


function HyperlinkElement( sId, aEventMultiplexer )
{
var aElement = document.getElementById( sId );
if( !aElement )
{
log( 'error: HyperlinkElement: no element with id: <' + sId + '> found' );
return;
}
if( !aEventMultiplexer )
{
log( 'AnimatedElement constructor: event multiplexer is not valid' );
}

this.sId = sId;
this.aElement = aElement;
this.aEventMultiplexer = aEventMultiplexer;
this.nTargetSlideIndex = undefined;

this.sURL = getNSAttribute( 'xlink', this.aElement, 'href' );
if( this.sURL )
{
if( this.sURL[0] === '#' )
{
if( this.sURL.substr(1, 5) === 'Slide' )
{
var sSlideIndex = this.sURL.split( ' ' )[1];
this.nTargetSlideIndex = parseInt( sSlideIndex ) - 1;
}
}

this.aEventMultiplexer.registerElementChangedHandler( this.sId, bind2( HyperlinkElement.prototype.onElementChanged, this) );
this.aEventMultiplexer.registerMouseClickHandler( this, 1100 );

this.bIsPointerOver = false;
this.mouseEnterHandler = bind2( HyperlinkElement.prototype.onMouseEnter, this);
this.mouseLeaveHandler = bind2( HyperlinkElement.prototype.onMouseLeave, this);
this.aElement.addEventListener( 'mouseover', this.mouseEnterHandler, false );
this.aElement.addEventListener( 'mouseout', this.mouseLeaveHandler, false );
}
else
{
log( 'warning: HyperlinkElement(' + this.sId + '): url is empty' );
}
}

HyperlinkElement.prototype.onElementChanged = function( aElement )
{
if( !aElement )
{
log( 'error: HyperlinkElement: passed element is not valid' );
return;
}

if( this.sURL )
{
this.aElement.removeEventListener( 'mouseover', this.mouseEnterHandler, false );
this.aElement.removeEventListener( 'mouseout', this.mouseLeaveHandler, false );
this.aElement = aElement;
this.aElement.addEventListener( 'mouseover', this.mouseEnterHandler, false );
this.aElement.addEventListener( 'mouseout', this.mouseLeaveHandler, false );
}
};

HyperlinkElement.prototype.onMouseEnter = function()
{
this.bIsPointerOver = true;
this.setPointerCursor();
};

HyperlinkElement.prototype.onMouseLeave = function()
{
this.bIsPointerOver = false;
this.setDefaultCursor();
};

HyperlinkElement.prototype.handleClick = function( )
{
if( !this.bIsPointerOver ) return false;

if( this.nTargetSlideIndex !== undefined )
{
aSlideShow.displaySlide( this.nTargetSlideIndex, true );
}
else
{
var aWindowObject = document.defaultView;
if( aWindowObject )
{
aWindowObject.open( this.sURL, this.sId );
}
else
{
log( 'error: HyperlinkElement.handleClick: invalid window object.' );
}
}

return true;
};

HyperlinkElement.prototype.setPointerCursor = function()
{
if( this.bClickHandled )
return;

this.aElement.setAttribute( 'style', 'cursor: pointer' );
};

HyperlinkElement.prototype.setDefaultCursor = function()
{
this.aElement.setAttribute( 'style', 'cursor: default' );
};


function InteractiveAnimationSequence( nId )
{
this.nId = nId;
this.bIsRunning = false;
this.aStartEvent = null;
this.aEndEvent = null;
}

InteractiveAnimationSequence.prototype.getId = function()
{
return this.nId;
};

InteractiveAnimationSequence.prototype.getStartEvent = function()
{
if( !this.aStartEvent )
{
this.aStartEvent =
makeEvent( bind2( InteractiveAnimationSequence.prototype.start, this ) );
}
return this.aStartEvent;
};

InteractiveAnimationSequence.prototype.getEndEvent = function()
{
if( !this.aEndEvent )
{
this.aEndEvent =
makeEvent( bind2( InteractiveAnimationSequence.prototype.end, this ) );
}
return this.aEndEvent;
};

InteractiveAnimationSequence.prototype.chargeEvents = function()
{
if( this.aStartEvent )      this.aStartEvent.charge();
if( this.aEndEvent )        this.aEndEvent.charge();
};

InteractiveAnimationSequence.prototype.isRunning = function()
{
return this.bIsRunning;
};

InteractiveAnimationSequence.prototype.start = function()
{
aSlideShow.notifyInteractiveAnimationSequenceStart( this.getId() );
this.bIsRunning = true;
};

InteractiveAnimationSequence.prototype.end = function()
{
aSlideShow.notifyInteractiveAnimationSequenceEnd( this.getId() );
this.bIsRunning = false;
};


function PriorityEntry( aValue, nPriority )
{
this.aValue = aValue;
this.nPriority = nPriority;
}

PriorityEntry.compare = function( aLhsEntry, aRhsEntry )
{
if ( aLhsEntry.nPriority < aRhsEntry.nPriority )
{
return -1;
}
else if (aLhsEntry.nPriority > aRhsEntry.nPriority)
{
return 1;
}
else
{
return 0;
}
};


function EventMultiplexer( aTimerEventQueue )
{
this.nId = EventMultiplexer.getUniqueId();
this.aTimerEventQueue = aTimerEventQueue;
this.aEventMap = {};
this.aAnimationsEndHandler = null;
this.aSkipEffectEndHandlerSet = [];
this.aMouseClickHandlerSet = new PriorityQueue( PriorityEntry.compare );
this.aSkipEffectEvent = null;
this.aRewindCurrentEffectEvent = null;
this.aRewindLastEffectEvent = null;
this.aSkipInteractiveEffectEventSet = {};
this.aRewindRunningInteractiveEffectEventSet = {};
this.aRewindEndedInteractiveEffectEventSet = {};
this.aRewindedEffectHandlerSet = {};
this.aElementChangedHandlerSet = {};
}

EventMultiplexer.CURR_UNIQUE_ID = 0;

EventMultiplexer.getUniqueId = function()
{
++EventMultiplexer.CURR_UNIQUE_ID;
return EventMultiplexer.CURR_UNIQUE_ID;
};

EventMultiplexer.prototype.getId = function()
{
return this.nId;
};

EventMultiplexer.prototype.hasRegisteredMouseClickHandlers = function()
{
return !this.aMouseClickHandlerSet.isEmpty();
};

EventMultiplexer.prototype.registerMouseClickHandler = function( aHandler, nPriority )
{
var aHandlerEntry = new PriorityEntry( aHandler, nPriority );
this.aMouseClickHandlerSet.push( aHandlerEntry );
};

EventMultiplexer.prototype.notifyMouseClick = function( aMouseEvent )
{
var aMouseClickHandlerSet = this.aMouseClickHandlerSet.clone();
while( !aMouseClickHandlerSet.isEmpty() )
{
var aHandlerEntry = aMouseClickHandlerSet.top();
aMouseClickHandlerSet.pop();
if( aHandlerEntry.aValue.handleClick( aMouseEvent ) )
break;
}
};

EventMultiplexer.prototype.registerEvent = function( eEventType, aNotifierId, aEvent )
{
this.DBG( 'registerEvent', eEventType, aNotifierId );
if( !this.aEventMap[ eEventType ] )
{
this.aEventMap[ eEventType ] = {};
}
if( !this.aEventMap[ eEventType ][ aNotifierId ] )
{
this.aEventMap[ eEventType ][ aNotifierId ] = [];
}
this.aEventMap[ eEventType ][ aNotifierId ].push( aEvent );
};


EventMultiplexer.prototype.notifyEvent = function( eEventType, aNotifierId )
{
this.DBG( 'notifyEvent', eEventType, aNotifierId );
if( this.aEventMap[ eEventType ] )
{
if( this.aEventMap[ eEventType ][ aNotifierId ] )
{
var aEventArray = this.aEventMap[ eEventType ][ aNotifierId ];
var nSize = aEventArray.length;
for( var i = 0; i < nSize; ++i )
{
this.aTimerEventQueue.addEvent( aEventArray[i] );
}
}
}
};

EventMultiplexer.prototype.registerAnimationsEndHandler = function( aHandler )
{
this.aAnimationsEndHandler = aHandler;
};

EventMultiplexer.prototype.notifyAnimationsEndEvent = function()
{
if( this.aAnimationsEndHandler )
this.aAnimationsEndHandler();
};

EventMultiplexer.prototype.registerNextEffectEndHandler = function( aHandler )
{
this.aSkipEffectEndHandlerSet.push( aHandler );
};

EventMultiplexer.prototype.notifyNextEffectEndEvent = function()
{
var nSize = this.aSkipEffectEndHandlerSet.length;
for( var i = 0; i < nSize; ++i )
{
(this.aSkipEffectEndHandlerSet[i])();
}
this.aSkipEffectEndHandlerSet = [];
};

EventMultiplexer.prototype.registerSkipEffectEvent = function( aEvent )
{
this.aSkipEffectEvent = aEvent;
};

EventMultiplexer.prototype.notifySkipEffectEvent = function()
{
if( this.aSkipEffectEvent )
{
this.aTimerEventQueue.addEvent( this.aSkipEffectEvent );
this.aSkipEffectEvent = null;
}
};

EventMultiplexer.prototype.registerRewindCurrentEffectEvent = function( aEvent )
{
this.aRewindCurrentEffectEvent = aEvent;
};

EventMultiplexer.prototype.notifyRewindCurrentEffectEvent = function()
{
if( this.aRewindCurrentEffectEvent )
{
this.aTimerEventQueue.addEvent( this.aRewindCurrentEffectEvent );
this.aRewindCurrentEffectEvent = null;
}
};

EventMultiplexer.prototype.registerRewindLastEffectEvent = function( aEvent )
{
this.aRewindLastEffectEvent = aEvent;
};

EventMultiplexer.prototype.notifyRewindLastEffectEvent = function()
{
if( this.aRewindLastEffectEvent )
{
this.aTimerEventQueue.addEvent( this.aRewindLastEffectEvent );
this.aRewindLastEffectEvent = null;
}
};

EventMultiplexer.prototype.registerSkipInteractiveEffectEvent = function( nNotifierId, aEvent )
{
this.aSkipInteractiveEffectEventSet[ nNotifierId ] = aEvent;
};

EventMultiplexer.prototype.notifySkipInteractiveEffectEvent = function( nNotifierId )
{
if( this.aSkipInteractiveEffectEventSet[ nNotifierId ] )
{
this.aTimerEventQueue.addEvent( this.aSkipInteractiveEffectEventSet[ nNotifierId ] );
}
};

EventMultiplexer.prototype.registerRewindRunningInteractiveEffectEvent = function( nNotifierId, aEvent )
{
this.aRewindRunningInteractiveEffectEventSet[ nNotifierId ] = aEvent;
};

EventMultiplexer.prototype.notifyRewindRunningInteractiveEffectEvent = function( nNotifierId )
{
if( this.aRewindRunningInteractiveEffectEventSet[ nNotifierId ] )
{
this.aTimerEventQueue.addEvent( this.aRewindRunningInteractiveEffectEventSet[ nNotifierId ] );
}
};

EventMultiplexer.prototype.registerRewindEndedInteractiveEffectEvent = function( nNotifierId, aEvent )
{
this.aRewindEndedInteractiveEffectEventSet[ nNotifierId ] = aEvent;
};

EventMultiplexer.prototype.notifyRewindEndedInteractiveEffectEvent = function( nNotifierId )
{
if( this.aRewindEndedInteractiveEffectEventSet[ nNotifierId ] )
{
this.aTimerEventQueue.addEvent( this.aRewindEndedInteractiveEffectEventSet[ nNotifierId ] );
}
};

EventMultiplexer.prototype.registerRewindedEffectHandler = function( aNotifierId, aHandler )
{
this.aRewindedEffectHandlerSet[ aNotifierId ] = aHandler;
};

EventMultiplexer.prototype.notifyRewindedEffectEvent = function( aNotifierId )
{
if( this.aRewindedEffectHandlerSet[ aNotifierId ] )
{
(this.aRewindedEffectHandlerSet[ aNotifierId ])();
}
};

EventMultiplexer.prototype.registerElementChangedHandler = function( aNotifierId, aHandler )
{
this.aElementChangedHandlerSet[ aNotifierId ] = aHandler;
};

EventMultiplexer.prototype.notifyElementChangedEvent = function( aNotifierId, aElement )
{
if( this.aElementChangedHandlerSet[ aNotifierId ] )
{
(this.aElementChangedHandlerSet[ aNotifierId ])( aElement );
}
};

EventMultiplexer.DEBUG = aEventMultiplexerDebugPrinter.isEnabled();

EventMultiplexer.prototype.DBG = function( sMethodName, eEventType, aNotifierId, nTime )
{
if( EventMultiplexer.DEBUG )
{
var sInfo = 'EventMultiplexer.' + sMethodName;
sInfo += '( type: ' + aEventTriggerOutMap[ eEventType ];
sInfo += ', notifier: ' + aNotifierId + ' )';
aEventMultiplexerDebugPrinter.print( sInfo, nTime );
}
};


var aInterpolatorHandler = {};

aInterpolatorHandler.getInterpolator = function( eCalcMode, eValueType, eValueSubtype )
{
var bHasSubtype = ( typeof( eValueSubtype ) === typeof( 0 ) );

if( !bHasSubtype && aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ] )
{
return aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ];
}
else if( bHasSubtype && aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ][ eValueSubtype ] )
{
return aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ][ eValueSubtype ];
}
else
{
log( 'aInterpolatorHandler.getInterpolator: not found any valid interpolator for calc mode '
+ aCalcModeOutMap[eCalcMode]  + ' and value type ' + aValueTypeOutMap[eValueType]  );
return null;
}
};

aInterpolatorHandler.aLerpFunctorMap = [];
aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_DISCRETE ] = [];
aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ] = [];


aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ NUMBER_PROPERTY ] =
function ( nFrom, nTo, nT )
{
return ( ( 1.0 - nT )* nFrom + nT * nTo );
};

aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ COLOR_PROPERTY ] = [];

aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ COLOR_PROPERTY ][ COLOR_SPACE_RGB ] =
function ( nFrom, nTo, nT )
{
return RGBColor.interpolate( nFrom, nTo, nT );
};

aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ COLOR_PROPERTY ][ COLOR_SPACE_HSL ] =
function ( bCCW  )
{
return  function ( nFrom, nTo, nT )
{
return HSLColor.interpolate( nFrom, nTo, nT, bCCW );
};
};


function KeyStopLerp( aValueList )
{
KeyStopLerp.validateInput( aValueList );

this.aKeyStopList = [];
this.nLastIndex = 0;
this.nKeyStopDistance = aValueList[1] - aValueList[0];
if( this.nKeyStopDistance <= 0 )
this.nKeyStopDistance = 0.001;

for( var i = 0; i < aValueList.length; ++i )
this.aKeyStopList.push( aValueList[i] );

this.nUpperBoundIndex = this.aKeyStopList.length - 2;
}


KeyStopLerp.validateInput = function( aValueList )
{
var nSize = aValueList.length;
assert( nSize > 1, 'KeyStopLerp.validateInput: key stop vector must have two entries or more' );

for( var i = 1; i < nSize; ++i )
{
if( aValueList[i-1] > aValueList[i] )
log( 'KeyStopLerp.validateInput: time vector is not sorted in ascending order!' );
}
};

KeyStopLerp.prototype.reset = function()
{
KeyStopLerp.validateInput( this.aKeyStopList );
this.nLastIndex = 0;
this.nKeyStopDistance = this.aKeyStopList[1] - this.aKeyStopList[0];
if( this.nKeyStopDistance <= 0 )
this.nKeyStopDistance = 0.001;

};

KeyStopLerp.prototype.lerp = function( nAlpha )
{
if( nAlpha > this.aKeyStopList[ this.nLastIndex + 1 ] )
{
do
{
var nIndex = this.nLastIndex + 1;
this.nLastIndex = clamp( nIndex, 0, this.nUpperBoundIndex );
this.nKeyStopDistance = this.aKeyStopList[ this.nLastIndex + 1 ] - this.aKeyStopList[ this.nLastIndex ];
}
while( ( this.nKeyStopDistance <= 0 ) && ( this.nLastIndex < this.nUpperBoundIndex ) );
}

var nRawLerp = ( nAlpha - this.aKeyStopList[ this.nLastIndex ] ) / this.nKeyStopDistance;

nRawLerp = clamp( nRawLerp, 0.0, 1.0 );

var aResult = {};
aResult.nIndex = this.nLastIndex;
aResult.nLerp = nRawLerp;

return aResult;
};

KeyStopLerp.prototype.lerp_ported = function( nAlpha )
{
if( ( this.aKeyStopList[ this.nLastIndex ] < nAlpha ) ||
( this.aKeyStopList[ this.nLastIndex + 1 ] >= nAlpha ) )
{
var i = 0;
for( ; i < this.aKeyStopList.length; ++i )
{
if( this.aKeyStopList[i] >= nAlpha )
break;
}
if( this.aKeyStopList[i] > nAlpha )
--i;
var nIndex = i - 1;
this.nLastIndex = clamp( nIndex, 0, this.aKeyStopList.length - 2 );
}

var nRawLerp = ( nAlpha - this.aKeyStopList[ this.nLastIndex ] ) /
( this.aKeyStopList[ this.nLastIndex+1 ] - this.aKeyStopList[ this.nLastIndex ] );

nRawLerp = clamp( nRawLerp, 0.0, 1.0 );

var aResult = {};
aResult.nIndex = this.nLastIndex;
aResult.nLerp = nRawLerp;

return aResult;
};


var aOperatorSetMap = [];

aOperatorSetMap[ NUMBER_PROPERTY ] = {};

aOperatorSetMap[ NUMBER_PROPERTY ].equal = function( a, b )
{
return ( a === b );
};

aOperatorSetMap[ NUMBER_PROPERTY ].add = function( a, b )
{
return ( a + b );
};

aOperatorSetMap[ NUMBER_PROPERTY ].scale = function( k, v )
{
return ( k * v );
};

aOperatorSetMap[ COLOR_PROPERTY ] = {};

aOperatorSetMap[ COLOR_PROPERTY ].equal = function( a, b )
{
return a.equal( b );
};

aOperatorSetMap[ COLOR_PROPERTY ].add = function( a, b )
{
var c = a.clone();
c.add( b );
return c;
};

aOperatorSetMap[ COLOR_PROPERTY ].scale = function( k, v )
{
var r = v.clone();
r.scale( k );
return r;
};

aOperatorSetMap[ ENUM_PROPERTY ] = {};

aOperatorSetMap[ ENUM_PROPERTY ].equal = function( a, b )
{
return ( a === b );
};

aOperatorSetMap[ ENUM_PROPERTY ].add = function( a )
{
return a;
};

aOperatorSetMap[ ENUM_PROPERTY ].scale = function( k, v )
{
return v;
};

aOperatorSetMap[ STRING_PROPERTY ] = aOperatorSetMap[ ENUM_PROPERTY ];

aOperatorSetMap[ BOOL_PROPERTY ] = aOperatorSetMap[ ENUM_PROPERTY ];


function ActivityParamSet()
{
this.aEndEvent = null;
this.aWakeupEvent = null;
this.aTimerEventQueue = null;
this.aActivityQueue = null;
this.nMinDuration = undefined;
this.nMinNumberOfFrames = MINIMUM_FRAMES_PER_SECONDS;
this.bAutoReverse = false;
this.nRepeatCount = 1.0;
this.nAccelerationFraction = 0.0;
this.nDecelerationFraction = 0.0;
this.nSlideWidth = undefined;
this.nSlideHeight = undefined;
this.aFormula = null;
this.aDiscreteTimes = [];
}


function AnimationActivity()
{
this.nId = AnimationActivity.getUniqueId();
}


AnimationActivity.CURR_UNIQUE_ID = 0;

AnimationActivity.getUniqueId = function()
{
++AnimationActivity.CURR_UNIQUE_ID;
return AnimationActivity.CURR_UNIQUE_ID;
};

AnimationActivity.prototype.getId = function()
{
return this.nId;
};


function SetActivity( aCommonParamSet, aAnimation, aToAttr  )
{
SetActivity.superclass.constructor.call( this );

this.aAnimation = aAnimation;
this.aTargetElement = null;
this.aEndEvent = aCommonParamSet.aEndEvent;
this.aTimerEventQueue = aCommonParamSet.aTimerEventQueue;
this.aToAttr = aToAttr;
this.bIsActive = true;
}
extend( SetActivity, AnimationActivity );


SetActivity.prototype.activate = function( aEndEvent )
{
this.aEndEvent = aEndEvent;
this.bIsActive = true;
};

SetActivity.prototype.dispose = function()
{
this.bIsActive = false;
if( this.aEndEvent && this.aEndEvent.isCharged() )
this.aEndEvent.dispose();
};

SetActivity.prototype.calcTimeLag = function()
{
return 0.0;
};

SetActivity.prototype.perform = function()
{
if( !this.isActive() )
return false;

this.bIsActive = false;

if( this.aAnimation && this.aTargetElement )
{
this.aAnimation.start( this.aTargetElement );
this.aAnimation.perform( this.aToAttr );
this.aAnimation.end();
}

if( this.aEndEvent )
this.aTimerEventQueue.addEvent( this.aEndEvent );

};

SetActivity.prototype.isActive = function()
{
return this.bIsActive;
};

SetActivity.prototype.dequeued = function()
{
};

SetActivity.prototype.end = function()
{
this.perform();
};

SetActivity.prototype.setTargets = function( aTargetElement )
{
assert( aTargetElement, 'SetActivity.setTargets: target element is not valid' );
this.aTargetElement = aTargetElement;
};


function ActivityBase( aCommonParamSet )
{
ActivityBase.superclass.constructor.call( this );

this.aTargetElement = null;
this.aEndEvent = aCommonParamSet.aEndEvent;
this.aTimerEventQueue = aCommonParamSet.aTimerEventQueue;
this.nRepeats = aCommonParamSet.nRepeatCount;
this.nAccelerationFraction = aCommonParamSet.nAccelerationFraction;
this.nDecelerationFraction = aCommonParamSet.nDecelerationFraction;
this.bAutoReverse = aCommonParamSet.bAutoReverse;

this.bFirstPerformCall = true;
this.bIsActive = true;

}
extend( ActivityBase, AnimationActivity );


ActivityBase.prototype.activate = function( aEndEvent )
{
this.aEndEvent = aEndEvent;
this.bFirstPerformCall = true;
this.bIsActive = true;
};

ActivityBase.prototype.dispose = function()
{
this.bIsActive = false;

if( this.aEndEvent )
this.aEndEvent.dispose();

this.aEndEvent = null;
};

ActivityBase.prototype.perform = function()
{
if( !this.isActive() )
return false; // no, early exit.

assert( !this.bFirstPerformCall, 'ActivityBase.perform: assertion (!this.FirstPerformCall) failed' );

return true;
};

ActivityBase.prototype.calcTimeLag = function()
{
if( this.isActive() && this.bFirstPerformCall )
{
this.bFirstPerformCall = false;

this.startAnimation();
}
return 0.0;
};

ActivityBase.prototype.isActive = function()
{
return this.bIsActive;
};

ActivityBase.prototype.isDisposed = function()
{
return ( !this.bIsActive && !this.aEndEvent );
};

ActivityBase.prototype.dequeued = function()
{
if( !this.isActive() )
this.endAnimation();
};

ActivityBase.prototype.setTargets = function( aTargetElement )
{
assert( aTargetElement, 'ActivityBase.setTargets: target element is not valid' );

this.aTargetElement = aTargetElement;
};

ActivityBase.prototype.startAnimation = function()
{
throw ( 'ActivityBase.startAnimation: abstract method invoked' );
};

ActivityBase.prototype.endAnimation = function()
{
throw ( 'ActivityBase.endAnimation: abstract method invoked' );
};

ActivityBase.prototype.endActivity = function()
{
this.bIsActive = false;

if( this.aEndEvent )
this.aTimerEventQueue.addEvent( this.aEndEvent );

this.aEndEvent = null;

};

ActivityBase.prototype.calcAcceleratedTime = function( nT )
{


nT = clamp( nT, 0.0, 1.0 );

if( ( this.nAccelerationFraction > 0.0 || this.nDecelerationFraction > 0.0 ) &&
( this.nAccelerationFraction + this.nDecelerationFraction <= 1.0 ) )
{
var nC = 1.0 - 0.5*this.nAccelerationFraction - 0.5*this.nDecelerationFraction;

var nTPrime = 0.0;

if( nT < this.nAccelerationFraction )
{
nTPrime += 0.5 * nT * nT / this.nAccelerationFraction; // partial first interval
}
else
{
nTPrime += 0.5 * this.nAccelerationFraction; // full first interval

if( nT <= ( 1.0 - this.nDecelerationFraction ) )
{
nTPrime += nT - this.nAccelerationFraction; // partial second interval
}
else
{
nTPrime += 1.0 - this.nAccelerationFraction - this.nDecelerationFraction; // full second interval

var nTRelative = nT - 1.0 + this.nDecelerationFraction;

nTPrime += nTRelative - 0.5*nTRelative*nTRelative / this.nDecelerationFraction;
}
}

nT = nTPrime / nC;

}
return nT;
};

ActivityBase.prototype.getEventQueue = function()
{
return this.aTimerEventQueue;
};

ActivityBase.prototype.getTargetElement = function()
{
return this.aTargetElement;
};

ActivityBase.prototype.isRepeatCountValid = function()
{
return !!this.nRepeats; // first ! convert to bool
};

ActivityBase.prototype.getRepeatCount = function()
{
return this.nRepeats;
};

ActivityBase.prototype.isAutoReverse = function()
{
return this.bAutoReverse;
};

ActivityBase.prototype.end = function()
{
if( !this.isActive() || this.isDisposed() )
return;

if( this.bFirstPerformCall )
{
this.bFirstPerformCall = false;
this.startAnimation();
}

this.performEnd();
this.endAnimation();
this.endActivity();
};

ActivityBase.prototype.performEnd = function()
{
throw ( 'ActivityBase.performEnd: abstract method invoked' );
};


function DiscreteActivityBase( aCommonParamSet )
{
DiscreteActivityBase.superclass.constructor.call( this, aCommonParamSet );

this.aOriginalWakeupEvent = aCommonParamSet.aWakeupEvent;
this.aOriginalWakeupEvent.setActivity( this );
this.aWakeupEvent = this.aOriginalWakeupEvent;
this.aWakeupEvent = aCommonParamSet.aWakeupEvent;
this.aDiscreteTimes = aCommonParamSet.aDiscreteTimes;
this.nMinSimpleDuration = aCommonParamSet.nMinDuration;
this.nCurrPerformCalls = 0;
}
extend( DiscreteActivityBase, ActivityBase );


DiscreteActivityBase.prototype.activate = function( aEndElement )
{
DiscreteActivityBase.superclass.activate.call( this, aEndElement );

this.aWakeupEvent = this.aOriginalWakeupEvent;
this.aWakeupEvent.setNextTimeout( 0 );
this.nCurrPerformCalls = 0;
};

DiscreteActivityBase.prototype.startAnimation = function()
{
this.aWakeupEvent.start();
};

DiscreteActivityBase.prototype.calcFrameIndex = function( nCurrCalls, nVectorSize )
{
if( this.isAutoReverse() )
{
var nFrameIndex = nCurrCalls % (2 * nVectorSize);

if( nFrameIndex >= nVectorSize )
nFrameIndex = 2*nVectorSize - nFrameIndex; // invert sweep

return nFrameIndex;
}
else
{
return nCurrCalls % nVectorSize;
}
};

DiscreteActivityBase.prototype.calcRepeatCount = function( nCurrCalls, nVectorSize )
{
if( this.isAutoReverse() )
{
return Math.floor( nCurrCalls / (2*nVectorSize) ); // we've got 2 cycles per repeat
}
else
{
return Math.floor( nCurrCalls / nVectorSize );
}
};

DiscreteActivityBase.prototype.performDiscreteHook = function( /*nFrame, nRepeatCount*/ )
{
throw ( 'DiscreteActivityBase.performDiscreteHook: abstract method invoked' );
};

DiscreteActivityBase.prototype.perform = function()
{
if( !SimpleContinuousActivityBase.superclass.perform.call( this ) )
return false; // done, we're ended

var nVectorSize = this.aDiscreteTimes.length;

var nFrameIndex = this.calcFrameIndex(this.nCurrPerformCalls, nVectorSize);
var nRepeatCount = this.calcRepeatCount( this.nCurrPerformCalls, nVectorSize );
this.performDiscreteHook( nFrameIndex, nRepeatCount );

++this.nCurrPerformCalls;

var nCurrRepeat = this.nCurrPerformCalls / nVectorSize;

if( this.isAutoReverse() )
nCurrRepeat /= 2;

if( !this.isRepeatCountValid() || nCurrRepeat < this.getRepeatCount() )
{


nFrameIndex = this.calcFrameIndex(this.nCurrPerformCalls, nVectorSize);
var nCurrentRepeatTime = this.aDiscreteTimes[nFrameIndex];
nRepeatCount = this.calcRepeatCount( this.nCurrPerformCalls, nVectorSize );
var nNextTimeout = this.nMinSimpleDuration * ( nRepeatCount + this.calcAcceleratedTime( nCurrentRepeatTime ) );
this.aWakeupEvent.setNextTimeout( nNextTimeout );

this.getEventQueue().addEvent( this.aWakeupEvent );
}
else
{
this.aWakeupEvent = null;

this.endActivity();
}

return false; // remove from queue, will be added back by the wakeup event.
};

DiscreteActivityBase.prototype.dispose = function()
{
if( this.aWakeupEvent )
this.aWakeupEvent.dispose();

this.aWakeupEvent = null;

DiscreteActivityBase.superclass.dispose.call(this);
};


function SimpleContinuousActivityBase( aCommonParamSet )
{
SimpleContinuousActivityBase.superclass.constructor.call( this, aCommonParamSet );

this.aTimer = new ElapsedTime( aCommonParamSet.aActivityQueue.getTimer() );
this.nMinSimpleDuration = aCommonParamSet.nMinDuration;
this.nMinNumberOfFrames = aCommonParamSet.nMinNumberOfFrames;
this.nCurrPerformCalls = 0;

}
extend( SimpleContinuousActivityBase, ActivityBase );


SimpleContinuousActivityBase.prototype.startAnimation = function()
{
this.aTimer.reset();
};

SimpleContinuousActivityBase.prototype.calcTimeLag = function()
{
SimpleContinuousActivityBase.superclass.calcTimeLag.call( this );

if( !this.isActive() )
return 0.0;

var nCurrElapsedTime = this.aTimer.getElapsedTime();


var nFractionElapsedTime = nCurrElapsedTime / this.nMinSimpleDuration;

var nFractionRequiredCalls = this.nCurrPerformCalls / this.nMinNumberOfFrames;


if( nFractionElapsedTime < nFractionRequiredCalls )
{
return 0.0;
}
else
{
return ( ( nFractionElapsedTime - nFractionRequiredCalls ) * this.nMinSimpleDuration );
}
};

SimpleContinuousActivityBase.prototype.perform = function()
{
if( !SimpleContinuousActivityBase.superclass.perform.call( this ) )
return false; // done, we're ended

var nCurrElapsedTime = this.aTimer.getElapsedTime();
var nT = nCurrElapsedTime / this.nMinSimpleDuration;


var bActivityEnding = false;

if( this.isRepeatCountValid() )
{

var nRepeatCount = this.getRepeatCount();
var nEffectiveRepeat = this.isAutoReverse() ? 2.0 * nRepeatCount : nRepeatCount;

if( nEffectiveRepeat <= nT )
{
bActivityEnding = true;

nT = nEffectiveRepeat;
}
}


var nRepeats;
var nRelativeSimpleTime;
if( this.isAutoReverse() )
{
nRepeats = Math.floor( nT );
var nFractionalActiveDuration =  nT - nRepeats;

if( nRepeats % 2 )
{
nRelativeSimpleTime = 1.0 - nFractionalActiveDuration;
}
else
{
nRelativeSimpleTime = nFractionalActiveDuration;
}

nRepeats /= 2;
}
else
{

nRepeats = Math.floor( nT );
nRelativeSimpleTime = nT - nRepeats;

if( this.isRepeatCountValid() && ( nRepeats >= this.getRepeatCount() ) )
{

nRelativeSimpleTime = 1.0;
nRepeats -= 1.0;
}
}


this.simplePerform( nRelativeSimpleTime, nRepeats );

if( bActivityEnding )
this.endActivity();

++this.nCurrPerformCalls;

return this.isActive();
};

SimpleContinuousActivityBase.prototype.simplePerform = function( /*nSimpleTime, nRepeatCount*/ )
{
throw ( 'SimpleContinuousActivityBase.simplePerform: abstract method invoked' );
};


function ContinuousKeyTimeActivityBase( aCommonParamSet )
{
var nSize = aCommonParamSet.aDiscreteTimes.length;
assert( nSize > 1,
'ContinuousKeyTimeActivityBase constructor: assertion (aDiscreteTimes.length > 1) failed' );

assert( aCommonParamSet.aDiscreteTimes[0] == 0.0,
'ContinuousKeyTimeActivityBase constructor: assertion (aDiscreteTimes.front() == 0.0) failed' );

assert( aCommonParamSet.aDiscreteTimes[ nSize - 1 ] <= 1.0,
'ContinuousKeyTimeActivityBase constructor: assertion (aDiscreteTimes.back() <= 1.0) failed' );

ContinuousKeyTimeActivityBase.superclass.constructor.call( this, aCommonParamSet );

this.aLerper = new KeyStopLerp( aCommonParamSet.aDiscreteTimes );
}
extend( ContinuousKeyTimeActivityBase, SimpleContinuousActivityBase );


ContinuousKeyTimeActivityBase.prototype.activate = function( aEndElement )
{
ContinuousKeyTimeActivityBase.superclass.activate.call( this, aEndElement );

this.aLerper.reset();
};

ContinuousKeyTimeActivityBase.prototype.performContinuousHook = function( /*nIndex, nFractionalIndex, nRepeatCount*/ )
{
throw ( 'ContinuousKeyTimeActivityBase.performContinuousHook: abstract method invoked' );
};

ContinuousKeyTimeActivityBase.prototype.simplePerform = function( nSimpleTime, nRepeatCount )
{
var nAlpha = this.calcAcceleratedTime( nSimpleTime );

var aLerpResult = this.aLerper.lerp( nAlpha );

this.performContinuousHook( aLerpResult.nIndex, aLerpResult.nLerp, nRepeatCount );
};


function ContinuousActivityBase( aCommonParamSet )
{
ContinuousActivityBase.superclass.constructor.call( this, aCommonParamSet );

}
extend( ContinuousActivityBase, SimpleContinuousActivityBase );


ContinuousActivityBase.prototype.performContinuousHook = function( /*nModifiedTime, nRepeatCount*/ )
{
throw ( 'ContinuousActivityBase.performContinuousHook: abstract method invoked' );
};

ContinuousActivityBase.prototype.simplePerform = function( nSimpleTime, nRepeatCount )
{
this.performContinuousHook( this.calcAcceleratedTime( nSimpleTime ), nRepeatCount );
};


function SimpleActivity( aCommonParamSet, aNumberAnimation, eDirection )
{
assert( ( eDirection == BACKWARD ) || ( eDirection == FORWARD ),
'SimpleActivity constructor: animation direction is not valid' );

assert( aNumberAnimation, 'SimpleActivity constructor: animation object is not valid' );

SimpleActivity.superclass.constructor.call( this, aCommonParamSet );

this.aAnimation = aNumberAnimation;
this.nDirection = ( eDirection == FORWARD ) ? 1.0 : 0.0;
}
extend( SimpleActivity, ContinuousActivityBase );


SimpleActivity.prototype.startAnimation = function()
{
if( this.isDisposed() || !this.aAnimation )
return;

ANIMDBG.print( 'SimpleActivity.startAnimation invoked' );
SimpleActivity.superclass.startAnimation.call( this );

this.aAnimation.start( this.getTargetElement() );
};

SimpleActivity.prototype.endAnimation = function()
{
if( this.aAnimation )
this.aAnimation.end();

};

SimpleActivity.prototype.performContinuousHook = function( nModifiedTime /*, nRepeatCount*/ )
{

if( this.isDisposed() || !this.aAnimation )
return;

var nT = 1.0 - this.nDirection + nModifiedTime * ( 2.0*this.nDirection - 1.0 );
this.aAnimation.perform( nT );
};

SimpleActivity.prototype.performEnd = function()
{
if( this.aAnimation )
this.aAnimation.perform( this.nDirection );
};


function FromToByActivityTemplate( BaseType ) // template parameter
{

function FromToByActivity( aFromValue, aToValue, aByValue,
aActivityParamSet, aAnimation,
aInterpolator, aOperatorSet, bAccumulate )
{
assert( aAnimation, 'FromToByActivity constructor: invalid animation object' );
assert( ( aToValue != undefined ) || ( aByValue != undefined ),
'FromToByActivity constructor: one of aToValue or aByValue must be valid' );

FromToByActivity.superclass.constructor.call( this, aActivityParamSet );

this.aFrom = aFromValue;
this.aTo = aToValue;
this.aBy = aByValue;
this.aStartValue = null;
this.aEndValue = null;
this.aPreviousValue = null;
this.aStartInterpolationValue = null;
this.aAnimation = aAnimation;
this.aInterpolator = aInterpolator;
this.equal = aOperatorSet.equal;
this.add = aOperatorSet.add;
this.scale = aOperatorSet.scale;
this.bDynamicStartValue = false;
this.nIteration = 0;
this.bCumulative = bAccumulate;
this.aFormula = aActivityParamSet.aFormula;
}
extend( FromToByActivity, BaseType );

FromToByActivity.prototype.initAnimatedElement = function()
{
if( this.aAnimation && this.aFrom )
{
var aValue = this.aFormula ? this.aFormula( this.aFrom ) : this.aFrom;
this.aAnimation.perform(aValue);
}
};

FromToByActivity.prototype.startAnimation = function()
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'FromToByActivity.startAnimation: activity disposed or not valid animation' );
return;
}

FromToByActivity.superclass.startAnimation.call( this );

this.aAnimation.start( this.getTargetElement() );


var aAnimationStartValue = this.aAnimation.getUnderlyingValue();

if( this.aFrom )
{
if( this.aTo )
{
this.aStartValue = this.aFrom;
this.aEndValue = this.aTo;
}
else if( this.aBy )
{
this.aStartValue = this.aFrom;

this.aEndValue = this.add( this.aStartValue, this.aBy );
}
}
else
{
this.aStartValue = aAnimationStartValue;
this.aStartInterpolationValue = this.aStartValue;

if( this.aTo )
{

this.bDynamicStartValue = true;
this.aPreviousValue = this.aStartValue;
this.aEndValue = this.aTo;
}
else if( this.aBy )
{
this.aStartValue = aAnimationStartValue;

this.aEndValue = this.add( this.aStartValue, this.aBy );
}
}

ANIMDBG.print( 'FromToByActivity.startAnimation: aStartValue = ' + this.aStartValue + ', aEndValue = ' + this.aEndValue );
};

FromToByActivity.prototype.endAnimation = function()
{
if( this.aAnimation )
this.aAnimation.end();
};

FromToByActivity.prototype.performContinuousHook = function( nModifiedTime, nRepeatCount )
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'FromToByActivity.performContinuousHook: activity disposed or not valid animation' );
return;
}


if( this.bDynamicStartValue )
{
if( this.nIteration != nRepeatCount )
{
this.nIteration = nRepeatCount;
this.aStartInterpolationValue =  this.aStartValue;
}
else
{
var aActualValue = this.aAnimation.getUnderlyingValue();
if( !this.equal( aActualValue, this.aPreviousValue ) )
this.aStartInterpolationValue = aActualValue;
}
}

var aValue = this.aInterpolator( this.aStartInterpolationValue,
this.aEndValue, nModifiedTime );

if( this.bCumulative && !this.bDynamicStartValue )
{
aValue = this.add( this.scale( nRepeatCount, this.aEndValue ), aValue );
}

aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );

if( this.bDynamicStartValue )
{
this.aPreviousValue = this.aAnimation.getUnderlyingValue();
}

};

FromToByActivity.prototype.performDiscreteHook = function( /*nFrame, nRepeatCount*/ )
{
if (this.isDisposed() || !this.aAnimation) {
log('FromToByActivity.performDiscreteHook: activity disposed or not valid animation');
return;
}
};

FromToByActivity.prototype.performEnd = function()
{
if( this.aAnimation )
{
var aValue = this.isAutoReverse() ? this.aStartValue : this.aEndValue;
aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );
}
};

FromToByActivity.prototype.dispose = function()
{
FromToByActivity.superclass.dispose.call( this );
};


return FromToByActivity;
}


var LinearFromToByActivity = instantiate( FromToByActivityTemplate, ContinuousActivityBase );
var DiscreteFromToByActivity = instantiate( FromToByActivityTemplate, DiscreteActivityBase );


function  ValueListActivityTemplate( BaseType ) // template parameter
{

function ValueListActivity( aValueList, aActivityParamSet,
aAnimation, aInterpolator,
aOperatorSet, bAccumulate )
{
assert( aAnimation, 'ValueListActivity constructor: invalid animation object' );
assert( aValueList.length != 0, 'ValueListActivity: value list is empty' );

ValueListActivity.superclass.constructor.call( this, aActivityParamSet );

this.aValueList = aValueList;
this.aAnimation = aAnimation;
this.aInterpolator = aInterpolator;
this.add = aOperatorSet.add;
this.scale = aOperatorSet.scale;
this.bCumulative = bAccumulate;
this.aLastValue = this.aValueList[ this.aValueList.length - 1 ];
this.aFormula = aActivityParamSet.aFormula;
}
extend( ValueListActivity, BaseType );

ValueListActivity.prototype.activate = function( aEndEvent )
{
ValueListActivity.superclass.activate.call( this, aEndEvent );
for( var i = 0; i < this.aValueList.length; ++i )
{
ANIMDBG.print( 'createValueListActivity: value[' + i + '] = ' + this.aValueList[i] );
}
};

ValueListActivity.prototype.initAnimatedElement = function()
{
if( this.aAnimation )
{
var aValue = this.aValueList[0];
aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform(aValue);
}
};

ValueListActivity.prototype.startAnimation = function()
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'ValueListActivity.startAnimation: activity disposed or not valid animation' );
return;
}

ValueListActivity.superclass.startAnimation.call( this );

this.aAnimation.start( this.getTargetElement() );
};

ValueListActivity.prototype.endAnimation = function()
{
if( this.aAnimation )
this.aAnimation.end();
};

ValueListActivity.prototype.performContinuousHook = function( nIndex, nFractionalIndex, nRepeatCount )
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'ValueListActivity.performContinuousHook: activity disposed or not valid animation' );
return;
}

assert( ( nIndex + 1 ) < this.aValueList.length,
'ValueListActivity.performContinuousHook: assertion (nIndex + 1 < this.aValueList.length) failed' );


var aValue = this.aInterpolator( this.aValueList[ nIndex ],
this.aValueList[ nIndex+1 ],
nFractionalIndex );

if( this.bCumulative )
{
aValue = this.add( aValue, this.scale( nRepeatCount, this.aLastValue ) );
}

aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );
};

ValueListActivity.prototype.performDiscreteHook = function( nFrame, nRepeatCount )
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'ValueListActivity.performDiscreteHook: activity disposed or not valid animation' );
return;
}

assert( nFrame < this.aValueList.length,
'ValueListActivity.performDiscreteHook: assertion ( nFrame < this.aValueList.length) failed' );

var aValue = this.aValueList[nFrame];

if( this.bCumulative )
{
aValue = this.add( aValue, this.scale( nRepeatCount, this.aLastValue ) );
}

aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );
};

ValueListActivity.prototype.performEnd = function()
{
if( this.aAnimation )
{
var aValue = this.aFormula ? this.aFormula( this.aLastValue ) : this.aLastValue;
this.aAnimation.perform( aValue );
}
};

ValueListActivity.prototype.dispose = function()
{
ValueListActivity.superclass.dispose.call( this );
};


return ValueListActivity;
}


var LinearValueListActivity = instantiate( ValueListActivityTemplate, ContinuousKeyTimeActivityBase );
var DiscreteValueListActivity = instantiate( ValueListActivityTemplate, DiscreteActivityBase );


function createActivity( aActivityParamSet, aAnimationNode, aAnimation, aInterpolator )
{
var eCalcMode = aAnimationNode.getCalcMode();

var sAttributeName = aAnimationNode.getAttributeName();
var aAttributeProp = aAttributeMap[ sAttributeName ];

var eValueType = aAttributeProp[ 'type' ];
var eValueSubtype = aAttributeProp[ 'subtype' ];

if( ! aInterpolator )
{
aInterpolator = aInterpolatorHandler.getInterpolator( eCalcMode,
eValueType,
eValueSubtype );
}

var bAccumulate = ( aAnimationNode.getAccumulate() === ACCUMULATE_MODE_SUM )
&& !( eValueType === BOOL_PROPERTY ||
eValueType === STRING_PROPERTY ||
eValueType === ENUM_PROPERTY );

if( aAnimationNode.getFormula() )
{
var sFormula =  aAnimationNode.getFormula();
var reMath = /abs|sqrt|asin|acos|atan|sin|cos|tan|exp|log|min|max/g;
sFormula = sFormula.replace(reMath, 'Math.$&');
sFormula = sFormula.replace(/pi(?!\w)/g, 'Math.PI');
sFormula = sFormula.replace(/e(?!\w)/g, 'Math.E');
sFormula = sFormula.replace(/\$/g, '__PARAM0__');

var aAnimatedElement = aAnimationNode.getAnimatedElement();
var aBBox = aAnimatedElement.getBaseBBox();

var width = aBBox.width / aActivityParamSet.nSlideWidth;
var height = aBBox.height / aActivityParamSet.nSlideHeight;
var x = ( aBBox.x + aBBox.width / 2 ) / aActivityParamSet.nSlideWidth;
var y = ( aBBox.y + aBBox.height / 2 ) / aActivityParamSet.nSlideHeight;

aActivityParamSet.aFormula = function( __PARAM0__ ) {

return eval(sFormula);
};
}

aActivityParamSet.aDiscreteTimes = aAnimationNode.getKeyTimes();

var aValueSet = aAnimationNode.getValues();
var nValueSetSize = aValueSet.length;

if( nValueSetSize != 0 )
{

if( aActivityParamSet.aDiscreteTimes.length == 0 )
{
for( var i = 0; i < nValueSetSize; ++i )
aActivityParamSet.aDiscreteTimes[i].push( i / nValueSetSize );
}

switch( eCalcMode )
{
case CALC_MODE_DISCRETE:
aActivityParamSet.aWakeupEvent =
new WakeupEvent( aActivityParamSet.aTimerEventQueue.getTimer(),
aActivityParamSet.aActivityQueue );

return createValueListActivity( aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
DiscreteValueListActivity,
bAccumulate,
eValueType );

default:
log( 'createActivity: unexpected calculation mode: ' + eCalcMode );
case CALC_MODE_PACED :
case CALC_MODE_SPLINE :
case CALC_MODE_LINEAR:
return createValueListActivity( aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
LinearValueListActivity,
bAccumulate,
eValueType );
}
}
else
{
switch( eCalcMode )
{
case CALC_MODE_DISCRETE:
log( 'createActivity: discrete calculation case not yet implemented' );
aActivityParamSet.aWakeupEvent =
new WakeupEvent( aActivityParamSet.aTimerEventQueue.getTimer(),
aActivityParamSet.aActivityQueue );
return createFromToByActivity(  aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
DiscreteFromToByActivity,
bAccumulate,
eValueType );

default:
log( 'createActivity: unexpected calculation mode: ' + eCalcMode );
case CALC_MODE_PACED :
case CALC_MODE_SPLINE :
case CALC_MODE_LINEAR:
return createFromToByActivity(  aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
LinearFromToByActivity,
bAccumulate,
eValueType );
}
}
}


function createValueListActivity( aActivityParamSet, aAnimationNode, aAnimation,
aInterpolator, ClassTemplateInstance, bAccumulate, eValueType )
{
var aAnimatedElement = aAnimationNode.getAnimatedElement();
var aOperatorSet = aOperatorSetMap[ eValueType ];
assert( aOperatorSet, 'createValueListActivity: no operator set found' );

var aValueSet = aAnimationNode.getValues();

var aValueList = [];

extractAttributeValues( eValueType,
aValueList,
aValueSet,
aAnimatedElement.getBaseBBox(),
aActivityParamSet.nSlideWidth,
aActivityParamSet.nSlideHeight );

for( var i = 0; i < aValueList.length; ++i )
{
ANIMDBG.print( 'createValueListActivity: value[' + i + '] = ' + aValueList[i] );
}

return new ClassTemplateInstance( aValueList, aActivityParamSet, aAnimation,
aInterpolator, aOperatorSet, bAccumulate );
}


function createFromToByActivity( aActivityParamSet, aAnimationNode, aAnimation,
aInterpolator, ClassTemplateInstance, bAccumulate, eValueType )
{

var aAnimatedElement = aAnimationNode.getAnimatedElement();
var aOperatorSet = aOperatorSetMap[ eValueType ];
assert( aOperatorSet, 'createFromToByActivity: no operator set found' );

var aValueSet = [];
aValueSet[0] = aAnimationNode.getFromValue();
aValueSet[1] = aAnimationNode.getToValue();
aValueSet[2] = aAnimationNode.getByValue();

ANIMDBG.print( 'createFromToByActivity: value type: ' + aValueTypeOutMap[eValueType] +
', aFrom = ' + aValueSet[0] +
', aTo = ' + aValueSet[1] +
', aBy = ' + aValueSet[2] );

var aValueList = [];

extractAttributeValues( eValueType,
aValueList,
aValueSet,
aAnimatedElement.getBaseBBox(),
aActivityParamSet.nSlideWidth,
aActivityParamSet.nSlideHeight );

ANIMDBG.print( 'createFromToByActivity: ' +
', aFrom = ' + aValueList[0] +
', aTo = ' + aValueList[1] +
', aBy = ' + aValueList[2] );

return new ClassTemplateInstance( aValueList[0], aValueList[1], aValueList[2],
aActivityParamSet, aAnimation,
aInterpolator, aOperatorSet, bAccumulate );
}


function extractAttributeValues( eValueType, aValueList, aValueSet, aBBox, nSlideWidth, nSlideHeight )
{
var i;
switch( eValueType )
{
case NUMBER_PROPERTY :
evalValuesAttribute( aValueList, aValueSet, aBBox, nSlideWidth, nSlideHeight );
break;
case BOOL_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
var aValue = booleanParser( aValueSet[i] );
aValueList.push( aValue );
}
break;
case STRING_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
aValueList.push( aValueSet[i] );
}
break;
case ENUM_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
aValueList.push( aValueSet[i] );
}
break;
case COLOR_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
aValue = colorParser( aValueSet[i] );
aValueList.push( aValue );
}
break;
default:
log( 'createValueListActivity: unexpected value type: ' + eValueType );
}

}


function evalValuesAttribute( aValueList, aValueSet, aBBox, nSlideWidth, nSlideHeight )
{
var width = aBBox.width / nSlideWidth;
var height = aBBox.height / nSlideHeight;
var x = ( aBBox.x + aBBox.width / 2 ) / nSlideWidth;
var y = ( aBBox.y + aBBox.height / 2 ) / nSlideHeight;

var reMath = /abs|sqrt|asin|acos|atan|sin|cos|tan|exp|log|min|max/g;

for( var i = 0; i < aValueSet.length; ++i )
{
var sValue = aValueSet[i];
sValue = sValue.replace(reMath, 'Math.$&');
sValue = sValue.replace(/pi(?!\w)/g, 'Math.PI');
sValue = sValue.replace(/e(?!\w)/g, 'Math.E');
var aValue =  eval( sValue );
aValueList.push( aValue );
}
}


var BACKWARD    = 0;
var FORWARD     = 1;

var MAXIMUM_FRAME_COUNT                 = 60;
var MINIMUM_TIMEOUT                     = 1.0 / MAXIMUM_FRAME_COUNT;
var MAXIMUM_TIMEOUT                     = 4.0;
var MINIMUM_FRAMES_PER_SECONDS          = 10;
var PREFERRED_FRAMES_PER_SECONDS        = 50;
var PREFERRED_FRAME_RATE                = 1.0 / PREFERRED_FRAMES_PER_SECONDS;


function Effect( nId )
{
this.nId = ( typeof( nId ) === typeof( 1 ) ) ? nId : -1;
this.eState = Effect.NOT_STARTED;
}
Effect.NOT_STARTED = 0;
Effect.PLAYING = 1;
Effect.ENDED = 2;

Effect.prototype.getId = function()
{
return this.nId;
};

Effect.prototype.isMainEffect = function()
{
return ( this.nId === -1 );
};

Effect.prototype.isPlaying = function()
{
return ( this.eState === Effect.PLAYING );
};

Effect.prototype.isEnded = function()
{
return ( this.eState === Effect.ENDED );
};

Effect.prototype.start = function()
{
assert( this.eState === Effect.NOT_STARTED, 'Effect.start: wrong state.' );
this.eState = Effect.PLAYING;
};

Effect.prototype.end = function()
{
assert( this.eState === Effect.PLAYING, 'Effect.end: wrong state.' );
this.eState = Effect.ENDED;
};


function SlideShow()
{
this.aTimer = new ElapsedTime();
this.aFrameSynchronization = new FrameSynchronization( PREFERRED_FRAME_RATE );
this.aTimerEventQueue = new TimerEventQueue( this.aTimer );
this.aActivityQueue = new ActivityQueue( this.aTimer );
this.aNextEffectEventArray = null;
this.aInteractiveAnimationSequenceMap = null;
this.aEventMultiplexer = null;

this.aContext = new SlideShowContext( this.aTimerEventQueue,
this.aEventMultiplexer,
this.aNextEffectEventArray,
this.aInteractiveAnimationSequenceMap,
this.aActivityQueue );
this.bIsIdle = true;
this.bIsEnabled = true;
this.bNoSlideTransition = false;
this.bIsTransitionRunning = false;

this.nCurrentEffect = 0;
this.bIsNextEffectRunning = false;
this.bIsRewinding = false;
this.bIsSkipping = false;
this.bIsSkippingAll = false;
this.nTotalInteractivePlayingEffects = 0;
this.aStartedEffectList = [];
this.aStartedEffectIndexMap = {};
this.aStartedEffectIndexMap[ -1 ] = undefined;
this.automaticAdvanceTimeout = null;
}

SlideShow.prototype.setSlideEvents = function( aNextEffectEventArray,
aInteractiveAnimationSequenceMap,
aEventMultiplexer )
{
if( !aNextEffectEventArray )
log( 'SlideShow.setSlideEvents: aNextEffectEventArray is not valid' );

if( !aInteractiveAnimationSequenceMap )
log( 'SlideShow.setSlideEvents:aInteractiveAnimationSequenceMap  is not valid' );

if( !aEventMultiplexer )
log( 'SlideShow.setSlideEvents: aEventMultiplexer is not valid' );

this.aContext.aNextEffectEventArray = aNextEffectEventArray;
this.aNextEffectEventArray = aNextEffectEventArray;
this.aContext.aInteractiveAnimationSequenceMap = aInteractiveAnimationSequenceMap;
this.aInteractiveAnimationSequenceMap = aInteractiveAnimationSequenceMap;
this.aContext.aEventMultiplexer = aEventMultiplexer;
this.aEventMultiplexer = aEventMultiplexer;
this.nCurrentEffect = 0;
};

SlideShow.prototype.createSlideTransition = function( aSlideTransitionHandler, aLeavingSlide, aEnteringSlide, aTransitionEndEvent )
{
if( !aEnteringSlide )
{
log( 'SlideShow.createSlideTransition: entering slide element is not valid.' );
return null;
}

if( this.bNoSlideTransition ) return null;

var aAnimatedLeavingSlide = null;
if( aLeavingSlide )
aAnimatedLeavingSlide = new AnimatedSlide( aLeavingSlide );
var aAnimatedEnteringSlide = new AnimatedSlide( aEnteringSlide );

var aSlideTransition = aSlideTransitionHandler.createSlideTransition( aAnimatedLeavingSlide, aAnimatedEnteringSlide );
if( !aSlideTransition ) return null;

var nDuration = 0.001;
if( aSlideTransitionHandler.getDuration().isValue() )
{
nDuration = aSlideTransitionHandler.getDuration().getValue();
}
else
{
log( 'SlideShow.createSlideTransition: duration is not a number' );
}

var aCommonParameterSet = new ActivityParamSet();
aCommonParameterSet.aEndEvent = aTransitionEndEvent;
aCommonParameterSet.aTimerEventQueue = this.aTimerEventQueue;
aCommonParameterSet.aActivityQueue = this.aActivityQueue;
aCommonParameterSet.nMinDuration = nDuration;
aCommonParameterSet.nMinNumberOfFrames = aSlideTransitionHandler.getMinFrameCount();
aCommonParameterSet.nSlideWidth = WIDTH;
aCommonParameterSet.nSlideHeight = HEIGHT;

return new SimpleActivity( aCommonParameterSet, aSlideTransition, FORWARD );

};

SlideShow.prototype.isEnabled = function()
{
return this.bIsEnabled;
};

SlideShow.prototype.isRunning = function()
{
return !this.bIsIdle;
};

SlideShow.prototype.isTransitionPlaying = function()
{
return this.bIsTransitionRunning;
};

SlideShow.prototype.isMainEffectPlaying = function()
{
return this.bIsNextEffectRunning;
};

SlideShow.prototype.isInteractiveEffectPlaying = function()
{
return ( this.nTotalInteractivePlayingEffects > 0 );
};

SlideShow.prototype.isAnyEffectPlaying = function()
{
return ( this.isMainEffectPlaying() || this.isInteractiveEffectPlaying() );
};

SlideShow.prototype.hasAnyEffectStarted = function()
{
return ( this.aStartedEffectList.length > 0 );
};

SlideShow.prototype.notifyNextEffectStart = function()
{
assert( !this.bIsNextEffectRunning,
'SlideShow.notifyNextEffectStart: an effect is already started.' );
this.bIsNextEffectRunning = true;
this.aEventMultiplexer.registerNextEffectEndHandler( bind2( SlideShow.prototype.notifyNextEffectEnd, this ) );
var aEffect = new Effect();
aEffect.start();
this.aStartedEffectIndexMap[ -1 ] = this.aStartedEffectList.length;
this.aStartedEffectList.push( aEffect );

var aAnimatedElementMap = theMetaDoc.aMetaSlideSet[nCurSlide].aSlideAnimationsHandler.aAnimatedElementMap;
for( var sId in aAnimatedElementMap )
aAnimatedElementMap[ sId ].notifyNextEffectStart( this.nCurrentEffect );
};

SlideShow.prototype.notifyNextEffectEnd = function()
{
assert( this.bIsNextEffectRunning,
'SlideShow.notifyNextEffectEnd: effect already ended.' );
this.bIsNextEffectRunning = false;

this.aStartedEffectList[ this.aStartedEffectIndexMap[ -1 ] ].end();
if( this.automaticAdvanceTimeout !== null )
{
if( this.automaticAdvanceTimeout['rewindedEffect'] === this.nCurrentEffect )
{
this.automaticAdvanceTimeout = null;
this.notifyAnimationsEnd();
}
}
};

SlideShow.prototype.notifyAnimationsEnd = function()
{
if( nCurSlide + 1 === theMetaDoc.nNumberOfSlides )
return;

assert (this.automaticAdvanceTimeout === null,
'SlideShow.notifyAnimationsEnd: Timeout already set.')

var nTimeout = Math.ceil(theMetaDoc.aMetaSlideSet[nCurSlide].fDuration * 1000);
if( nTimeout < 0 )
return;

this.automaticAdvanceTimeout = window.setTimeout('switchSlide(1, false)', nTimeout);
};

SlideShow.prototype.notifySlideStart = function( nNewSlideIndex, nOldSlideIndex )
{
this.nCurrentEffect = 0;
this.bIsRewinding = false;
this.bIsSkipping = false;
this.bIsSkippingAll = false;
this.nTotalInteractivePlayingEffects = 0;
this.aStartedEffectList = [];
this.aStartedEffectIndexMap = {};
this.aStartedEffectIndexMap[ -1 ] = undefined;

var aAnimatedElementMap;
var sId;
if( nOldSlideIndex !== undefined )
{
aAnimatedElementMap = theMetaDoc.aMetaSlideSet[nOldSlideIndex].aSlideAnimationsHandler.aAnimatedElementMap;
for( sId in aAnimatedElementMap )
aAnimatedElementMap[ sId ].notifySlideEnd();
}

aAnimatedElementMap = theMetaDoc.aMetaSlideSet[nNewSlideIndex].aSlideAnimationsHandler.aAnimatedElementMap;
for( sId in aAnimatedElementMap )
aAnimatedElementMap[ sId ].notifySlideStart( this.aContext );
};

SlideShow.prototype.notifyTransitionEnd = function( nSlideIndex )
{
if( theMetaDoc.getCurrentSlide() )
{
var sRef = 'url(#' + aPresentationClipPathId + ')';
theMetaDoc.getCurrentSlide().slideElement.setAttribute('clip-path', sRef);
}

this.bIsTransitionRunning = false;
if( this.bIsRewinding )
{
theMetaDoc.aMetaSlideSet[nSlideIndex].hide();
var nIndex = nCurSlide !== undefined ? nCurSlide : -1;
this.displaySlide( nIndex, true );
this.skipAllEffects();
this.bIsRewinding = false;
return;
}

theMetaDoc.setCurrentSlide(nSlideIndex);

if( this.aSlideViewElement )
{
theMetaDoc.getCurrentSlide().aVisibilityStatusElement.parentNode.removeChild( this.aSlideViewElement );
this.aSlideViewElement = null;
}
if( this.isEnabled() )
{
this.dispose();

var aCurrentSlide = theMetaDoc.getCurrentSlide();
if( aCurrentSlide.aSlideAnimationsHandler.elementsParsed() )
{
aCurrentSlide.aSlideAnimationsHandler.start();
this.aEventMultiplexer.registerAnimationsEndHandler( bind2( SlideShow.prototype.notifyAnimationsEnd, this ) );
}
else
this.notifyAnimationsEnd();

this.update();
}
else
this.notifyAnimationsEnd();
};

SlideShow.prototype.notifyInteractiveAnimationSequenceStart = function( nNodeId )
{
++this.nTotalInteractivePlayingEffects;
var aEffect = new Effect( nNodeId );
aEffect.start();
this.aStartedEffectIndexMap[ nNodeId ] = this.aStartedEffectList.length;
this.aStartedEffectList.push( aEffect );
};

SlideShow.prototype.notifyInteractiveAnimationSequenceEnd = function( nNodeId )
{
assert( this.isInteractiveEffectPlaying(),
'SlideShow.notifyInteractiveAnimationSequenceEnd: no interactive effect playing.' );

this.aStartedEffectList[ this.aStartedEffectIndexMap[ nNodeId ] ].end();
--this.nTotalInteractivePlayingEffects;
};

SlideShow.prototype.nextEffect = function()
{
if( !this.isEnabled() )
return false;

if( this.isTransitionPlaying() )
{
this.skipTransition();
return true;
}

if( this.isAnyEffectPlaying() )
{
this.skipAllPlayingEffects();
return true;
}

if( !this.aNextEffectEventArray )
return false;

if( this.nCurrentEffect >= this.aNextEffectEventArray.size() )
return false;

this.notifyNextEffectStart();

this.aNextEffectEventArray.at( this.nCurrentEffect ).fire();
++this.nCurrentEffect;
this.update();
return true;
};

SlideShow.prototype.skipTransition  = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return;

this.bIsSkipping = true;

this.aActivityQueue.endAll();
this.aTimerEventQueue.forceEmpty();
this.aActivityQueue.endAll();
this.update();
this.bIsSkipping = false;
};

SlideShow.prototype.skipAllPlayingEffects  = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return true;

this.bIsSkipping = true;
for( var i = 0; i < this.aStartedEffectList.length; ++i )
{
var aEffect = this.aStartedEffectList[i];
if( aEffect.isPlaying() )
{
if( aEffect.isMainEffect() )
this.aEventMultiplexer.notifySkipEffectEvent();
else
this.aEventMultiplexer.notifySkipInteractiveEffectEvent( aEffect.getId() );
}
}
this.update();
this.bIsSkipping = false;
return true;
};

SlideShow.prototype.skipNextEffect = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return true;

assert( !this.isAnyEffectPlaying(),
'SlideShow.skipNextEffect' );

if( !this.aNextEffectEventArray )
return false;

if( this.nCurrentEffect >= this.aNextEffectEventArray.size() )
return false;

this.notifyNextEffectStart();

this.bIsSkipping = true;
this.aNextEffectEventArray.at( this.nCurrentEffect ).fire();
this.aEventMultiplexer.notifySkipEffectEvent();
++this.nCurrentEffect;
this.update();
this.bIsSkipping = false;
return true;
};

SlideShow.prototype.skipPlayingOrNextEffect = function()
{
if( this.isTransitionPlaying() )
{
this.skipTransition();
return true;
}

if( this.isAnyEffectPlaying() )
return this.skipAllPlayingEffects();
else
return this.skipNextEffect();
};


SlideShow.prototype.skipAllEffects = function()
{
if( this.bIsSkippingAll )
return true;

this.bIsSkippingAll = true;

if( this.isTransitionPlaying() )
{
this.skipTransition();
}

if( this.isAnyEffectPlaying() )
{
this.skipAllPlayingEffects();
}
else if( !this.aNextEffectEventArray
|| ( this.nCurrentEffect >= this.aNextEffectEventArray.size() ) )
{
this.bIsSkippingAll = false;
return false;
}

while( this.nCurrentEffect < this.aNextEffectEventArray.size() )
{
this.skipNextEffect();
}
this.bIsSkippingAll = false;
return true;
};

SlideShow.prototype.rewindTransition = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return;

this.bIsRewinding = true;
this.aActivityQueue.endAll();
this.update();
this.bIsRewinding = false;
};

SlideShow.prototype.rewindEffect = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return;

if( this.automaticAdvanceTimeout !== null && !this.automaticAdvanceTimeout['rewindedEffect'] )
{
window.clearTimeout( this.automaticAdvanceTimeout );
this.automaticAdvanceTimeout = { 'rewindedEffect': this.nCurrentEffect };
}

if( !this.hasAnyEffectStarted() )
{
this.rewindToPreviousSlide();
return;
}

this.bIsRewinding = true;

var nFirstPlayingEffectIndex = undefined;

var i = 0;
for( ; i < this.aStartedEffectList.length; ++i )
{
var aEffect = this.aStartedEffectList[i];
if( aEffect.isPlaying() )
{
nFirstPlayingEffectIndex = i;
break;
}
}

if( nFirstPlayingEffectIndex !== undefined )
{
i = this.aStartedEffectList.length - 1;
for( ; i >= nFirstPlayingEffectIndex; --i )
{
aEffect = this.aStartedEffectList[i];
if( aEffect.isPlaying() )
{
if( aEffect.isMainEffect() )
{
this.aEventMultiplexer.notifyRewindCurrentEffectEvent();
if( this.nCurrentEffect > 0 )
--this.nCurrentEffect;
}
else
{
this.aEventMultiplexer.notifyRewindRunningInteractiveEffectEvent( aEffect.getId() );
}
}
else if( aEffect.isEnded() )
{
if( aEffect.isMainEffect() )
{
this.aEventMultiplexer.notifyRewindLastEffectEvent();
if( this.nCurrentEffect > 0 )
--this.nCurrentEffect;
}
else
{
this.aEventMultiplexer.notifyRewindEndedInteractiveEffectEvent( aEffect.getId() );
}
}
}
this.update();

i = this.aStartedEffectList.length - 1;
for( ; i >= nFirstPlayingEffectIndex; --i )
{
aEffect = this.aStartedEffectList.pop();
if( !aEffect.isMainEffect() )
delete this.aStartedEffectIndexMap[ aEffect.getId() ];
}
}
else  // there is no playing effect
{
aEffect = this.aStartedEffectList.pop();
if( !aEffect.isMainEffect() )
delete this.aStartedEffectIndexMap[ aEffect.getId() ];
if( aEffect.isEnded() )  // Well that is almost an assertion.
{
if( aEffect.isMainEffect() )
{
this.aEventMultiplexer.notifyRewindLastEffectEvent();
if( this.nCurrentEffect > 0 )
--this.nCurrentEffect;
}
else
{
this.aEventMultiplexer.notifyRewindEndedInteractiveEffectEvent( aEffect.getId() );
}
}
this.update();
}

this.bIsRewinding = false;
};

SlideShow.prototype.rewindToPreviousSlide = function()
{
if( this.isTransitionPlaying() )
{
this.rewindTransition();
return;
}
if( this.isAnyEffectPlaying() )
return;
var nNewSlide = nCurSlide - 1;
this.displaySlide( nNewSlide, true );
this.skipAllEffects();
};

SlideShow.prototype.rewindAllEffects = function()
{
if( !this.hasAnyEffectStarted() )
{
this.rewindToPreviousSlide();
return;
}

while( this.hasAnyEffectStarted() )
{
this.rewindEffect();
}
};

SlideShow.prototype.exitSlideShowInApp = function()
{
if (window.webkit !== undefined &&
window.webkit.messageHandlers !== undefined &&
window.webkit.messageHandlers.lool !== undefined)
window.webkit.messageHandlers.lool.postMessage('EXITSLIDESHOW', '*');
}

SlideShow.prototype.displaySlide = function( nNewSlide, bSkipSlideTransition )
{
var aMetaDoc = theMetaDoc;
var nSlides = aMetaDoc.nNumberOfSlides;
if( nNewSlide < 0 && nSlides > 0 )
nNewSlide = nSlides - 1;
else if( nNewSlide >= nSlides ) {
nNewSlide = 0;
this.exitSlideShowInApp();
}

if( ( currentMode === INDEX_MODE ) && ( nNewSlide === nCurSlide ) )
{
aMetaDoc.getCurrentSlide().show();
return;
}

if( this.isTransitionPlaying() )
{
this.skipTransition();
}

var nOldSlide = nCurSlide;
if( nOldSlide !== undefined )
{
var oldMetaSlide = aMetaDoc.aMetaSlideSet[nOldSlide];
if( this.isEnabled() )
{
if( oldMetaSlide.aSlideAnimationsHandler.isAnimated() )
{
oldMetaSlide.aSlideAnimationsHandler.end( bSkipSlideTransition );

this.dispose();
}
}

if( this.automaticAdvanceTimeout !== null )
{
window.clearTimeout( this.automaticAdvanceTimeout );
this.automaticAdvanceTimeout = null;
}
}

this.notifySlideStart( nNewSlide, nOldSlide );

if( this.isEnabled() && !bSkipSlideTransition  )
{
if ( ( ( nOldSlide !== undefined ) &&
( ( nNewSlide > nOldSlide ) ||
( ( nNewSlide == 0) && ( nOldSlide == (aMetaDoc.nNumberOfSlides - 1) ) ) ) ) ||
(  ( nOldSlide === undefined ) &&  ( nNewSlide == 0) )  // for transition on first slide
)
{

var aOldMetaSlide = null;
if( nOldSlide === undefined ) // for transition on first slide
{
aOldMetaSlide = aMetaDoc.theMetaDummySlide;
}
else
{
aOldMetaSlide = aMetaDoc.aMetaSlideSet[nOldSlide];
}
var aNewMetaSlide = aMetaDoc.aMetaSlideSet[nNewSlide];

var aSlideTransitionHandler = aNewMetaSlide.aTransitionHandler;
if( aSlideTransitionHandler && aSlideTransitionHandler.isValid() )
{
var sRef = 'url(#' + aPresentationClipPathShrinkId + ')';
aOldMetaSlide.slideElement.setAttribute( 'clip-path', sRef );

if( nOldSlide > nNewSlide )
{
this.aSlideViewElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', this.aSlideViewElement, 'href', '#' + aOldMetaSlide.slideContainerId );
aNewMetaSlide.aVisibilityStatusElement.parentNode.insertBefore( this.aSlideViewElement, aNewMetaSlide.aVisibilityStatusElement );
aOldMetaSlide.hide();
}

var aLeavingSlide = aOldMetaSlide;
var aEnteringSlide = aNewMetaSlide;
var aTransitionEndEvent = makeEvent( bind2( this.notifyTransitionEnd, this, nNewSlide ) );

var aTransitionActivity =
this.createSlideTransition( aSlideTransitionHandler, aLeavingSlide,
aEnteringSlide, aTransitionEndEvent );

if( aTransitionActivity )
{
this.bIsTransitionRunning = true;
this.aActivityQueue.addActivity( aTransitionActivity );
this.update();
}
else
{
this.notifyTransitionEnd( nNewSlide );
}
}
else
{
this.notifyTransitionEnd( nNewSlide );
}
}
else
{
this.notifyTransitionEnd( nNewSlide );
}
}
else
{
this.notifyTransitionEnd( nNewSlide );
}

};

SlideShow.prototype.update = function()
{
this.aTimer.holdTimer();

this.aTimerEventQueue.process();
this.aActivityQueue.process();

this.aFrameSynchronization.synchronize();

this.aActivityQueue.processDequeued();

this.aTimer.releaseTimer();

var bActivitiesLeft = ( ! this.aActivityQueue.isEmpty() );
var bTimerEventsLeft = ( ! this.aTimerEventQueue.isEmpty() );
var bEventsLeft = ( bActivitiesLeft || bTimerEventsLeft );


if( bEventsLeft )
{
var nNextTimeout;
if( bActivitiesLeft )
{
nNextTimeout = MINIMUM_TIMEOUT;
this.aFrameSynchronization.activate();
}
else
{
nNextTimeout = this.aTimerEventQueue.nextTimeout();
if( nNextTimeout < MINIMUM_TIMEOUT )
nNextTimeout = MINIMUM_TIMEOUT;
else if( nNextTimeout > MAXIMUM_TIMEOUT )
nNextTimeout = MAXIMUM_TIMEOUT;
this.aFrameSynchronization.deactivate();
}

this.bIsIdle = false;
window.setTimeout( 'aSlideShow.update()', nNextTimeout * 1000 );
}
else
{
this.bIsIdle = true;
}
};

SlideShow.prototype.dispose = function()
{
this.aTimerEventQueue.clear();
this.aActivityQueue.clear();
this.aNextEffectEventArray = null;
this.aEventMultiplexer = null;
};

SlideShow.prototype.getContext = function()
{
return this.aContext;
};

var aSlideShow = null;


function SlideShowContext( aTimerEventQueue, aEventMultiplexer, aNextEffectEventArray, aInteractiveAnimationSequenceMap, aActivityQueue)
{
this.aTimerEventQueue = aTimerEventQueue;
this.aEventMultiplexer = aEventMultiplexer;
this.aNextEffectEventArray = aNextEffectEventArray;
this.aInteractiveAnimationSequenceMap = aInteractiveAnimationSequenceMap;
this.aActivityQueue = aActivityQueue;
this.bIsSkipping = false;
}


function FrameSynchronization( nFrameDuration )
{
this.nFrameDuration = nFrameDuration;
this.aTimer = new ElapsedTime();
this.nNextFrameTargetTime = 0.0;
this.bIsActive = false;

this.markCurrentFrame();
}


FrameSynchronization.prototype.markCurrentFrame = function()
{
this.nNextFrameTargetTime = this.aTimer.getElapsedTime() + this.nFrameDuration;
};

FrameSynchronization.prototype.synchronize = function()
{
if( this.bIsActive )
{
while( this.aTimer.getElapsedTime() < this.nNextFrameTargetTime )
;
}

this.markCurrentFrame();

};

FrameSynchronization.prototype.activate = function()
{
this.bIsActive = true;
};

FrameSynchronization.prototype.deactivate = function()
{
this.bIsActive = false;
};


function NextEffectEventArray()
{
this.aEventArray = [];
}


NextEffectEventArray.prototype.size = function()
{
return this.aEventArray.length;
};

NextEffectEventArray.prototype.at = function( nIndex )
{
return this.aEventArray[ nIndex ];
};

NextEffectEventArray.prototype.appendEvent = function( aEvent )
{
var nSize = this.size();
for( var i = 0; i < nSize; ++i )
{
if( this.aEventArray[i].getId() == aEvent.getId() )
{
aNextEffectEventArrayDebugPrinter.print( 'NextEffectEventArray.appendEvent: event(' + aEvent.getId() + ') already present' );
return false;
}
}
this.aEventArray.push( aEvent );
aNextEffectEventArrayDebugPrinter.print( 'NextEffectEventArray.appendEvent: event(' + aEvent.getId() + ') appended' );
return true;
};

NextEffectEventArray.prototype.clear = function( )
{
this.aEventArray = [];
};


function TimerEventQueue( aTimer )
{
this.aTimer = aTimer;
this.aEventSet = new PriorityQueue( EventEntry.compare );
}


TimerEventQueue.prototype.addEvent = function( aEvent )
{
this.DBG( 'TimerEventQueue.addEvent event(' + aEvent.getId() + ') appended.' );
if( !aEvent )
{
log( 'TimerEventQueue.addEvent: null event' );
return false;
}

var nTime = aEvent.getActivationTime( this.aTimer.getElapsedTime() );
var aEventEntry = new EventEntry( aEvent, nTime );
this.aEventSet.push( aEventEntry );

return true;
};

TimerEventQueue.prototype.forceEmpty = function()
{
this.process_(true);
};


TimerEventQueue.prototype.process = function()
{
this.process_(false);
};

TimerEventQueue.prototype.process_ = function( bFireAllEvents )
{
var nCurrentTime = this.aTimer.getElapsedTime();

while( !this.isEmpty() && ( bFireAllEvents || ( this.aEventSet.top().nActivationTime <= nCurrentTime ) ) )
{
var aEventEntry = this.aEventSet.top();
this.aEventSet.pop();

var aEvent = aEventEntry.aEvent;
if( aEvent.isCharged() )
aEvent.fire();
}
};

TimerEventQueue.prototype.isEmpty = function()
{
return this.aEventSet.isEmpty();
};

TimerEventQueue.prototype.nextTimeout = function()
{
var nTimeout = Number.MAX_VALUE;
var nCurrentTime = this.aTimer.getElapsedTime();
if( !this.isEmpty() )
nTimeout = this.aEventSet.top().nActivationTime - nCurrentTime;
return nTimeout;
};

TimerEventQueue.prototype.clear = function()
{
this.DBG( 'TimerEventQueue.clear invoked' );
this.aEventSet.clear();
};

TimerEventQueue.prototype.getTimer = function()
{
return this.aTimer;
};

TimerEventQueue.prototype.DBG = function( sMessage, nTime )
{
aTimerEventQueueDebugPrinter.print( sMessage, nTime );
};


TimerEventQueue.prototype.insert = function( aEventEntry )
{
var nHoleIndex = this.aEventSet.length;
var nParent = Math.floor( ( nHoleIndex - 1 ) / 2 );

while( ( nHoleIndex > 0 ) && this.aEventSet[ nParent ].compare( aEventEntry ) )
{
this.aEventSet[ nHoleIndex ] = this.aEventSet[ nParent ];
nHoleIndex = nParent;
nParent = Math.floor( ( nHoleIndex - 1 ) / 2 );
}
this.aEventSet[ nHoleIndex ] = aEventEntry;
};


function EventEntry( aEvent, nTime )
{
this.aEvent = aEvent;
this.nActivationTime = nTime;
}


EventEntry.compare = function( aLhsEventEntry, aRhsEventEntry )
{
if ( aLhsEventEntry.nActivationTime > aRhsEventEntry.nActivationTime )
{
return -1;
}
else if ( aLhsEventEntry.nActivationTime < aRhsEventEntry.nActivationTime )
{
return 1;
}
else
{
return 0;
}
};


function ActivityQueue( aTimer )
{
this.aTimer = aTimer;
this.aCurrentActivityWaitingSet = [];
this.aCurrentActivityReinsertSet = [];
this.aDequeuedActivitySet = [];
}


ActivityQueue.prototype.dispose = function()
{
var nSize = this.aCurrentActivityWaitingSet.length;
var i;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityWaitingSet[i].dispose();

nSize = this.aCurrentActivityReinsertSet.length;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityReinsertSet[i].dispose();
};

ActivityQueue.prototype.addActivity = function( aActivity )
{
if( !aActivity )
{
log( 'ActivityQueue.addActivity: activity is not valid' );
return false;
}

this.aCurrentActivityWaitingSet.push( aActivity );
aActivityQueueDebugPrinter.print( 'ActivityQueue.addActivity: activity appended' );
return true;
};

ActivityQueue.prototype.process = function()
{
var nSize = this.aCurrentActivityWaitingSet.length;
var nLag = 0.0;
for( var i = 0; i < nSize; ++i )
{
nLag = Math.max( nLag,this.aCurrentActivityWaitingSet[i].calcTimeLag()  );
}

if( nLag > 0.0 )
this.aTimer.adjustTimer( -nLag, true );


while( this.aCurrentActivityWaitingSet.length != 0 )
{
var aActivity = this.aCurrentActivityWaitingSet.shift();
var bReinsert = false;

bReinsert = aActivity.perform();

if( bReinsert )
{
this.aCurrentActivityReinsertSet.push( aActivity );
}
else
{
this.aDequeuedActivitySet.push( aActivity );
}
}

if( this.aCurrentActivityReinsertSet.length != 0 )
{
this.aCurrentActivityWaitingSet = this.aCurrentActivityReinsertSet;
this.aCurrentActivityReinsertSet = [];
}
};

ActivityQueue.prototype.processDequeued = function()
{
var nSize = this.aDequeuedActivitySet.length;
for( var i = 0; i < nSize; ++i )
this.aDequeuedActivitySet[i].dequeued();

this.aDequeuedActivitySet = [];
};

ActivityQueue.prototype.isEmpty = function()
{
return ( ( this.aCurrentActivityWaitingSet.length == 0 ) &&
( this.aCurrentActivityReinsertSet.length == 0 ) );
};

ActivityQueue.prototype.clear = function()
{
aActivityQueueDebugPrinter.print( 'ActivityQueue.clear invoked' );
var nSize = this.aCurrentActivityWaitingSet.length;
var i;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityWaitingSet[i].dequeued();
this.aCurrentActivityWaitingSet = [];

nSize = this.aCurrentActivityReinsertSet.length;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityReinsertSet[i].dequeued();
this.aCurrentActivityReinsertSet = [];
};

ActivityQueue.prototype.endAll = function()
{
aActivityQueueDebugPrinter.print( 'ActivityQueue.endAll invoked' );
var nSize = this.aCurrentActivityWaitingSet.length;
var i;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityWaitingSet[i].end();
this.aCurrentActivityWaitingSet = [];

nSize = this.aCurrentActivityReinsertSet.length;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityReinsertSet[i].end();
this.aCurrentActivityReinsertSet = [];
};

ActivityQueue.prototype.getTimer = function()
{
return this.aTimer;
};

ActivityQueue.prototype.size = function()
{
return ( this.aCurrentActivityWaitingSet.length +
this.aCurrentActivityReinsertSet.length +
this.aDequeuedActivitySet.length );
};


function ElapsedTime( aTimeBase )
{
this.aTimeBase = aTimeBase;
this.nLastQueriedTime = 0.0;
this.nStartTime = this.getCurrentTime();
this.nFrozenTime = 0.0;
this.bInPauseMode = false;
this.bInHoldMode = false;
}


ElapsedTime.prototype.getTimeBase = function()
{
return this.aTimeBase;
};

ElapsedTime.prototype.reset = function()
{
this.nLastQueriedTime = 0.0;
this.nStartTime = this.getCurrentTime();
this.nFrozenTime = 0.0;
this.bInPauseMode = false;
this.bInHoldMode = false;
};

ElapsedTime.prototype.getElapsedTime = function()
{
this.nLastQueriedTime = this.getElapsedTimeImpl();
return this.nLastQueriedTime;
};

ElapsedTime.prototype.pauseTimer = function()
{
this.nFrozenTime = this.getElapsedTimeImpl();
this.bInPauseMode = true;
};

ElapsedTime.prototype.continueTimer = function()
{
this.bInPauseMode = false;

var nPauseDuration = this.getElapsedTimeImpl() - this.nFrozenTime;

this.nStartTime += nPauseDuration;
};

ElapsedTime.prototype.adjustTimer = function( nOffset, bLimitToLastQueriedTime )
{
if( bLimitToLastQueriedTime == undefined )
bLimitToLastQueriedTime = true;

this.nStartTime -= nOffset;

if( this.bInHoldMode || this.bInPauseMode )
this.nFrozenTime += nOffset;
};

ElapsedTime.prototype.holdTimer = function()
{
this.nFrozenTime = this.getElapsedTimeImpl();
this.bInHoldMode = true;
};

ElapsedTime.prototype.releaseTimer = function()
{
this.bInHoldMode = false;
};

ElapsedTime.prototype.getSystemTime = function()
{
return ( getCurrentSystemTime() / 1000.0 );
};

ElapsedTime.prototype.getCurrentTime = function()
{
var nCurrentTime;
if ( !this.aTimeBase )
{
nCurrentTime = this.getSystemTime();
}
else
{
nCurrentTime = this.aTimeBase.getElapsedTimeImpl();
}

assert( ( typeof( nCurrentTime ) === typeof( 0 ) ) && isFinite( nCurrentTime ),
'ElapsedTime.getCurrentTime: assertion failed: nCurrentTime == ' + nCurrentTime );


return nCurrentTime;
};

ElapsedTime.prototype.getElapsedTimeImpl = function()
{
if( this.bInHoldMode || this.bInPauseMode )
{
return this.nFrozenTime;
}

var nCurTime = this.getCurrentTime();
return ( nCurTime - this.nStartTime );
};


/*****
* @libreofficeend
*
* Several parts of the above code are the result of the porting,
* started on August 2011, of the C++ code included in the source files
* placed under the folder '/slideshow/source' and subfolders.
* @source https://cgit.freedesktop.org/libreoffice/core/tree/slideshow/source
*
*/

]]>
 </script>
</svg>